{"version":3,"file":"video-b2fc7f15.js","sources":["../../src/dash-panels/video.vue"],"sourcesContent":["<template lang=\"pug\">\n\nfigure(class=\"video_container\")\n\n  video(:controls=\"controls\" :loop='loop' :allowfullscreen='allowfullscreen' :autoplay=\"autoplay\" :muted=\"muted\")\n\n    source(v-for=\"(src, type) in sources\" :src=\"src\" :type=\"type\" :key=\"type\")\n\n    p(v-for=\"(src, type) in sources\" :key=\"type\") Video tag not supported. Download the video&nbsp;\n      a(:href=\"src\" target=\"_blank\") here\n\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\nimport type { PropType } from 'vue'\n\nimport { FileSystemConfig } from '@/Globals'\nimport HTTPFileSystem from '@/js/HTTPFileSystem'\n\nexport default defineComponent({\n  name: 'VideoPanel',\n  props: {\n    fileSystemConfig: { type: Object as PropType<FileSystemConfig>, required: true },\n    subfolder: { type: String, required: true },\n    files: { type: Array, required: true },\n    config: { type: Object as any, required: true },\n  },\n  data: () => {\n    return {\n      controls: '', // string | null = null,\n      loop: '', // string | null = null\n      allowfullscreen: '', // : string | null = null\n      autoplay: '', // string | null = null\n      muted: '', // string | null = null\n      sources: {} as { [key: string]: string },\n      r: new RegExp('^(?:[a-z]+:)?//', 'i'),\n    }\n  },\n  async mounted() {\n    this.controls = this.config.controls\n    this.loop = this.config.loop\n    this.allowfullscreen = this.config.allowfullscreen\n    this.autoplay = this.config.autoplay\n    this.muted = this.config.muted\n\n    this.sources = {}\n\n    const fileApi = new HTTPFileSystem(this.fileSystemConfig)\n\n    // Resolve relative URLs\n    for (const k in this.config.sources) {\n      try {\n        let url = this.config.sources[k]\n        if (!this.r.test(url)) url = fileApi.cleanURL(`${this.subfolder}/${url}`)\n        this.sources[k] = url\n      } catch (e) {\n        if (fileApi.hasHandle()) {\n          this.$emit('error', 'Cannot play videos on Chrome local filesystem')\n        } else {\n          this.$emit('error', '' + e)\n        }\n      }\n    }\n\n    this.$emit('isLoaded')\n  },\n})\n</script>\n\n<style scoped lang=\"scss\">\n@import '@/styles.scss';\n\n.dash-element {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  display: flex;\n  flex-direction: column;\n}\n\n@media only screen and (max-width: 640px) {\n}\n</style>\n"],"names":["_sfc_main","defineComponent","fileApi","HTTPFileSystem","k","url","e"],"mappings":"2FAoBA,MAAAA,EAAAC,EAAA,CACA,KAAA,aACA,MAAA,CACA,iBAAA,CAAA,KAAA,OAAA,SAAA,EAAA,EACA,UAAA,CAAA,KAAA,OAAA,SAAA,EAAA,EACA,MAAA,CAAA,KAAA,MAAA,SAAA,EAAA,EACA,OAAA,CAAA,KAAA,OAAA,SAAA,EAAA,CACA,EACA,KAAA,KACA,CACA,SAAA,GACA,KAAA,GACA,gBAAA,GACA,SAAA,GACA,MAAA,GACA,QAAA,CAAA,EACA,EAAA,IAAA,OAAA,kBAAA,GAAA,CAAA,GAGA,MAAA,SAAA,CACA,KAAA,SAAA,KAAA,OAAA,SACA,KAAA,KAAA,KAAA,OAAA,KACA,KAAA,gBAAA,KAAA,OAAA,gBACA,KAAA,SAAA,KAAA,OAAA,SACA,KAAA,MAAA,KAAA,OAAA,MAEA,KAAA,QAAA,GAEA,MAAAC,EAAA,IAAAC,EAAA,KAAA,gBAAA,EAGA,UAAAC,KAAA,KAAA,OAAA,QACA,GAAA,CACA,IAAAC,EAAA,KAAA,OAAA,QAAAD,CAAA,EACA,KAAA,EAAA,KAAAC,CAAA,IAAAA,EAAAH,EAAA,SAAA,GAAA,KAAA,SAAA,IAAAG,CAAA,EAAA,GACA,KAAA,QAAAD,CAAA,EAAAC,QACAC,EAAA,CACAJ,EAAA,YACA,KAAA,MAAA,QAAA,+CAAA,EAEA,KAAA,MAAA,QAAA,GAAAI,CAAA,CAEA,CAGA,KAAA,MAAA,UAAA,CACA,CACA,CAAA"}