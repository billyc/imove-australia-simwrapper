{"version":3,"file":"EventViewer-0931d0be.js","sources":["../../src/plugins/event-viewer/EventDeckMap.tsx","../../src/plugins/event-viewer/EventViewer.vue"],"sourcesContent":["import React, { useState, useMemo, useEffect } from 'react'\nimport DeckGL from '@deck.gl/react'\nimport { StaticMap } from 'react-map-gl'\nimport { ScatterplotLayer } from '@deck.gl/layers'\nimport { DataFilterExtension } from '@deck.gl/extensions'\nimport * as timeConvert from 'convert-seconds'\n\nimport { REACT_VIEW_HANDLES, MAPBOX_TOKEN } from '@/Globals'\nimport ScatterplotColorBinsLayer from '@/plugins/xy-time/ScatterplotColorBinsLayer'\nimport MovingIconsLayer from '@/layers/moving-icons/moving-icons-vehicles-layer'\nimport globalStore from '@/store'\nimport { NetworkLinks } from '@/js/DashboardDataManager'\n\nconst BASE_URL = import.meta.env.BASE_URL\n\nconst ICON_MAPPING = {\n  marker: { x: 0, y: 0, width: 128, height: 128, mask: true },\n  info: { x: 128, y: 0, width: 128, height: 128, mask: true },\n  vehicle: { x: 128, y: 128, width: 128, height: 128, mask: true },\n  diamond: { x: 0, y: 128, width: 128, height: 128, mask: false },\n}\n\nconst dataFilter = new DataFilterExtension({ filterSize: 1 })\n\nfunction convertSecondsToClockTimeMinutes(index: number) {\n  const seconds = index\n\n  try {\n    const hms = timeConvert(seconds)\n    const minutes = ('00' + hms.minutes).slice(-2)\n    return `${hms.hours}:${minutes}`\n  } catch (e) {\n    return '00:00'\n  }\n}\n\n// -------------------------------------------------------------------\nexport default function Component({\n  viewId = 0,\n  eventLayers = [] as any[],\n  network = {} as NetworkLinks,\n  linkIdLookup = {} as any,\n  timeFilter = [] as number[],\n  dark = false,\n  colors = [\n    [1, 0, 0],\n    [0.25, 0.25, 1],\n  ] as number[][],\n  breakpoints = [0.0] as number[],\n  radius = 5,\n  mapIsIndependent = false,\n  simulationTime = 20000,\n  projection = '',\n}) {\n  // manage SimWrapper centralized viewState - for linked maps\n  const [viewState, setViewState] = useState(globalStore.state.viewState)\n\n  REACT_VIEW_HANDLES[viewId] = () => {\n    setViewState(globalStore.state.viewState)\n  }\n\n  function handleViewState(view: any) {\n    if (!view.latitude) return\n\n    if (!view.center) view.center = [0, 0]\n    view.center[0] = view.longitude\n    view.center[1] = view.latitude\n    setViewState(view)\n\n    if (!mapIsIndependent) globalStore.commit('setMapCamera', view)\n  }\n\n  function getTooltip(element: any) {\n    // console.log(element)\n    if (element.index < 0) return null\n\n    return 'hi'\n\n    // const layerId = element?.layer?.id\n    // if (layerId === undefined) return null\n\n    // const time = pointLayers[layerId].time[element.index]\n    // const humanTime = convertSecondsToClockTimeMinutes(time)\n\n    // const value = pointLayers[layerId].value[element.index]\n    // const cleanValue = Math.round(1e6 * value) / 1e6\n    // return {\n    //   html: `\\\n    //     <table style=\"font-size: 0.9rem\">\n    //     <tr>\n    //       <td>Value</td>\n    //       <td style=\"padding-left: 0.5rem;\"><b>${cleanValue}</b></td>\n    //     </tr><tr>\n    //       <td style=\"text-align: right;\">Time</td>\n    //       <td style=\"padding-left: 0.5rem;\"><b>${humanTime}</b></td>\n    //     </tr>\n    //     </table>\n    //   `,\n    //   style: dark\n    //     ? { color: '#ccc', backgroundColor: '#2a3c4f' }\n    //     : { color: '#223', backgroundColor: 'white' },\n    // }\n  }\n\n  // add a scatterplotlayer for each set of points in eventLayers\n  const pointLayers = eventLayers.map((layer, layerIndex) => {\n    // The entire layer can be hidden if all of its points\n    // are beyond the timeFilter range that is being shown.\n    const outOfRange =\n      layer.times[0] > timeFilter[1] || layer.times[layer.times.length - 1] < timeFilter[0]\n\n    return new ScatterplotLayer({\n      data: {\n        length: layer.times.length,\n        attributes: {\n          getFilterValue: { value: layer.times, size: 1 },\n          getPosition: { value: layer.positions, size: 2 },\n        },\n      },\n      autoHighlight: true,\n      breakpoints: breakpoints,\n      colors: colors,\n      extensions: [dataFilter],\n      id: 'hello' + layerIndex,\n      filled: true,\n      filterRange: timeFilter.length ? timeFilter : null,\n      getRadius: 20,\n      getFillColor: [240, 128, 10],\n      highlightColor: [255, 0, 224],\n      opacity: 1,\n      parameters: { depthTest: false },\n      pickable: true,\n      radiusScale: 1,\n      stroked: false,\n      updateTriggers: {\n        getPosition: eventLayers,\n        //   // getFillColor: pointLayers,\n        getFilterValue: timeFilter,\n      },\n      // transitions: {\n      //   getFillColor: 500,\n      //   getColor: 500,\n      //   getValue: 500,\n      //   getFilterValue: 500,\n      // },\n      // hide layers that are entirely outside the time window filter:\n      visible: !outOfRange,\n    })\n  })\n\n  // add the vehicle motion layer in each eventLayer\n  const vehicleLayers = eventLayers.map((layer, layerIndex) => {\n    // The entire layer can be hidden if all of its points\n    // are beyond the timeFilter range that is being shown.\n    const outOfRange =\n      layer.vehicles.t0[0] > timeFilter[1] ||\n      layer.vehicles.t1[layer.vehicles.t1.length - 1] < timeFilter[0]\n\n    // console.log(outOfRange)\n    //@ts-ignore\n    return new MovingIconsLayer({\n      data: {\n        length: layer.vehicles.t0.length,\n        attributes: {\n          getTimeStart: { value: layer.vehicles.t0, size: 1 },\n          getTimeEnd: { value: layer.vehicles.t1, size: 1 },\n          getPathStart: { value: layer.vehicles.locO, size: 2 },\n          getPathEnd: { value: layer.vehicles.locD, size: 2 },\n        },\n      },\n      id: 'vehicles' + layerIndex,\n      // getIcon: (d: any) => 'vehicle',\n      getColor: [64, 96, 255], // (d: any) => props.colors[d.occ],\n      iconMoving: 'vehicle',\n      iconStill: 'diamond',\n      getSize: 20, // searchEnabled ? 56 : 44,\n      opacity: 1.0,\n      currentTime: simulationTime,\n      shadowEnabled: true,\n      iconAtlas: BASE_URL + '/images/icon-atlas.png',\n      iconMapping: ICON_MAPPING,\n      sizeScale: 1,\n      billboard: false,\n      pickable: true,\n      depthTest: true,\n      autoHighlight: false,\n      highlightColor: [255, 0, 255],\n      // onHover: setHoverInfo,\n      parameters: {\n        depthTest: false,\n      },\n      visible: !outOfRange,\n    })\n  })\n\n  const allLayers = [...pointLayers, ...vehicleLayers]\n\n  const showBackgroundMap = projection && projection !== 'Atlantis'\n\n  return (\n    <DeckGL\n      layers={allLayers}\n      controller={true}\n      useDevicePixels={true}\n      viewState={viewState}\n      onViewStateChange={(e: any) => handleViewState(e.viewState)}\n      pickingRadius={4}\n      onClick={getTooltip}\n      getTooltip={getTooltip}\n    >\n      {showBackgroundMap && (\n        /*\n        // @ts-ignore */\n        <StaticMap\n          mapStyle={globalStore.getters.mapStyle}\n          preventStyleDiffing={true}\n          mapboxApiAccessToken={MAPBOX_TOKEN}\n        />\n      )}\n    </DeckGL>\n  )\n}\n","<template lang=\"pug\">\n.viz-plugin(oncontextmenu=\"return false\" :id=\"`id-${viewId}`\")\n\n  event-map.map-layer(v-if=\"!thumbnail && isLoaded\"\n    :viewId=\"viewId\"\n    :eventLayers=\"eventLayers\"\n    :network=\"network\"\n    :linkIdLookup=\"linkIdLookup\"\n    :timeFilter=\"timeFilter\"\n    :dark=\"this.$store.state.isDarkMode\"\n    :colors=\"this.colors\"\n    :breakpoints=\"this.breakpoints\"\n    :radius=\"this.guiConfig.radius\"\n    :mapIsIndependent=\"false\"\n    :simulationTime=\"timeFilter[1]\"\n    :projection=\"vizDetails.projection\"\n  )\n\n  zoom-buttons(v-if=\"!thumbnail\" corner=\"bottom\")\n\n  .top-right\n    .gui-config(:id=\"configId\")\n\n  .bottom-right\n    .legend-area(v-if=\"legendStore\")\n      legend-box(:legendStore=\"legendStore\")\n\n  time-slider.time-slider-area(v-if=\"isLoaded\"\n    :range=\"timeRange\"\n    :activeTimeExtent=\"timeFilter\"\n    :labels=\"timeLabels\"\n    :isAnimating=\"isAnimating\"\n    @timeExtent=\"handleTimeSliderValues\"\n    @toggleAnimation=\"toggleAnimation\"\n    @drag=\"isAnimating=false\"\n  )\n\n  .message(v-if=\"!thumbnail && myState.statusMessage\")\n    p.status-message {{ myState.statusMessage }}\n\n</template>\n\n<script lang=\"ts\">\nconst i18n = {\n  messages: {\n    en: {\n      loading: 'Loading data...',\n      sorting: 'Sorting into bins...',\n      aggregate: 'Summary',\n      maxHeight: '3D Height',\n      showDetails: 'Show Details',\n      selection: 'Selection',\n      areas: 'Areas',\n      count: 'Count',\n      promptCRS: `Enter the coordinate reference system, e.g. EPSG:25832\\n\\nThese coordinates are not in long/lat format. To fix this permanently, convert them to long/lat or add \"# EPSG:xxxx\" to your CSV header`,\n    },\n    de: {\n      loading: 'Dateien laden...',\n      sorting: 'Sortieren...',\n      aggregate: 'Daten',\n      maxHeight: '3-D Höhe',\n      showDetails: 'Details anzeigen',\n      selection: 'Ausgewählt',\n      areas: 'Orte',\n      count: 'Anzahl',\n    },\n  },\n}\n\nimport { defineComponent } from 'vue'\nimport type { PropType } from 'vue'\n\nimport GUI from 'lil-gui'\nimport YAML from 'yaml'\nimport colormap from 'colormap'\n\nimport util from '@/js/util'\nimport globalStore from '@/store'\nimport CollapsiblePanel from '@/components/CollapsiblePanel.vue'\nimport DrawingTool from '@/components/DrawingTool/DrawingTool.vue'\nimport HTTPFileSystem from '@/js/HTTPFileSystem'\nimport LegendBox from '@/components/viz-configurator/LegendBox.vue'\nimport LegendStore from '@/js/LegendStore'\nimport TimeSlider from '@/components/TimeSlider.vue'\nimport EventMap from './EventDeckMap'\nimport ZoomButtons from '@/components/ZoomButtons.vue'\n\nimport MATSimEventStreamer from '@/workers/MATSimEventStreamer.worker.ts?worker'\n\nimport {\n  ColorScheme,\n  FileSystem,\n  LegendItem,\n  LegendItemType,\n  FileSystemConfig,\n  VisualizationPlugin,\n  Status,\n  REACT_VIEW_HANDLES,\n} from '@/Globals'\nimport DashboardDataManager, { NetworkLinks } from '@/js/DashboardDataManager'\n\ninterface VizDetail {\n  title: string\n  description?: string\n  file: string\n  projection: any\n  thumbnail?: string\n  center: any\n  zoom: number\n}\n\ninterface PointLayer {\n  color: Uint8Array\n  value: Float32Array\n  coordinates: Float32Array\n  time: Float32Array\n  timeRange: number[]\n}\n\nconst MyComponent = defineComponent({\n  name: 'EventViewerPlugin',\n  i18n,\n  components: {\n    CollapsiblePanel,\n    DrawingTool,\n    EventMap,\n    LegendBox,\n    TimeSlider,\n    ZoomButtons,\n  },\n  props: {\n    root: { type: String, required: true },\n    subfolder: { type: String, required: true },\n    yamlConfig: String,\n    config: Object as any,\n    thumbnail: Boolean,\n    datamanager: { type: Object as PropType<DashboardDataManager> },\n  },\n  data: () => {\n    const colorRamps = ['bathymetry', 'electric', 'inferno', 'jet', 'magma', 'par', 'viridis']\n\n    return {\n      myDataManager: null as DashboardDataManager | null,\n      network: {\n        source: new Float32Array(),\n        dest: new Float32Array(),\n        linkIds: [],\n        projection: '',\n      } as NetworkLinks,\n      linkIdLookup: {} as any,\n      guiConfig: {\n        buckets: 7,\n        exponent: 4,\n        radius: 5,\n        'clip max': 100,\n        'color ramp': 'viridis',\n        flip: false,\n        colorRamps: colorRamps,\n      },\n      viewId: ('xyt-id-' + Math.floor(1e12 * Math.random())) as any,\n      configId: ('gui-config-' + Math.floor(1e12 * Math.random())) as any,\n      timeLabels: [0, 1] as any[],\n      startTime: 0,\n      isAnimating: false,\n      timeFilter: [0, 3599],\n      colors: [\n        [128, 128, 128],\n        [128, 128, 128],\n      ] as number[][],\n      breakpoints: [0],\n      range: [Infinity, -Infinity],\n      timeRange: [Infinity, -Infinity],\n      legendStore: null as LegendStore | null,\n      standaloneYAMLconfig: {\n        title: '',\n        description: '',\n        file: '',\n        projection: '',\n        thumbnail: '',\n        radius: 250,\n        maxHeight: 0,\n        center: null as any,\n        zoom: 9,\n      } as any,\n      YAMLrequirementsXY: { file: '' },\n      columnLookup: [] as number[],\n      gzipWorker: null as Worker | null,\n      vizDetails: {\n        title: '',\n        description: '',\n        file: '',\n        projection: '',\n        thumbnail: '',\n        center: null as any,\n        zoom: 9,\n      } as VizDetail,\n      myState: {\n        statusMessage: '',\n        subfolder: '',\n        yamlConfig: '',\n        thumbnail: false,\n      },\n      eventLayers: [] as any[],\n      isLoaded: false,\n      animator: null as any,\n      guiController: null as GUI | null,\n      resizer: null as ResizeObserver | null,\n      thumbnailUrl: \"url('assets/thumbnail.jpg') no-repeat;\",\n      ANIMATE_SPEED: 0.25,\n      animationElapsedTime: 0,\n      animationClockTime: 0,\n    }\n  },\n  computed: {\n    fileApi(): HTTPFileSystem {\n      return new HTTPFileSystem(this.fileSystem, globalStore)\n    },\n\n    fileSystem(): FileSystemConfig {\n      const svnProject: FileSystemConfig[] = this.$store.state.svnProjects.filter(\n        (a: FileSystemConfig) => a.slug === this.root\n      )\n      if (svnProject.length === 0) {\n        console.log('no such project')\n        throw Error\n      }\n      return svnProject[0]\n    },\n    urlThumbnail(): any {\n      return this.thumbnailUrl\n    },\n  },\n  watch: {\n    '$store.state.viewState'() {\n      if (REACT_VIEW_HANDLES[this.viewId]) REACT_VIEW_HANDLES[this.viewId]()\n    },\n  },\n  methods: {\n    handleTimeSliderValues(timeValues: any[]) {\n      this.animationElapsedTime = timeValues[0]\n      this.timeFilter = timeValues\n      this.timeLabels = [\n        this.convertSecondsToClockTimeMinutes(timeValues[0]),\n        this.convertSecondsToClockTimeMinutes(timeValues[1]),\n      ]\n    },\n\n    setupLogoMover() {\n      this.resizer = new ResizeObserver(this.moveLogo)\n      const deckmap = document.getElementById(`id-${this.viewId}`) as HTMLElement\n      this.resizer.observe(deckmap)\n    },\n\n    moveLogo() {\n      const deckmap = document.getElementById(`${this.viewId}`) as HTMLElement\n      const logo = deckmap?.querySelector('.mapboxgl-ctrl-bottom-left') as HTMLElement\n      if (logo) {\n        const right = deckmap.clientWidth > 640 ? '280px' : '36px'\n        logo.style.right = right\n      }\n    },\n\n    setupGui() {\n      this.guiController = new GUI({\n        title: 'Color Settings',\n        injectStyles: true,\n        width: 200,\n        container: document.getElementById(this.configId) || undefined,\n      })\n\n      const colors = this.guiController // .addFolder('Colors')\n      colors.add(this.guiConfig, 'buckets', 2, 19, 1).onChange(this.setColors)\n      colors.add(this.guiConfig, 'exponent', 1, 10, 1).onChange(this.setColors)\n      colors.add(this.guiConfig, 'clip max', 0, 100, 1).onChange(this.setColors)\n      colors.add(this.guiConfig, 'radius', 1, 20, 1)\n      colors.add(this.guiConfig, 'color ramp', this.guiConfig.colorRamps).onChange(this.setColors)\n      colors.add(this.guiConfig, 'flip').onChange(this.setColors)\n\n      // const times = this.guiController.addFolder('Time')\n    },\n\n    async solveProjection() {\n      if (this.thumbnail) return\n\n      console.log('WHAT PROJECTION:')\n\n      try {\n        const text = await this.fileApi.getFileText(\n          this.myState.subfolder + '/' + this.myState.yamlConfig\n        )\n        this.vizDetails = YAML.parse(text)\n      } catch (e) {\n        console.error(e)\n      }\n    },\n\n    async getVizDetails() {\n      if (this.config) {\n        this.validateYAML()\n        this.vizDetails = Object.assign({}, this.config)\n        return\n      }\n\n      const hasYaml = new RegExp('.*(yml|yaml)$').test(this.myState.yamlConfig)\n\n      if (hasYaml) {\n        await this.loadStandaloneYAMLConfig()\n      } else {\n        // console.log('NO YAML WTF')\n        this.setConfigForRawCSV()\n      }\n    },\n\n    setConfigForRawCSV() {\n      let projection = 'EPSG:4326' // Include \"# EPSG:xxx\" in header of CSV to set EPSG\n\n      // output_trips:\n      this.vizDetails = {\n        title: 'EVENTS: ' + this.myState.yamlConfig,\n        description: this.myState.yamlConfig,\n        file: this.myState.yamlConfig,\n        projection,\n        center: this.vizDetails.center,\n        zoom: this.vizDetails.zoom,\n      }\n      this.$emit('title', this.vizDetails.title || this.vizDetails.file)\n      return\n    },\n\n    async loadStandaloneYAMLConfig() {\n      if (!this.fileApi) return\n      try {\n        // might be a project config:\n        const filename =\n          this.myState.yamlConfig.indexOf('/') > -1\n            ? this.myState.yamlConfig\n            : this.myState.subfolder + '/' + this.myState.yamlConfig\n\n        const text = await this.fileApi.getFileText(filename)\n        this.standaloneYAMLconfig = Object.assign({}, YAML.parse(text))\n        this.validateYAML()\n        this.setVizDetails()\n      } catch (err) {\n        const e = err as any\n        console.log('failed')\n\n        this.$emit('error', {\n          type: Status.ERROR,\n          msg: `File not found`,\n          desc: `Could not find: ${this.myState.subfolder}/${this.myState.yamlConfig}`,\n        })\n      }\n    },\n\n    validateYAML() {\n      const hasYaml = new RegExp('.*(yml|yaml)$').test(this.myState.yamlConfig)\n      let configuration\n\n      if (hasYaml) {\n        console.log('has yaml')\n        configuration = this.standaloneYAMLconfig\n      } else {\n        console.log('no yaml')\n        configuration = this.config\n      }\n\n      for (const key in this.YAMLrequirementsXY) {\n        if (key in configuration === false) {\n          this.$emit('error', {\n            type: Status.ERROR,\n            msg: `EventViewer missing required key: ${key}`,\n            desc: `Required keys: ${Object.keys(this.YAMLrequirementsXY)}`,\n          })\n        }\n      }\n\n      if (configuration.radius == 0) {\n        this.$emit('error', {\n          type: Status.WARNING,\n          msg: `Radius set to zero`,\n          desc: 'Radius can not be zero, preset value used instead. ',\n        })\n      }\n\n      if (configuration.zoom < 5 || configuration.zoom > 20) {\n        this.$emit('error', {\n          type: Status.WARNING,\n          msg: `Zoom is out of the recommended range `,\n          desc: 'Zoom levels should be between 5 and 20. ',\n        })\n      }\n    },\n\n    setVizDetails() {\n      this.vizDetails = Object.assign({}, this.vizDetails, this.standaloneYAMLconfig)\n\n      const t = this.vizDetails.title ? this.vizDetails.title : 'EVENTS: ' + this.vizDetails.file\n      this.$emit('title', t)\n    },\n    async buildThumbnail() {\n      if (this.thumbnail && this.vizDetails.thumbnail) {\n        try {\n          const blob = await this.fileApi.getFileBlob(\n            this.myState.subfolder + '/' + this.vizDetails.thumbnail\n          )\n          const buffer = await blob.arrayBuffer()\n          const base64 = util.arrayBufferToBase64(buffer)\n          if (base64)\n            this.thumbnailUrl = `center / cover no-repeat url(data:image/png;base64,${base64})`\n        } catch (e) {\n          console.error(e)\n        }\n      }\n    },\n\n    async streamEventFile(filename: string) {\n      this.myState.statusMessage = 'Loading file...'\n      let totalRows = 0\n      this.range = [Infinity, -Infinity]\n      this.timeRange = [Infinity, -Infinity]\n      this.animationElapsedTime = 0\n      this.timeFilter = [0, 59]\n\n      // get the raw unzipped arraybuffer\n      if (this.gzipWorker) this.gzipWorker.terminate()\n      this.eventLayers = []\n      this.gzipWorker = new MATSimEventStreamer()\n\n      const formatter = Intl.NumberFormat()\n\n      this.gzipWorker.onmessage = async (event: MessageEvent) => {\n        const message = event.data\n        if (message.status) {\n          this.myState.statusMessage = message.status\n        } else if (message.error) {\n          this.myState.statusMessage = message.error\n          this.$emit('error', {\n            type: Status.ERROR,\n            msg: `XYT Loading Error`,\n            desc: `Error loading: ${this.myState.subfolder}/${this.vizDetails.file}`,\n          })\n        } else if (message.finished) {\n          this.finishedLoadingData(totalRows, message)\n        } else {\n          const events = message.events as any[]\n\n          console.log(events.length)\n\n          totalRows += events.length\n          this.myState.statusMessage = 'Loading ' + formatter.format(totalRows) + ' events'\n\n          // minmax all events\n          this.timeRange = [\n            Math.min(this.timeRange[0], events[0].time),\n            Math.max(this.timeRange[1], events[events.length - 1].time),\n          ]\n\n          // minmax vehicle trips specifically\n          this.timeRange = [\n            Math.min(this.timeRange[0], message.vehicleTrips[0].t0),\n            Math.max(this.timeRange[1], message.vehicleTrips[message.vehicleTrips.length - 1].t1),\n          ]\n\n          // .filter(row => row.link)\n          const linkEvents = events.map(row => {\n            return {\n              time: row.time,\n              link: row.link,\n            } as any\n          })\n\n          // POSITIONS ----\n          const positions = new Float32Array(2 * linkEvents.length).fill(NaN)\n          for (let i = 0; i < linkEvents.length; i++) {\n            const offset = 2 * this.linkIdLookup[linkEvents[i].link]\n            positions[i * 2] = this.network.source[offset]\n            positions[i * 2 + 1] = this.network.source[offset + 1]\n          }\n\n          // VEHICLES -----------\n          const numTrips = message.vehicleTrips.length\n          const tripData = {\n            locO: new Float32Array(2 * numTrips).fill(NaN),\n            locD: new Float32Array(2 * numTrips).fill(NaN),\n            t0: new Float32Array(numTrips).fill(NaN),\n            t1: new Float32Array(numTrips).fill(NaN),\n          }\n\n          for (let i = 0; i < numTrips; i++) {\n            const trip = message.vehicleTrips[i]\n            const offset = 2 * this.linkIdLookup[trip.link]\n            tripData.locO[i * 2 + 0] = this.network.source[0 + offset]\n            tripData.locO[i * 2 + 1] = this.network.source[1 + offset]\n            tripData.locD[i * 2 + 0] = this.network.dest[0 + offset]\n            tripData.locD[i * 2 + 1] = this.network.dest[1 + offset]\n            // enter/leave traffic happen in the middle of the link\n            if (i == 0) {\n              tripData.locO[i * 2 + 0] = 0.5 * (tripData.locO[i * 2 + 0] + tripData.locD[i * 2 + 0])\n              tripData.locO[i * 2 + 1] = 0.5 * (tripData.locO[i * 2 + 1] + tripData.locD[i * 2 + 1])\n            } else if (i == numTrips - 1) {\n              tripData.locD[i * 2 + 0] = 0.5 * (tripData.locO[i * 2 + 0] + tripData.locD[i * 2 + 0])\n              tripData.locD[i * 2 + 1] = 0.5 * (tripData.locO[i * 2 + 1] + tripData.locD[i * 2 + 1])\n            }\n            tripData.t0[i] = trip.t0\n            tripData.t1[i] = trip.t1\n          }\n\n          // ALL DONE --------\n\n          this.eventLayers.push({\n            events: events.slice(1, 2), // linkEvents.slice(1, 2),\n            positions,\n            vehicles: tripData,\n            times: message.times,\n          })\n\n          // zoom map on first load\n          // if (!totalRows) this.setFirstZoom(message.coordinates, rows)\n          // // save layer data\n          // totalRows += rows\n        }\n      }\n\n      this.gzipWorker.postMessage({\n        filePath: filename,\n        fileSystem: this.fileSystem,\n        projection: this.vizDetails.projection,\n      })\n    },\n\n    setFirstZoom(coordinates: any[], rows: number) {\n      const longitude = 0.5 * (coordinates[0] + coordinates[rows * 2 - 2])\n      const latitude = 0.5 * (coordinates[1] + coordinates[rows * 2 - 1])\n\n      if (Number.isFinite(longitude) && Number.isFinite(latitude)) {\n        globalStore.commit(\n          'setMapCamera',\n          Object.assign({}, globalStore.state.viewState, { longitude, latitude, zoom: 10 })\n        )\n      }\n    },\n\n    finishedLoadingData(totalRows: number, data: any) {\n      this.isLoaded = true\n      this.range = data.range\n      this.myState.statusMessage = ''\n      this.timeFilter = [this.timeRange[0], this.timeRange[0] + 59]\n\n      if (this.gzipWorker) this.gzipWorker.terminate()\n\n      this.setColors()\n      this.moveLogo()\n      // this.eventLayers = [...this.eventLayers]\n\n      console.log('ALL DONE', {\n        totalRows,\n        data: data.range,\n        time: this.timeRange,\n        layers: this.eventLayers.length,\n      })\n    },\n\n    toggleAnimation() {\n      this.isAnimating = !this.isAnimating\n      if (this.isAnimating) {\n        this.animationElapsedTime = this.timeFilter[0] - this.timeRange[0]\n        this.startTime = Date.now() - this.animationElapsedTime / this.ANIMATE_SPEED\n        this.animate()\n      }\n    },\n\n    setColors() {\n      const EXPONENT = this.guiConfig.exponent // powerFunction // 4 // log-e? not steep enough\n\n      let colors256 = colormap({\n        colormap: this.guiConfig['color ramp'],\n        nshades: 256,\n        format: 'rba',\n        alpha: 1,\n      }).map((c: number[]) => [c[0], c[1], c[2]])\n\n      if (this.guiConfig.flip) colors256 = colors256.reverse()\n\n      const step = 256 / (this.guiConfig.buckets - 1)\n      const colors = []\n      for (let i = 0; i < this.guiConfig.buckets - 1; i++) {\n        colors.push(colors256[Math.round(step * i)])\n      }\n      colors.push(colors256[255])\n\n      // figure out min and max\n      const max1 = Math.pow(this.range[1], 1 / EXPONENT)\n      const max2 = (max1 * this.guiConfig['clip max']) / 100.0\n      // const clippedMin = (this.range[1] * this.clipData[0]) / 100.0\n\n      // console.log({ max1, max2 })\n\n      const breakpoints = [] as number[]\n      for (let i = 1; i < this.guiConfig.buckets; i++) {\n        const raw = (max2 * i) / this.guiConfig.buckets\n        const breakpoint = Math.pow(raw, EXPONENT)\n        breakpoints.push(breakpoint)\n      }\n\n      // only update legend if we have the full dataset already\n      if (this.isLoaded) this.setLegend(colors, breakpoints)\n\n      this.colors = colors\n      this.breakpoints = breakpoints\n    },\n\n    setLegend(colors: any[], breakpoints: number[]) {\n      // hide the legend if there is no data to show.\n      if (this.range[1] - this.range[0] === 0) return\n\n      this.legendStore = new LegendStore()\n      this.legendStore.setLegendSection({\n        section: 'Legend',\n        column: 'Legend',\n        values: colors.map((rgb, index) => {\n          const breakpoint = breakpoints[index == 0 ? index : index - 1]\n          let label = '' + Math.round(1e6 * breakpoint) / 1e6\n          if (index == 0) label = '< ' + label\n          if (index == colors.length - 1) label = '> ' + label\n          return { label, value: rgb }\n        }),\n      })\n    },\n\n    async loadNetwork() {\n      if (!this.myDataManager) throw Error('event viewer: no datamanager')\n\n      let networkFilename = this.vizDetails.file.replace('events.xml', 'network.xml')\n      const network = await this.myDataManager.getRoadNetwork(\n        networkFilename,\n        this.myState.subfolder,\n        Object.assign({}, this.vizDetails)\n      )\n\n      this.vizDetails.projection = '' + network.projection\n\n      const linkIdLookup = {} as any\n      let i = 0\n      for (const link of network.linkIds) {\n        linkIdLookup[`${link}`] = i\n        i++\n      }\n\n      return { network, linkIdLookup }\n    },\n\n    async loadFiles() {\n      const { network, linkIdLookup } = await this.loadNetwork()\n      this.network = network\n      this.linkIdLookup = linkIdLookup\n\n      let dataArray: any = []\n      if (!this.fileApi) return { dataArray }\n\n      try {\n        let filename = `${this.myState.subfolder}/${this.vizDetails.file}`\n        await this.streamEventFile(filename)\n      } catch (e) {\n        console.error(e)\n        this.myState.statusMessage = '' + e\n        this.$emit('error', {\n          type: Status.ERROR,\n          msg: `Loading/Parsing Error`,\n          desc: 'Error loading/parsing: ${this.myState.subfolder}/${this.vizDetails.file}',\n        })\n      }\n    },\n\n    animate() {\n      if (!this.isAnimating) return\n\n      this.animationElapsedTime = this.ANIMATE_SPEED * (Date.now() - this.startTime)\n\n      this.animationClockTime = this.animationElapsedTime + this.timeRange[0]\n\n      if (this.animationClockTime > this.timeRange[1]) {\n        this.startTime = Date.now()\n        this.animationElapsedTime = 0 // this.timeRange[0]\n      }\n\n      const span = this.timeFilter[1] - this.timeFilter[0]\n      this.timeFilter = [this.animationClockTime, this.animationClockTime + span]\n\n      this.animator = window.requestAnimationFrame(this.animate)\n    },\n\n    convertSecondsToClockTimeMinutes(index: number) {\n      const h = Math.floor(index / 3600)\n      const m = Math.floor((index - h * 3600) / 60)\n      const s = index - h * 3600 - m * 60\n\n      const hms = { h: `${h}`, m: `${m}`.padStart(2, '0'), s: `${s}`.padStart(2, '0') }\n\n      return `${hms.h}:${hms.m}`\n    },\n  },\n\n  async mounted() {\n    this.$store.commit('setFullScreen', !this.thumbnail)\n    this.myState.thumbnail = this.thumbnail\n    this.myState.yamlConfig = this.yamlConfig || ''\n    this.myState.subfolder = this.subfolder\n\n    // DataManager might be passed in from the dashboard; or we might be\n    // in single-view mode, in which case we need to create one for ourselves\n    this.myDataManager = this.datamanager || new DashboardDataManager(this.root, this.subfolder)\n\n    await this.getVizDetails()\n    await this.buildThumbnail()\n\n    if (this.thumbnail) return\n\n    this.setupLogoMover()\n\n    // ----------------------------------------------------\n    // this.setupGui()\n    this.myState.statusMessage = `${this.$i18n.t('loading')}`\n\n    if (!this.isLoaded) await this.loadFiles()\n  },\n\n  beforeDestroy() {\n    // MUST erase the React view handle to prevent gigantic memory leak!\n    REACT_VIEW_HANDLES[this.viewId] = undefined\n    delete REACT_VIEW_HANDLES[this.viewId]\n\n    try {\n      if (this.gzipWorker) {\n        this.gzipWorker.postMessage({ terminate: true })\n        this.gzipWorker.terminate()\n      }\n      if (this.guiController) this.guiController.destroy()\n    } catch (e) {\n      console.warn(e)\n    }\n\n    if (this.animator) window.cancelAnimationFrame(this.animator)\n\n    this.$store.commit('setFullScreen', false)\n  },\n})\n\nexport default MyComponent\n</script>\n\n<style scoped lang=\"scss\">\n@import '@/styles.scss';\n\n.viz-plugin {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  display: flex;\n  flex-direction: column;\n  min-height: $thumbnailHeight;\n  background: var(--bgMapPanel);\n}\n\n.message {\n  z-index: 5;\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  margin: auto auto 0 0;\n  background-color: var(--bgPanel);\n  padding: 0rem 0.5rem;\n  border-radius: 0;\n\n  a {\n    color: white;\n    text-decoration: none;\n\n    &.router-link-exact-active {\n      color: white;\n    }\n  }\n\n  p {\n    color: var(--textFancy);\n    font-size: 1.2rem;\n    font-weight: normal;\n    line-height: 1.75rem;\n    margin: auto 0.5rem auto 0;\n    padding: 0 0;\n  }\n}\n\n.map-layer {\n  pointer-events: auto;\n}\n\n.drawing-tool {\n  position: absolute;\n  top: 0;\n  right: 0;\n  pointer-events: none;\n}\n\n.bottom-right {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  margin: auto 7px 15rem auto;\n  box-shadow: 0px 0px 5px 3px rgba(128, 128, 128, 0.1);\n}\n\n.legend-area {\n  background-color: var(--bgPanel);\n  border: 1px solid var(--bgPanel2);\n}\n\n.time-slider-area {\n  position: absolute;\n  bottom: 2.5rem;\n  left: 0;\n  right: 0;\n  margin: 0 8rem 0 0.5rem;\n  filter: $filterShadow;\n}\n\n.buckets {\n  color: var(--text);\n  padding: 4px 4px 4px 4px;\n  display: flex;\n}\n\n.ramp-selector {\n  background-color: var(--bgBold);\n}\n\n.configurator {\n  user-select: none;\n  background-color: var(--bgPanel);\n  margin-top: 2rem;\n}\n\n.clip-slider {\n  margin: 0 0.5rem;\n}\n\n.top-right {\n  background-color: var(--bgPanel2);\n  color: white;\n  position: absolute;\n  top: 0;\n  right: 0;\n  z-index: 5;\n  border-left: 1px solid #66669940;\n  border-bottom: 1px solid #66669940;\n  box-shadow: 0px 0px 5px 3px rgba(128, 128, 128, 0.1);\n}\n\n* > .number {\n  background-color: yellow;\n}\n\n@media only screen and (max-width: 640px) {\n  .message {\n    padding: 0.5rem 0.5rem;\n  }\n}\n</style>\n"],"names":["BASE_URL","ICON_MAPPING","dataFilter","DataFilterExtension","Component","viewId","eventLayers","network","linkIdLookup","timeFilter","dark","colors","breakpoints","radius","mapIsIndependent","simulationTime","projection","viewState","setViewState","useState","globalStore","REACT_VIEW_HANDLES","handleViewState","view","getTooltip","element","pointLayers","layer","layerIndex","outOfRange","ScatterplotLayer","vehicleLayers","MovingIconsLayer","allLayers","showBackgroundMap","React","DeckGL","e","StaticMap","MAPBOX_TOKEN","i18n","MyComponent","defineComponent","CollapsiblePanel","DrawingTool","EventMap","LegendBox","TimeSlider","ZoomButtons","colorRamps","HTTPFileSystem","svnProject","a","timeValues","deckmap","logo","right","GUI","text","YAML","filename","Status","hasYaml","configuration","key","t","buffer","base64","util","totalRows","MATSimEventStreamer","formatter","event","message","events","linkEvents","row","positions","i","offset","numTrips","tripData","trip","coordinates","rows","longitude","latitude","data","EXPONENT","colors256","colormap","c","step","max2","raw","breakpoint","LegendStore","rgb","index","label","networkFilename","link","dataArray","span","h","m","s","hms","DashboardDataManager"],"mappings":"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"}