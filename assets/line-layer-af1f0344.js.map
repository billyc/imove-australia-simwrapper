{"version":3,"file":"line-layer-af1f0344.js","sources":["../../node_modules/@deck.gl/layers/dist/esm/line-layer/line-layer-vertex.glsl.js","../../node_modules/@deck.gl/layers/dist/esm/line-layer/line-layer-fragment.glsl.js","../../node_modules/@deck.gl/layers/dist/esm/line-layer/line-layer.js"],"sourcesContent":["export default \"#define SHADER_NAME line-layer-vertex-shader\\n\\nattribute vec3 positions;\\nattribute vec3 instanceSourcePositions;\\nattribute vec3 instanceTargetPositions;\\nattribute vec3 instanceSourcePositions64Low;\\nattribute vec3 instanceTargetPositions64Low;\\nattribute vec4 instanceColors;\\nattribute vec3 instancePickingColors;\\nattribute float instanceWidths;\\n\\nuniform float opacity;\\nuniform float widthScale;\\nuniform float widthMinPixels;\\nuniform float widthMaxPixels;\\nuniform float useShortestPath;\\nuniform int widthUnits;\\n\\nvarying vec4 vColor;\\nvarying vec2 uv;\\n\\n// offset vector by strokeWidth pixels\\n// offset_direction is -1 (left) or 1 (right)\\nvec2 getExtrusionOffset(vec2 line_clipspace, float offset_direction, float width) {\\n  // normalized direction of the line\\n  vec2 dir_screenspace = normalize(line_clipspace * project_uViewportSize);\\n  // rotate by 90 degrees\\n  dir_screenspace = vec2(-dir_screenspace.y, dir_screenspace.x);\\n\\n  return dir_screenspace * offset_direction * width / 2.0;\\n}\\n\\nvec3 splitLine(vec3 a, vec3 b, float x) {\\n  float t = (x - a.x) / (b.x - a.x);\\n  return vec3(x, mix(a.yz, b.yz, t));\\n}\\n\\nvoid main(void) {\\n  geometry.worldPosition = instanceSourcePositions;\\n  geometry.worldPositionAlt = instanceTargetPositions;\\n\\n  vec3 source_world = instanceSourcePositions;\\n  vec3 target_world = instanceTargetPositions;\\n  vec3 source_world_64low = instanceSourcePositions64Low;\\n  vec3 target_world_64low = instanceTargetPositions64Low;\\n\\n  if (useShortestPath > 0.5 || useShortestPath < -0.5) {\\n    source_world.x = mod(source_world.x + 180., 360.0) - 180.;\\n    target_world.x = mod(target_world.x + 180., 360.0) - 180.;\\n    float deltaLng = target_world.x - source_world.x;\\n\\n    if (deltaLng * useShortestPath > 180.) {\\n      source_world.x += 360. * useShortestPath;\\n      source_world = splitLine(source_world, target_world, 180. * useShortestPath);\\n      source_world_64low = vec3(0.0);\\n    } else if (deltaLng * useShortestPath < -180.) {\\n      target_world.x += 360. * useShortestPath;\\n      target_world = splitLine(source_world, target_world, 180. * useShortestPath);\\n      target_world_64low = vec3(0.0);\\n    } else if (useShortestPath < 0.) {\\n      // Line is not split, abort\\n      gl_Position = vec4(0.);\\n      return;\\n    }\\n  }\\n\\n  // Position\\n  vec4 source_commonspace;\\n  vec4 target_commonspace;\\n  vec4 source = project_position_to_clipspace(source_world, source_world_64low, vec3(0.), source_commonspace);\\n  vec4 target = project_position_to_clipspace(target_world, target_world_64low, vec3(0.), target_commonspace);\\n  \\n  // linear interpolation of source & target to pick right coord\\n  float segmentIndex = positions.x;\\n  vec4 p = mix(source, target, segmentIndex);\\n  geometry.position = mix(source_commonspace, target_commonspace, segmentIndex);\\n  uv = positions.xy;\\n  geometry.uv = uv;\\n  geometry.pickingColor = instancePickingColors;\\n\\n  // Multiply out width and clamp to limits\\n  float widthPixels = clamp(\\n    project_size_to_pixel(instanceWidths * widthScale, widthUnits),\\n    widthMinPixels, widthMaxPixels\\n  );\\n\\n  // extrude\\n  vec3 offset = vec3(\\n    getExtrusionOffset(target.xy - source.xy, positions.y, widthPixels),\\n    0.0);\\n  DECKGL_FILTER_SIZE(offset, geometry);\\n  gl_Position = p + vec4(project_pixel_size_to_clipspace(offset.xy), 0.0, 0.0);\\n  DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\\n\\n  // Color\\n  vColor = vec4(instanceColors.rgb, instanceColors.a * opacity);\\n  DECKGL_FILTER_COLOR(vColor, geometry);\\n}\\n\";\n//# sourceMappingURL=line-layer-vertex.glsl.js.map","export default \"#define SHADER_NAME line-layer-fragment-shader\\n\\nprecision highp float;\\n\\nvarying vec4 vColor;\\nvarying vec2 uv;\\n\\nvoid main(void) {\\n  geometry.uv = uv;\\n\\n  gl_FragColor = vColor;\\n\\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\\n}\\n\";\n//# sourceMappingURL=line-layer-fragment.glsl.js.map","import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Layer, project32, picking, UNIT } from '@deck.gl/core';\nimport { Model, Geometry } from '@luma.gl/core';\nimport vs from './line-layer-vertex.glsl';\nimport fs from './line-layer-fragment.glsl';\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst defaultProps = {\n  getSourcePosition: {\n    type: 'accessor',\n    value: x => x.sourcePosition\n  },\n  getTargetPosition: {\n    type: 'accessor',\n    value: x => x.targetPosition\n  },\n  getColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getWidth: {\n    type: 'accessor',\n    value: 1\n  },\n  widthUnits: 'pixels',\n  widthScale: {\n    type: 'number',\n    value: 1,\n    min: 0\n  },\n  widthMinPixels: {\n    type: 'number',\n    value: 0,\n    min: 0\n  },\n  widthMaxPixels: {\n    type: 'number',\n    value: Number.MAX_SAFE_INTEGER,\n    min: 0\n  }\n};\nexport default class LineLayer extends Layer {\n  getShaders() {\n    return super.getShaders({\n      vs,\n      fs,\n      modules: [project32, picking]\n    });\n  }\n\n  get wrapLongitude() {\n    return false;\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    attributeManager.addInstanced({\n      instanceSourcePositions: {\n        size: 3,\n        type: 5130,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getSourcePosition'\n      },\n      instanceTargetPositions: {\n        size: 3,\n        type: 5130,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getTargetPosition'\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: 5121,\n        normalized: true,\n        transition: true,\n        accessor: 'getColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getWidth',\n        defaultValue: 1\n      }\n    });\n  }\n\n  updateState(params) {\n    super.updateState(params);\n\n    if (params.changeFlags.extensionsChanged) {\n      var _this$state$model;\n\n      const {\n        gl\n      } = this.context;\n      (_this$state$model = this.state.model) === null || _this$state$model === void 0 ? void 0 : _this$state$model.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager().invalidateAll();\n    }\n  }\n\n  draw({\n    uniforms\n  }) {\n    const {\n      widthUnits,\n      widthScale,\n      widthMinPixels,\n      widthMaxPixels,\n      wrapLongitude\n    } = this.props;\n    this.state.model.setUniforms(uniforms).setUniforms({\n      widthUnits: UNIT[widthUnits],\n      widthScale,\n      widthMinPixels,\n      widthMaxPixels,\n      useShortestPath: wrapLongitude ? 1 : 0\n    }).draw();\n\n    if (wrapLongitude) {\n      this.state.model.setUniforms({\n        useShortestPath: -1\n      }).draw();\n    }\n  }\n\n  _getModel(gl) {\n    const positions = [0, -1, 0, 0, 1, 0, 1, -1, 0, 1, 1, 0];\n    return new Model(gl, { ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: 5,\n        attributes: {\n          positions: new Float32Array(positions)\n        }\n      }),\n      isInstanced: true\n    });\n  }\n\n}\n\n_defineProperty(LineLayer, \"layerName\", 'LineLayer');\n\n_defineProperty(LineLayer, \"defaultProps\", defaultProps);\n//# sourceMappingURL=line-layer.js.map"],"names":["vs","fs","DEFAULT_COLOR","defaultProps","x","LineLayer","Layer","project32","picking","params","_this$state$model","gl","uniforms","widthUnits","widthScale","widthMinPixels","widthMaxPixels","wrapLongitude","UNIT","positions","Model","Geometry","_defineProperty"],"mappings":"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","x_google_ignoreList":[0,1,2]}