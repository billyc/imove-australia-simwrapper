{"version":3,"file":"pie-78d536b1.js","sources":["../../src/dash-panels/pie.vue"],"sourcesContent":["<template lang=\"pug\">\nVuePlotly.myplot(v-if=\"data[0].values.length\"\n  :data=\"data\"\n  :layout=\"layout\"\n  :options=\"options\"\n  :id=\"id\"\n)\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\nimport type { PropType } from 'vue'\n\nimport DashboardDataManager, { FilterDefinition } from '@/js/DashboardDataManager'\nimport VuePlotly from '@/components/VuePlotly.vue'\nimport { FileSystemConfig, Status, BG_COLOR_DASHBOARD, UI_FONT } from '@/Globals'\nimport globalStore from '@/store'\nimport { buildCleanTitle } from './_allPanels'\n\nexport default defineComponent({\n  name: 'PieChartPanel',\n  components: { VuePlotly },\n  props: {\n    fileSystemConfig: { type: Object as PropType<FileSystemConfig>, required: true },\n    subfolder: { type: String, required: true },\n    files: { type: Array, required: true },\n    config: { type: Object as any, required: true },\n    cardTitle: { type: String, required: true },\n    cardId: String,\n    datamanager: { type: Object as PropType<DashboardDataManager>, required: true },\n  },\n  data: () => {\n    return {\n      globalState: globalStore.state,\n      id: ('pie-' + Math.floor(1e12 * Math.random())) as any,\n      // dataSet is either x,y or allRows[]\n      dataSet: {} as { x?: any[]; y?: any[]; allRows?: any },\n      YAMLrequirementsPie: { dataset: '', useLastRow: '' },\n      layout: {\n        height: 300,\n        margin: { t: 4, b: 4, l: 0, r: 0, pad: 2 },\n        font: {\n          color: '#444444',\n          family: UI_FONT,\n        },\n        xaxis: {\n          automargin: true,\n          autorange: true,\n          title: { text: '', standoff: 12 },\n          animate: true,\n        },\n        yaxis: {\n          automargin: true,\n          autorange: true,\n          title: { text: '', standoff: 16 },\n          animate: true,\n        },\n        legend: {\n          // yanchor: 'top',\n          // xanchor: 'center',\n          orientation: 'v',\n          x: 1,\n          y: 1,\n        },\n      },\n\n      data: [\n        {\n          sort: false, // to keep colors consistent across plots\n          labels: [] as any[],\n          values: [] as any[],\n          type: 'pie',\n          hole: 0,\n          textinfo: 'label+percent',\n          textposition: 'inside',\n          automargin: true,\n        },\n      ],\n      options: {\n        displaylogo: false,\n        responsive: true,\n        modeBarButtonsToRemove: [\n          'pan2d',\n          'zoom2d',\n          'select2d',\n          'lasso2d',\n          'zoomIn2d',\n          'zoomOut2d',\n          'autoScale2d',\n          'hoverClosestCartesian',\n          'hoverCompareCartesian',\n          'resetScale2d',\n          'toggleSpikelines',\n          'resetViewMapbox',\n        ],\n        toImageButtonOptions: {\n          format: 'png', // one of png, svg, jpeg, webp\n          filename: 'pie-chart',\n          width: null,\n          height: null,\n        },\n      },\n    }\n  },\n  async mounted() {\n    this.updateTheme()\n\n    this.options.toImageButtonOptions.filename = buildCleanTitle(this.cardTitle, this.subfolder)\n\n    this.dataSet = await this.loadData()\n    this.updateChart()\n\n    this.$emit('dimension-resizer', { id: this.cardId, resizer: this.changeDimensions })\n    this.$emit('isLoaded')\n  },\n  beforeDestroy() {\n    this.datamanager?.removeFilterListener(this.config, this.handleFilterChanged)\n  },\n\n  watch: {\n    'globalState.isDarkMode'() {\n      this.updateTheme()\n    },\n  },\n  methods: {\n    changeDimensions(dimensions: { width: number; height: number }) {\n      this.layout = Object.assign({}, this.layout, dimensions)\n    },\n\n    handleFilterChanged() {\n      if (!this.datamanager) return\n\n      const { filteredRows } = this.datamanager.getFilteredDataset(this.config) as any\n\n      if (!filteredRows || !filteredRows.length) {\n        this.dataSet = { allRows: {} }\n      } else {\n        const allRows = {} as any\n\n        const keys = Object.keys(filteredRows[0])\n        keys.forEach(key => (allRows[key] = { name: key, values: [] as any }))\n\n        filteredRows.forEach((row: any) => {\n          keys.forEach(key => allRows[key].values.push(row[key]))\n        })\n        this.dataSet = { allRows }\n      }\n\n      this.updateChart()\n    },\n\n    updateTheme() {\n      const colors = {\n        paper_bgcolor: BG_COLOR_DASHBOARD[this.globalState.colorScheme],\n        plot_bgcolor: BG_COLOR_DASHBOARD[this.globalState.colorScheme],\n        font: { color: this.globalState.isDarkMode ? '#cccccc' : '#444444' },\n      }\n      this.layout = Object.assign({}, this.layout, colors)\n    },\n\n    async loadData() {\n      try {\n        this.validateYAML()\n        let dataset = await this.datamanager.getDataset(this.config)\n\n        // no filter? we are done\n        if (!this.config.filters) return dataset\n\n        // filter data before returning:\n        this.datamanager.addFilterListener(this.config, this.handleFilterChanged)\n\n        for (const [column, value] of Object.entries(this.config.filters)) {\n          const filter: FilterDefinition = {\n            dataset: this.config.dataset,\n            column: column,\n            value: value,\n            range: Array.isArray(value),\n          }\n          this.datamanager.setFilter(filter)\n        }\n        // empty for now; filtered data will come back later via handleFilterChanged async.\n        return { allRows: {} }\n      } catch (e) {\n        console.error('' + e)\n      }\n      return { allRows: {} }\n    },\n\n    validateYAML() {\n      for (const key in this.YAMLrequirementsPie) {\n        if (key in this.config === false) {\n          this.$emit('error', {\n            type: Status.ERROR,\n            msg: `Pie chart missing required key: ${key}`,\n            desc: `Required keys: ${Object.keys(this.YAMLrequirementsPie)}`,\n          })\n        }\n      }\n    },\n\n    updateChart() {\n      try {\n        if (this.config.groupBy) this.updateChartWithGroupBy()\n        else this.updateChartSimple()\n      } catch (e) {\n        const msg = '' + e\n        this.$emit('error', {\n          type: Status.ERROR,\n          msg,\n          desc: 'Add a desription...',\n        })\n      }\n    },\n\n    updateChartWithGroupBy() {\n      // tba\n    },\n\n    updateChartSimple() {\n      const allRows = this.dataSet.allRows || {}\n\n      this.data[0].labels = Object.keys(allRows)\n      this.data[0].values = Object.values(allRows)\n    },\n  },\n})\n</script>\n\n<style scoped lang=\"scss\">\n@import '@/styles.scss';\n\n.myplot {\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n}\n\n@media only screen and (max-width: 640px) {\n}\n</style>\n"],"names":["_sfc_main","defineComponent","VuePlotly","globalStore","UI_FONT","buildCleanTitle","_a","dimensions","filteredRows","allRows","keys","key","row","colors","BG_COLOR_DASHBOARD","dataset","column","value","filter","e","Status","msg"],"mappings":"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"}