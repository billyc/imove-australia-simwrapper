{"version":3,"file":"XmlViewer-3b06bc33.js","sources":["../../src/plugins/xml-viewer/TreeItem.vue","../../src/plugins/xml-viewer/TreeView.vue","../../src/plugins/xml-viewer/XmlViewer.vue"],"sourcesContent":["<template lang=\"pug\">\nli\n  .leaf-node(@click=\"toggle\")\n    .leaf-nav-title\n      .toggle(v-if=\"children.length\")\n        i.fa(\n          :class=\"{'fa-plus-square': !isOpen, 'fa-minus-square': isOpen}\"\n          style=\"font-size: 0.7rem; margin: 5px 0 auto -8px;\"\n        )\n      b.leaf-label {{ elementId }}\n\n    .leaf-text(v-if=\"text\") &nbsp;&nbsp;{{ text }}\n\n    .leaf-attribute(v-for=\"attribute in attributes\")\n      span &nbsp;&nbsp;{{ attribute[0] }}:&nbsp;\n      b \"{{ attribute[1] }}\"\n\n  ul.children(v-if=\"isFolder && isOpen\")\n    tree-item.item(\n      v-for=\"(child, index) in children\"\n      :key=\"index\"\n      :item=\"child\"\n      :root=\"false\"\n      :expandAll=\"expandAll\"\n      :numberOfUnfoldLevel=\"numberOfUnfoldLevel\"\n      :level=\"level + 1\"\n      @navigate=\"$emit('navigate', $event)\"\n    )\n\n</template>\n\n<script lang=\"ts\">\nimport Vue from 'vue'\n\nexport default Vue.component('tree-item', {\n  props: {\n    item: { type: Object, required: true },\n    expandAll: { type: Boolean },\n    level: { type: Number },\n    numberOfUnfoldLevel: { type: Number },\n  },\n  data() {\n    return {\n      isOpen: this.expandAll, // this.item.level < 2, // default to all-open\n      text: '',\n      elementId: '',\n      children: [] as any[],\n      attributes: [] as any[],\n    }\n  },\n  mounted() {\n    const thing = { ...this.item } as any // could be anything really!\n    this.attributes = this.getAttributes(thing)\n    delete thing[':@']\n\n    const keys = Object.keys(thing)\n    if (keys.length !== 1) {\n      console.log('WHAT', keys)\n    }\n\n    this.elementId = keys[0]\n    this.children = thing[keys[0]] || []\n\n    // figure out #text content\n    if (this.children.length === 1 && this.children[0]['#text']) {\n      this.text = this.children[0]['#text']\n      this.children = []\n    }\n\n    if (this.level < this.numberOfUnfoldLevel + 1) {\n      this.isOpen = true\n    } else {\n      this.isOpen = this.expandAll\n    }\n  },\n\n  methods: {\n    getAttributes(thing: any) {\n      // XML parser returns attributes in a ':@' object\n      const attr = thing[':@'] as any\n      if (!attr) return []\n\n      return Object.entries(attr).map(entry => {\n        const [k, v] = entry\n        const key = k.startsWith('$$') ? k.substring(2) : k\n        return [key, v]\n      })\n    },\n\n    toggle() {\n      this.isOpen = !this.isOpen\n    },\n  },\n\n  computed: {\n    isFolder(): boolean {\n      return this.children.length > 0\n    },\n  },\n})\n</script>\n\n<style scoped lang=\"scss\">\n@import '@/styles.scss';\n\nul {\n  list-style: none outside none;\n  margin-bottom: 0px;\n}\n\nli {\n  padding-left: 12px;\n  line-height: 1.2rem;\n}\n\n.item {\n  cursor: pointer;\n}\n\n.leaf-node {\n  display: flex;\n  // flex-direction: row;\n  flex-wrap: wrap;\n}\n\n.leaf-label:hover {\n  background-color: var(--bgHover);\n}\n\n.leaf-nav-title {\n  display: flex;\n  margin-right: 0px;\n}\n\n.leaf-text {\n  font-weight: bold;\n  font-style: italic;\n  color: var(--linkHover);\n}\n\n.leaf-label {\n  color: var(--link);\n  margin-left: 0.2rem;\n}\n\n.toggle {\n  margin-top: -1px;\n  color: var(--textPale);\n}\n\n.toggle:hover {\n  color: var(--textVeryPale);\n}\n</style>\n","<template lang=\"pug\">\nul\n  tree-item.item(\n    :item=\"treeData || {}\"\n    :expandAll=\"expandAll\"\n    :level=\"level + 1\"\n    :numberOfUnfoldLevel=\"numberOfUnfoldLevel\"\n  )\n\n</template>\n\n<script lang=\"ts\">\nimport Vue from 'vue'\nimport TreeItem from './TreeItem.vue'\nimport { faLevelDown } from '@fortawesome/free-solid-svg-icons'\n\nexport default Vue.component('tree-view', {\n  props: {\n    initialData: {},\n    expandAll: { type: Boolean },\n    level: { type: Number },\n    numberOfUnfoldLevel: { type: Number },\n  },\n  components: {\n    TreeItem,\n  },\n  data: function () {\n    return {\n      treeData: this.initialData,\n    }\n  },\n  methods: {},\n})\n</script>\n\n<style scoped></style>\n","<template lang=\"pug\">\n.mycomponent(:class=\"{'is-thumbnail': thumbnail}\")\n  b-input.xml-searchbox(\n    type=\"search\"\n    icon-pack=\"fas\"\n    icon=\"search\"\n    placeholder=\"search...\"\n    v-model=\"searchTerm\"\n  )\n  .viewer\n    tree-view.things(v-if=\"isLoaded\"\n      :initialData=\"viewXml\"\n      :expandAll=\"isSearch\"\n      :level=\"1\"\n      :numberOfUnfoldLevel=\"numberOfUnfoldLevel\"\n    )\n\n</template>\n\n<script lang=\"ts\">\nconst i18n = {\n  messages: {\n    en: {},\n    de: {},\n  },\n}\n\nimport { defineComponent } from 'vue'\nimport type { PropType } from 'vue'\nimport debounce from 'debounce'\n\nimport globalStore from '@/store'\nimport HTTPFileSystem from '@/js/HTTPFileSystem'\nimport TreeView from './TreeView.vue'\nimport XmlWorker from '@/workers/NewXmlFetcher.worker?worker'\n\nimport { FileSystemConfig, UI_FONT, BG_COLOR_DASHBOARD } from '@/Globals'\n\n//@ts-ignore\nconst isChrome = !!window.showDirectoryPicker // Chrome has File Access API\nconst isFirefox = !isChrome\n\nconst MyComponent = defineComponent({\n  name: 'XmlViewer',\n  components: { TreeView },\n  i18n,\n  props: {\n    root: { type: String, required: true },\n    subfolder: { type: String, required: true },\n    config: { type: Object as any },\n    resize: Object as any,\n    thumbnail: Boolean,\n    yamlConfig: String,\n  },\n\n  data() {\n    return {\n      globalState: globalStore.state,\n      vizDetails: { title: '', description: '', file: '' },\n      loadingText: '',\n      id: `id-${Math.floor(1e12 * Math.random())}` as any,\n      xmlWorker: null as any,\n      viewXml: {} as any,\n      fullXml: null as any,\n      searchXml: null as any,\n      searchTerm: '',\n      debounceSearch: {} as any,\n      isLoaded: false,\n      isSearch: false,\n      numberOfUnfoldLevel: 1,\n    }\n  },\n\n  watch: {\n    searchTerm() {\n      this.debounceSearch()\n    },\n  },\n\n  computed: {\n    fileApi(): HTTPFileSystem {\n      return new HTTPFileSystem(this.fileSystem, globalStore)\n    },\n\n    fileSystem(): FileSystemConfig {\n      const svnProject: FileSystemConfig[] = this.$store.state.svnProjects.filter(\n        (a: FileSystemConfig) => a.slug === this.root\n      )\n      if (svnProject.length === 0) {\n        console.log('no such project')\n        throw Error\n      }\n      return svnProject[0]\n    },\n  },\n\n  async mounted() {\n    this.debounceSearch = debounce(this.handleSearch, 500)\n\n    try {\n      await this.getVizDetails()\n      // only continue if we are on a real page and not the file browser\n      if (this.thumbnail) return\n\n      const answer = await this.fetchXml()\n\n      //TODO remove '?xml' correctly\n      this.fullXml = answer[1]\n\n      this.viewXml = this.fullXml\n\n      // this.viewXml = this.recursiveDelete(this.viewXml)\n\n      this.isLoaded = true\n    } catch (err) {\n      const e = err as any\n      console.error({ e })\n      this.loadingText = '' + e\n    }\n\n    this.numberOfUnfoldLevel = this.config.unfoldLevel + 1\n  },\n\n  methods: {\n    async getVizDetails() {\n      if (this.config) {\n        // config came in from the dashboard and is already parsed\n        this.vizDetails = { ...this.config }\n        this.vizDetails.file = `/${this.subfolder}/${this.config.file}`\n        this.$emit('title', this.vizDetails.title || this.vizDetails.file || 'XML')\n      } else {\n        // Otherwise this is an XML file\n        const filename = this.yamlConfig ?? ''\n        this.vizDetails = {\n          title: filename,\n          description: '',\n          file: this.subfolder + '/' + filename,\n        }\n      }\n      if (!this.vizDetails.title) this.vizDetails.title = 'XML'\n      this.$emit('title', this.vizDetails.title)\n    },\n\n    async fetchXml() {\n      this.loadingText = `Loading ${this.vizDetails.file}...`\n\n      if (this.xmlWorker) this.xmlWorker.terminate()\n      this.xmlWorker = new XmlWorker()\n\n      return new Promise<any>((resolve, reject) => {\n        this.xmlWorker.onmessage = (message: MessageEvent) => {\n          this.xmlWorker.terminate()\n\n          if (message.data.error) reject(message.data.error)\n          resolve(message.data.xml)\n        }\n\n        this.xmlWorker.postMessage({\n          id: 1,\n          fileSystem: this.fileSystem,\n          filePath: this.vizDetails.file,\n          options: {\n            ignoreAttributes: false,\n            preserveOrder: true,\n            attributeNamePrefix: '$$',\n            isFirefox,\n          },\n        })\n      })\n    },\n\n    async handleSearch() {\n      console.log('search:', this.searchTerm)\n\n      if (!this.searchTerm) {\n        // clear empty search\n        this.viewXml = this.fullXml\n        this.isSearch = false\n      } else {\n        const searchXML = this.findSearchTermInElement(\n          [this.fullXml],\n          this.searchTerm.toLocaleLowerCase()\n        )\n        this.viewXml = searchXML[0]\n        this.isSearch = true\n      }\n      this.isLoaded = false\n      await this.$nextTick()\n      this.isLoaded = true\n    },\n\n    findSearchTermInElement(element: any[], term: string): any[] {\n      if (term !== this.searchTerm.toLocaleLowerCase()) return []\n\n      const found = [] as any[]\n      for (const node of element) {\n        const items = { ...node }\n        // check attributes\n        if (items[':@']) {\n          const attributes = JSON.stringify(items[':@']).toLocaleLowerCase()\n          if (attributes.indexOf(term) > -1) {\n            found.push(node)\n            continue\n          }\n        }\n\n        // check #text\n        if (items['#text']) {\n          // convert to string!\n          if (`${items['#text']}`.toLocaleLowerCase().indexOf(term) > -1) {\n            found.push(node)\n          }\n          continue\n        }\n\n        // check children\n        const attr = items[':@']\n        delete items[':@']\n        const key = Object.keys(items)[0]\n        const children = items[key]\n        if (!children.length) continue\n\n        // recurse into kids:\n        const foundInChildren = this.findSearchTermInElement(children, term)\n        if (foundInChildren.length) {\n          const leaf = {} as any\n          if (attr) leaf[':@'] = attr\n          leaf[key] = foundInChildren\n          found.push(leaf)\n        }\n      }\n      return found\n    },\n\n    // recursiveDelete(array: any[]) {\n    //   for (const [k, v] of Object.entries(array)) {\n    //     let data = v as any[]\n    //     if (data.length < 50) {\n    //     } else {\n    //       for (let i = 49; i < data.length; i++) {\n    //         data.splice(50, 1)\n    //       }\n    //     }\n    //     for (let i = 0; i < 50; i++) {\n    //       array = this.recursiveDelete(data)\n    //     }\n    //   }\n    //   return array\n    // },\n  },\n})\n\nexport default MyComponent\n</script>\n\n<style scoped lang=\"scss\">\n@import '@/styles.scss';\n\n.mycomponent {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n}\n\n.mycomponent.is-thumbnail {\n  padding-top: 0;\n  height: $thumbnailHeight;\n}\n\n.viewer {\n  height: 100%;\n  width: 100%;\n  flex: 1;\n  margin: 0 auto;\n  overflow: auto;\n}\n\n.viewer.is-thumbnail {\n  padding: 0rem 0rem;\n  margin: 0 0;\n}\n\n.things {\n  width: 100%;\n  padding: 0.25rem 0;\n}\n</style>\n\n<style lang=\"scss\">\n.xml-searchbox input {\n  background-color: var(--bgBold);\n  border: 1px solid var(--bgCream3);\n  color: var(--text);\n}\n</style>\n"],"names":["_sfc_main$1","Vue","thing","keys","attr","entry","k","v","_sfc_main","TreeItem","i18n","isChrome","isFirefox","MyComponent","defineComponent","TreeView","globalStore","HTTPFileSystem","svnProject","a","debounce","answer","err","filename","XmlWorker","resolve","reject","message","searchXML","element","term","found","node","items","key","children","foundInChildren","leaf"],"mappings":"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"}