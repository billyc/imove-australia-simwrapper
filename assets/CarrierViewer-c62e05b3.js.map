{"version":3,"file":"CarrierViewer-c62e05b3.js","sources":["../../node_modules/javascript-natural-sort/naturalSort.js","../../node_modules/@deck.gl/extensions/dist/esm/path-style/shaders.glsl.js","../../node_modules/@deck.gl/extensions/dist/esm/path-style/path-style.js","../../src/components/LegendColors.tsx","../../src/plugins/carrier-viewer/TourViz.tsx","../../src/plugins/carrier-viewer/CarrierViewer.vue"],"sourcesContent":["/*\r\n * Natural Sort algorithm for Javascript - Version 0.7 - Released under MIT license\r\n * Author: Jim Palmer (based on chunking idea from Dave Koelle)\r\n */\r\n/*jshint unused:false */\r\nmodule.exports = function naturalSort (a, b) {\r\n\t\"use strict\";\r\n\tvar re = /(^([+\\-]?(?:0|[1-9]\\d*)(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)?$|^0x[0-9a-f]+$|\\d+)/gi,\r\n\t\tsre = /(^[ ]*|[ ]*$)/g,\r\n\t\tdre = /(^([\\w ]+,?[\\w ]+)?[\\w ]+,?[\\w ]+\\d+:\\d+(:\\d+)?[\\w ]?|^\\d{1,4}[\\/\\-]\\d{1,4}[\\/\\-]\\d{1,4}|^\\w+, \\w+ \\d+, \\d{4})/,\r\n\t\thre = /^0x[0-9a-f]+$/i,\r\n\t\tore = /^0/,\r\n\t\ti = function(s) { return naturalSort.insensitive && ('' + s).toLowerCase() || '' + s; },\r\n\t\t// convert all to strings strip whitespace\r\n\t\tx = i(a).replace(sre, '') || '',\r\n\t\ty = i(b).replace(sre, '') || '',\r\n\t\t// chunk/tokenize\r\n\t\txN = x.replace(re, '\\0$1\\0').replace(/\\0$/,'').replace(/^\\0/,'').split('\\0'),\r\n\t\tyN = y.replace(re, '\\0$1\\0').replace(/\\0$/,'').replace(/^\\0/,'').split('\\0'),\r\n\t\t// numeric, hex or date detection\r\n\t\txD = parseInt(x.match(hre), 16) || (xN.length !== 1 && x.match(dre) && Date.parse(x)),\r\n\t\tyD = parseInt(y.match(hre), 16) || xD && y.match(dre) && Date.parse(y) || null,\r\n\t\toFxNcL, oFyNcL;\r\n\t// first try and sort Hex codes or Dates\r\n\tif (yD) {\r\n\t\tif ( xD < yD ) { return -1; }\r\n\t\telse if ( xD > yD ) { return 1; }\r\n\t}\r\n\t// natural sorting through split numeric strings and default strings\r\n\tfor(var cLoc=0, numS=Math.max(xN.length, yN.length); cLoc < numS; cLoc++) {\r\n\t\t// find floats not starting with '0', string or 0 if not defined (Clint Priest)\r\n\t\toFxNcL = !(xN[cLoc] || '').match(ore) && parseFloat(xN[cLoc]) || xN[cLoc] || 0;\r\n\t\toFyNcL = !(yN[cLoc] || '').match(ore) && parseFloat(yN[cLoc]) || yN[cLoc] || 0;\r\n\t\t// handle numeric vs string comparison - number < string - (Kyle Adams)\r\n\t\tif (isNaN(oFxNcL) !== isNaN(oFyNcL)) { return (isNaN(oFxNcL)) ? 1 : -1; }\r\n\t\t// rely on string comparison if different types - i.e. '02' < 2 != '02' < '2'\r\n\t\telse if (typeof oFxNcL !== typeof oFyNcL) {\r\n\t\t\toFxNcL += '';\r\n\t\t\toFyNcL += '';\r\n\t\t}\r\n\t\tif (oFxNcL < oFyNcL) { return -1; }\r\n\t\tif (oFxNcL > oFyNcL) { return 1; }\r\n\t}\r\n\treturn 0;\r\n};\r\n","export const dashShaders = {\n  inject: {\n    'vs:#decl': \"\\nattribute vec2 instanceDashArrays;\\nattribute float instanceDashOffsets;\\nvarying vec2 vDashArray;\\nvarying float vDashOffset;\\n\",\n    'vs:#main-end': \"\\nvDashArray = instanceDashArrays;\\nvDashOffset = instanceDashOffsets / width.x;\\n\",\n    'fs:#decl': \"\\nuniform float dashAlignMode;\\nuniform float capType;\\nuniform bool dashGapPickable;\\nvarying vec2 vDashArray;\\nvarying float vDashOffset;\\n\\nfloat round(float x) {\\n  return floor(x + 0.5);\\n}\\n\",\n    'fs:#main-start': \"\\n  float solidLength = vDashArray.x;\\n  float gapLength = vDashArray.y;\\n  float unitLength = solidLength + gapLength;\\n\\n  float offset;\\n\\n  if (unitLength > 0.0) {\\n    if (dashAlignMode == 0.0) {\\n      offset = vDashOffset;\\n    } else {\\n      unitLength = vPathLength / round(vPathLength / unitLength);\\n      offset = solidLength / 2.0;\\n    }\\n\\n    float unitOffset = mod(clamp(vPathPosition.y, 0.0, vPathLength) + offset, unitLength);\\n\\n    if (gapLength > 0.0 && unitOffset > solidLength) {\\n      if (capType <= 0.5) {\\n        if (!(dashGapPickable && picking_uActive)) {\\n          discard;\\n        }\\n      } else {\\n        // caps are rounded, test the distance to solid ends\\n        float distToEnd = length(vec2(\\n          min(unitOffset - solidLength, unitLength - unitOffset),\\n          vPathPosition.x\\n        ));\\n        if (distToEnd > 1.0) {\\n          if (!(dashGapPickable && picking_uActive)) {\\n            discard;\\n          }\\n        }\\n      }\\n    }\\n  }\\n\"\n  }\n};\nexport const offsetShaders = {\n  inject: {\n    'vs:#decl': \"\\nattribute float instanceOffsets;\\n\",\n    'vs:DECKGL_FILTER_SIZE': \"\\n  float offsetWidth = abs(instanceOffsets * 2.0) + 1.0;\\n  size *= offsetWidth;\\n\",\n    'vCornerOffset = offsetVec;': \"\\n  float offsetWidth = abs(instanceOffsets * 2.0) + 1.0;\\n  vec2 offsetCenter = -instanceOffsets * (isCap ? perp : miterVec * miterSize) * 2.0;\\n  vCornerOffset = vCornerOffset * offsetWidth - offsetCenter;\\n\",\n    'fs:#main-start': \"\\n  float isInside;\\n  isInside = step(-1.0, vPathPosition.x) * step(vPathPosition.x, 1.0);\\n  if (isInside == 0.0) {\\n    discard;\\n  }\\n\"\n  }\n};\n//# sourceMappingURL=shaders.glsl.js.map","import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { LayerExtension, _mergeShaders as mergeShaders } from '@deck.gl/core';\nimport { dashShaders, offsetShaders } from './shaders.glsl';\nimport { dist } from 'gl-matrix/vec3';\nconst defaultProps = {\n  getDashArray: {\n    type: 'accessor',\n    value: [0, 0]\n  },\n  getOffset: {\n    type: 'accessor',\n    value: 0\n  },\n  dashJustified: false,\n  dashGapPickable: false\n};\nexport default class PathStyleExtension extends LayerExtension {\n  constructor({\n    dash = false,\n    offset = false,\n    highPrecisionDash = false\n  } = {}) {\n    super({\n      dash: dash || highPrecisionDash,\n      offset,\n      highPrecisionDash\n    });\n  }\n\n  isEnabled(layer) {\n    return 'pathTesselator' in layer.state;\n  }\n\n  getShaders(extension) {\n    if (!extension.isEnabled(this)) {\n      return null;\n    }\n\n    let result = {};\n\n    if (extension.opts.dash) {\n      result = mergeShaders(result, dashShaders);\n    }\n\n    if (extension.opts.offset) {\n      result = mergeShaders(result, offsetShaders);\n    }\n\n    return result;\n  }\n\n  initializeState(context, extension) {\n    const attributeManager = this.getAttributeManager();\n\n    if (!attributeManager || !extension.isEnabled(this)) {\n      return;\n    }\n\n    if (extension.opts.dash) {\n      attributeManager.addInstanced({\n        instanceDashArrays: {\n          size: 2,\n          accessor: 'getDashArray'\n        }\n      });\n    }\n\n    if (extension.opts.highPrecisionDash) {\n      attributeManager.addInstanced({\n        instanceDashOffsets: {\n          size: 1,\n          accessor: 'getPath',\n          transform: extension.getDashOffsets.bind(this)\n        }\n      });\n    }\n\n    if (extension.opts.offset) {\n      attributeManager.addInstanced({\n        instanceOffsets: {\n          size: 1,\n          accessor: 'getOffset'\n        }\n      });\n    }\n  }\n\n  updateState(params, extension) {\n    if (!extension.isEnabled(this)) {\n      return;\n    }\n\n    const uniforms = {};\n\n    if (extension.opts.dash) {\n      uniforms.dashAlignMode = this.props.dashJustified ? 1 : 0;\n      uniforms.dashGapPickable = Boolean(this.props.dashGapPickable);\n    }\n\n    this.state.model.setUniforms(uniforms);\n  }\n\n  getDashOffsets(path) {\n    const result = [0];\n    const positionSize = this.props.positionFormat === 'XY' ? 2 : 3;\n    const isNested = Array.isArray(path[0]);\n    const geometrySize = isNested ? path.length : path.length / positionSize;\n    let p;\n    let prevP;\n\n    for (let i = 0; i < geometrySize - 1; i++) {\n      p = isNested ? path[i] : path.slice(i * positionSize, i * positionSize + positionSize);\n      p = this.projectPosition(p);\n\n      if (i > 0) {\n        result[i] = result[i - 1] + dist(prevP, p);\n      }\n\n      prevP = p;\n    }\n\n    return result;\n  }\n\n}\n\n_defineProperty(PathStyleExtension, \"defaultProps\", defaultProps);\n\n_defineProperty(PathStyleExtension, \"extensionName\", 'PathStyleExtension');\n//# sourceMappingURL=path-style.js.map","import { LegendItem } from '@/Globals'\nimport React from 'react'\n\nexport default function Component(props: {\n  title: string\n  description?: string\n  values: number[]\n  items: LegendItem[]\n}) {\n  const listItems = props.items.map(item => (\n    <li key={item.value + item.value[0]}>\n      <div\n        style={{\n          width: '100%',\n          height: `${Math.max(1, 3.0 * (1 * item.value - 1) + 3)}px`,\n          backgroundColor: `rgb(${item.color})`,\n        }}\n      ></div>\n      {item.label && <div style={{ marginBottom: '0.5rem' }}>{item.label}</div>}\n    </li>\n  ))\n\n  return (\n    <div>\n      <h4\n        style={{\n          textAlign: 'left',\n          fontWeight: 'bold',\n          marginBottom: '0.5rem',\n          fontSize: '0.8rem',\n        }}\n      >\n        {props.title}\n      </h4>\n      <p>{props.description}</p>\n      <ul style={{ listStyle: 'none', padding: 0, margin: 0 }}>{listItems}</ul>\n    </div>\n  )\n}\n","import React, { useState, useMemo, useEffect } from 'react'\nimport { StaticMap } from 'react-map-gl'\nimport { AmbientLight, PointLight, LightingEffect } from '@deck.gl/core'\nimport DeckGL from '@deck.gl/react'\nimport { ArcLayer, ScatterplotLayer, IconLayer, PathLayer, TextLayer } from '@deck.gl/layers'\nimport PathOffsetLayer from '@/layers/PathOffsetLayer'\nimport { PathStyleExtension } from '@deck.gl/extensions'\n\nimport globalStore from '@/store'\nimport { MAPBOX_TOKEN, REACT_VIEW_HANDLES } from '@/Globals'\n\n// -------------------------------------------------------------\n// Tour viz has several layers, top to bottom:\n//\n// - shipments (arc layer, orig->destination)\n// - destination text on top of circles\n// - destination circles\n// - delivery legs (path layer, each leg is its own path)\n// - shipment link (dashed line on stopActivity link itself)\n\ninterface Shipment {\n  $id: string\n  fromX: number\n  fromY: number\n  toX: number\n  toY: number\n}\n\nconst ActivityColor = {\n  pickup: [0, 150, 255],\n  delivery: [240, 0, 60],\n  service: [255, 64, 255],\n}\n\nexport default function Component(props: {\n  activeTab: string\n  shipments: Shipment[]\n  legs: any[]\n  stopActivities: any[]\n  depots: { link: string; midpoint: number[]; coords: number[] }[]\n  colors: any\n  center: [number, number]\n  onClick: any\n  viewId: number\n  settings: any\n  dark: boolean\n  numSelectedTours: number\n  projection: string\n}) {\n  const [viewState, setViewState] = useState(globalStore.state.viewState)\n  const [hoverInfo, setHoverInfo] = useState({} as any)\n  const [pickupsAndDeliveries, setPickupsAndDeliveries] = useState({\n    type: 'activity',\n    pickups: [] as any[],\n    deliveries: [] as any[],\n  })\n\n  const {\n    dark,\n    activeTab,\n    numSelectedTours,\n    shipments,\n    depots,\n    legs,\n    settings,\n    stopActivities,\n    center,\n    onClick,\n    projection,\n  } = props\n\n  const { simplifyTours, scaleFactor, shipmentDotsOnTourMap } = settings\n\n  // range is (1/) 16384 - 0.000001\n  // slider is 0-100, which we invert and scale to [14 to -6], then 2^value is scaleFactor.\n  let widthScale = scaleFactor == 0 ? 1e-6 : 1 / Math.pow(2, (100 - scaleFactor) / 5 - 6.0)\n\n  const layers: any = []\n\n  // register setViewState in global view updater\n  // so we can respond to external map motion\n  REACT_VIEW_HANDLES[props.viewId] = () => {\n    setViewState(globalStore.state.viewState)\n  }\n\n  // update pickups and deliveries only when shipments change ----------------------\n  useEffect(() => {\n    const pickups: { [xy: string]: { type: string; coord: number[]; shipmentIds: string[] } } = {}\n    const deliveries: { [xy: string]: { type: string; coord: number[]; shipmentIds: string[] } } =\n      {}\n\n    shipments.forEach(shipment => {\n      let xy = `${shipment.fromX}-${shipment.fromY}`\n      if (!pickups[xy])\n        pickups[xy] = { type: 'pickup', shipmentIds: [], coord: [shipment.fromX, shipment.fromY] }\n      pickups[xy].shipmentIds.push(shipment.$id)\n\n      xy = `${shipment.toX}-${shipment.toY}`\n      if (!deliveries[xy])\n        deliveries[xy] = { type: 'delivery', shipmentIds: [], coord: [shipment.toX, shipment.toY] }\n      deliveries[xy].shipmentIds.push(shipment.$id)\n    })\n\n    setPickupsAndDeliveries({\n      type: 'activity',\n      pickups: Object.values(pickups),\n      deliveries: Object.values(deliveries),\n    })\n  }, [shipments])\n\n  function handleClick(event: any) {\n    if (!event.object) {\n      // no object: send null as message that blank area was clicked\n      onClick(null)\n    } else {\n      onClick(event.object)\n    }\n  }\n\n  function handleViewState(view: any) {\n    setViewState(view)\n    view.center = [view.longitude, view.latitude]\n    globalStore.commit('setMapCamera', view)\n  }\n\n  function renderTooltip(hoverInfo: any) {\n    const { object } = hoverInfo\n    if (!object) return null\n\n    // console.log(555, object)\n\n    if (object?.type == 'pickup') return renderActivityTooltip(hoverInfo, 'pickup')\n    if (object?.type == 'delivery') return renderActivityTooltip(hoverInfo, 'delivery')\n    if (object?.color) return renderLegTooltip(hoverInfo)\n    if (object?.type == 'depot') return null\n    return renderStopTooltip(hoverInfo)\n  }\n\n  function renderActivityTooltip(hoverInfo: any, activity: string) {\n    const { object, x, y } = hoverInfo\n\n    return (\n      <div\n        className=\"tooltip\"\n        style={{\n          backgroundColor: '#334455ee',\n          boxShadow: '2.5px 2px 4px rgba(0,0,0,0.25)',\n          color: '#eee',\n          padding: '0.5rem 0.5rem',\n          position: 'absolute',\n          opacity: 0.9,\n          left: x + 20,\n          top: y + 20,\n        }}\n      >\n        <table style={{ maxWidth: '30rem', fontSize: '0.8rem' }}>\n          <tbody>\n            <tr>\n              <td style={{ textAlign: 'right', paddingRight: '0.5rem', paddingTop: '0.2rem' }}>\n                {activity}:\n              </td>\n              <td style={{ paddingTop: '0.2rem' }}>{object.shipmentIds.join(', ')}</td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n\n  function renderLegTooltip(hoverInfo: any) {\n    const { object, x, y } = hoverInfo\n\n    return (\n      <div\n        className=\"tooltip\"\n        style={{\n          fontSize: '0.8rem',\n          backgroundColor: '#334455ee',\n          boxShadow: '2.5px 2px 4px rgba(0,0,0,0.25)',\n          color: '#eee',\n          padding: '0.5rem 0.5rem',\n          position: 'absolute',\n          left: x + 20,\n          top: y - 30,\n        }}\n      >\n        <b>{object?.tour?.vehicleId}</b>\n        <br />\n        Leg # {1 + object?.count} <br />\n        Shipments on board: {object?.shipmentsOnBoard?.length} <br />\n        Total size: {object?.totalSize}\n      </div>\n    )\n  }\n\n  function renderStopTooltip(hoverInfo: any) {\n    const { object, x, y } = hoverInfo\n\n    // collect some info\n    const visits = object.visits.length\n    const pickups = object.visits.reduce(\n      (prev: number, visit: any) => prev + visit.pickup.length,\n      0\n    )\n    const deliveries = object.visits.reduce(\n      (prev: number, visit: any) => prev + visit.delivery.length,\n      0\n    )\n\n    const numPickupsAndDeliveries = pickups + deliveries\n    const overview = { visits, pickups, deliveries } as any\n\n    // delivery stop has complicated position stuff\n    const tipHeight = Object.keys(object).length * 20 + 32 // good guess\n    let yPosition = y - 30\n    if (yPosition + tipHeight > window.innerHeight) {\n      yPosition = y - tipHeight\n    }\n\n    return (\n      <div\n        className=\"tooltip\"\n        style={{\n          fontSize: '0.7rem',\n          backgroundColor: '#334455ee',\n          boxShadow: '2.5px 2px 4px rgba(0,0,0,0.25)',\n          color: '#eee',\n          padding: '0.5rem 0.5rem',\n          position: 'absolute',\n          left: x + 20,\n          top: yPosition,\n        }}\n      >\n        <table\n          style={{\n            fontSize: '0.8rem',\n          }}\n        >\n          <tbody>\n            {Object.keys(overview).map((a: any) => {\n              return (\n                <tr key={a}>\n                  <td style={{ textAlign: 'right', paddingRight: '0.5rem' }}>{a}:</td>\n                  <td style={{ fontWeight: 'bold' }}> {overview[a]}</td>\n                </tr>\n              )\n            })}\n\n            {/* <tr>\n              <td\n                style={{\n                  fontSize: '1rem',\n                  fontWeight: 'bold',\n                  textAlign: 'right',\n                  paddingRight: '0.5rem',\n                }}\n              >\n                {object.type} {object.count}:\n              </td>\n              <td style={{ fontSize: '1rem', fontWeight: 'bold' }}> {object.id}</td>\n            </tr> */}\n\n            {numPickupsAndDeliveries == 1 &&\n              Object.keys(object.details).map((a: any) => {\n                return (\n                  <tr key={a}>\n                    <td\n                      style={{ textAlign: 'right', paddingRight: '0.5rem', paddingTop: '0.2rem' }}\n                    >\n                      {a.slice(1)}:\n                    </td>\n                    <td style={{ paddingTop: '0.2rem' }}>{object.details[a]}</td>\n                  </tr>\n                )\n              })}\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n\n  function clickedDepot() {}\n\n  if (activeTab == 'tours') {\n    layers.push(\n      //@ts-ignore:\n      new PathLayer({\n        id: 'shipmentLocationDashedLine',\n        data: stopActivities,\n        getPath: (d: any) => [d.ptFrom, d.ptTo],\n        getColor: [128, 128, 128],\n        getOffset: 2, // 2: RIGHT-SIDE TRAFFIC\n        opacity: 1,\n        widthMinPixels: 3,\n        rounded: true,\n        shadowEnabled: false,\n        pickable: false,\n        autoHighlight: false,\n        highlightColor: [255, 255, 255],\n        parameters: { depthTest: false },\n        getDashArray: [3, 2],\n        dashJustified: true,\n        extensions: [new PathStyleExtension({ dash: true })],\n      })\n    )\n\n    if (simplifyTours) {\n      layers.push(\n        //@ts-ignore:\n        new ArcLayer({\n          id: 'leg-arcs',\n          data: legs,\n          getSourcePosition: (d: any) => d.points[0],\n          getTargetPosition: (d: any) => d.points[d.points.length - 1],\n          getSourceColor: (d: any) => d.color, // [200, 32, 224],\n          getTargetColor: (d: any) => d.color, // [200, 32, 224],\n          getWidth: scaleFactor ? (d: any) => d.totalSize / 2 : 3,\n          getHeight: 0.5,\n          widthMinPixels: 2,\n          widthMaxPixels: 200,\n          widthUnits: 'pixels',\n          widthScale: widthScale,\n          opacity: 0.9,\n          parameters: { depthTest: false },\n          updateTriggers: { getWidth: [scaleFactor] },\n          transitions: { getWidth: 150 },\n          pickable: true,\n          autoHighlight: true,\n          highlightColor: [255, 255, 255], // [64, 255, 64],\n          onHover: setHoverInfo,\n        })\n      )\n    } else {\n      layers.push(\n        //@ts-ignore:\n        new PathOffsetLayer({\n          id: 'deliveryroutes',\n          data: legs,\n          getPath: (d: any) => d.points,\n          getColor: (d: any) => d.color,\n          getWidth: scaleFactor ? (d: any) => d.totalSize : 3,\n          getOffset: 2, // 2: RIGHT-SIDE TRAFFIC\n          opacity: 1,\n          widthMinPixels: 3,\n          widthMaxPixels: 200,\n          widthUnits: 'pixels',\n          widthScale: widthScale,\n          rounded: true,\n          shadowEnabled: false,\n          pickable: true,\n          autoHighlight: true,\n          highlightColor: [255, 255, 255], // [64, 255, 64],\n          onHover: setHoverInfo,\n          parameters: { depthTest: false },\n          updateTriggers: { getWidth: [scaleFactor] },\n          transitions: { getWidth: 150 },\n        })\n      )\n    }\n\n    // destination labels\n    layers.push(\n      //@ts-ignore\n      new TextLayer({\n        id: 'dest-labels',\n        data: stopActivities,\n        background: true,\n        backgroundPadding: numSelectedTours !== 1 ? [2, 1, 2, 1] : [3, 2, 3, 1],\n        getColor: [255, 255, 255],\n        getBackgroundColor: (d: any) => {\n          const pickups = d.visits.reduce(\n            (prev: number, visit: any) => prev + visit.pickup.length,\n            0\n          )\n          const deliveries = d.visits.reduce(\n            (prev: number, visit: any) => prev + visit.delivery.length,\n            0\n          )\n          if (pickups && deliveries) return [0, 0, 255]\n          if (pickups) return ActivityColor.pickup\n          if (deliveries) return ActivityColor.delivery\n          return [240, 130, 0]\n        },\n        getPosition: (d: any) => d.midpoint,\n        getText: (d: any) =>\n          d.label == 'Depot' ? d.label : numSelectedTours !== 1 ? ' ' : `${d.label}`,\n        getSize: (d: any) => (d.label == 'Depot' ? 11 : numSelectedTours !== 1 ? 4 : 11),\n        getTextAnchor: 'middle',\n        getAlignmentBaseline: 'center',\n        opacity: 1,\n        noAlloc: false,\n        billboard: true,\n        sizeScale: 1,\n        pickable: true,\n        autoHighlight: true,\n        highlightColor: [255, 255, 255],\n        onHover: setHoverInfo,\n        visible: shipmentDotsOnTourMap,\n      })\n    )\n  }\n\n  // shipment panel\n  if (activeTab == 'shipments') {\n    layers.push(\n      //@ts-ignore:\n      new ScatterplotLayer({\n        id: 'deliveries',\n        data: pickupsAndDeliveries.deliveries,\n        getPosition: (d: any) => d.coord,\n        getColor: ActivityColor.delivery,\n        getRadius: 3,\n        opacity: 0.9,\n        parameters: { depthTest: false },\n        pickable: true,\n        radiusUnits: 'pixels',\n        onHover: setHoverInfo,\n      })\n    )\n    layers.push(\n      //@ts-ignore:\n      new ScatterplotLayer({\n        id: 'pickups',\n        data: pickupsAndDeliveries.pickups,\n        getPosition: (d: any) => d.coord,\n        getColor: ActivityColor.pickup,\n        getRadius: 2,\n        opacity: 0.9,\n        parameters: { depthTest: false },\n        pickable: true,\n        radiusUnits: 'pixels',\n        onHover: setHoverInfo,\n      })\n    )\n\n    const opacity = shipments.length > 1 ? 32 : 255\n\n    layers.push(\n      //@ts-ignore:\n      new ArcLayer({\n        id: 'shipments',\n        data: shipments,\n        getSourcePosition: (d: any) => [d.fromX, d.fromY],\n        getTargetPosition: (d: any) => [d.toX, d.toY],\n        getSourceColor: [0, 228, 255, opacity],\n        getTargetColor: [240, 0, 60, 224],\n        getWidth: scaleFactor ? (d: any) => parseInt(d.$size) || 1.0 : 1,\n        widthUnits: 'pixels',\n        getHeight: 0.5,\n        opacity: 0.9,\n        parameters: { depthTest: false },\n        widthScale: widthScale,\n        widthMinPixels: 1,\n        widthMaxPixels: 100,\n        updateTriggers: { getWidth: [scaleFactor] },\n        transitions: { getWidth: 200 },\n      })\n    )\n  }\n\n  // DEPOTS ------\n  layers.push(\n    //@ts-ignore:\n    new TextLayer({\n      id: 'depots',\n      data: depots,\n      background: true,\n      backgroundPadding: [3, 2, 3, 1],\n      getColor: [255, 255, 255],\n      getBackgroundColor: [0, 150, 240],\n      getPosition: (d: any) => d.midpoint,\n      getText: (d: any) => 'Depot',\n      getTextAnchor: 'middle',\n      getAlignmentBaseline: 'center',\n      getSize: 11,\n      opacity: 1,\n      noAlloc: false,\n      billboard: true,\n      sizeScale: 1,\n      pickable: true,\n      autoHighlight: true,\n      highlightColor: [255, 255, 255],\n      onHover: setHoverInfo,\n    })\n  )\n\n  const showBackgroundMap = projection && projection !== 'Atlantis'\n\n  return (\n    <DeckGL\n      layers={layers}\n      pickingRadius={3}\n      controller={true}\n      getCursor={() => 'pointer'}\n      onClick={handleClick}\n      viewState={viewState}\n      onViewStateChange={(e: any) => handleViewState(e.viewState)}\n    >\n      {showBackgroundMap && (\n        /*\n        // @ts-ignore */\n        <StaticMap mapboxApiAccessToken={MAPBOX_TOKEN} mapStyle={globalStore.getters.mapStyle} />\n      )}\n      {renderTooltip(hoverInfo)}\n    </DeckGL>\n  )\n}\n","<template lang=\"pug\">\n.carrier-viewer(:class=\"{'hide-thumbnail': !thumbnail}\"\n                :style='{\"background\": urlThumbnail}'\n                oncontextmenu=\"return false\")\n\n  .container-1\n    .main-panel\n      tour-viz.anim(v-if=\"!thumbnail\"\n                  :activeTab=\"activeTab\"\n                  :shipments=\"shownShipments\"\n                  :depots=\"shownDepots\"\n                  :legs=\"shownLegs\"\n                  :stopActivities=\"stopActivities\"\n                  :dark=\"globalState.isDarkMode\"\n                  :center=\"vizDetails.center\"\n                  :viewId=\"linkLayerId\"\n                  :settings=\"vizSettings\"\n                  :numSelectedTours=\"selectedTours.length\"\n                  :onClick=\"handleClick\"\n                  :projection=\"vizDetails.projection\"\n                  )\n      ZoomButtons(v-if=\"!thumbnail\")\n      .xmessage(v-if=\"myState.statusMessage\") {{ myState.statusMessage }}\n\n    .right-panel(v-if=\"!thumbnail\" :darkMode=\"true\")\n      h3(style=\"margin-left: 0.25rem\" v-if=\"carriers.length\") {{ $t('carriers') }}\n\n      .carrier-list\n        .carrier(v-for=\"carrier in carriers\" :key=\"carrier.$id\"\n                 :class=\"{selected: carrier.$id===selectedCarrier}\"\n                 @click=\"handleSelectCarrier(carrier)\")\n          .carrier-title {{ carrier.$id }}\n\n      h4 {{ selectedCarrier || 'Details' }}\n\n\n      b-field.detail-buttons(v-if=\"selectedCarrier\" size=\"is-small\")\n\n        b-radio-button(v-model=\"activeTab\" native-value=\"shipments\" size=\"is-small\" type=\"is-warning\")\n          span {{ $t('shipments') }}\n        b-radio-button(v-model=\"activeTab\" native-value=\"tours\" size=\"is-small\" type=\"is-warning\")\n          span {{ $t('tours') }}\n        b-radio-button(v-model=\"activeTab\" native-value=\"vehicles\" size=\"is-small\" type=\"is-warning\")\n          span {{ $t('vehicles') }}\n        b-radio-button(v-if=\"services.length\" v-model=\"activeTab\" native-value=\"services\" size=\"is-small\" type=\"is-warning\")\n          span {{ $t('services') }}\n\n      .detail-area\n        .shipments(v-if=\"activeTab=='shipments'\")\n            span {{ $t('shipments')}}: {{ shipments.length}}\n            .leaf.tour(v-for=\"shipment,i in shipments\" :key=\"`${i}-${shipment.$id}`\"\n                @click=\"handleSelectShipment(shipment)\"\n                :class=\"{selected: shipment==selectedShipment, 'shipment-in-tour': shipmentIdsInTour.includes(shipment.$id)}\"\n            ) {{ `${shipment.$id}: ${shipment.$from}-${shipment.$to}` }}\n\n        .tours(v-if=\"activeTab=='tours'\")\n            .dropdown(v-if=\"this.plans.length > 1\" :class=\"{'is-active': dropdownIsActive}\" style=\"width: 100%\")\n              .dropdown-trigger(@click=\"selectDropdown()\")\n                button\n                  span Plan {{ selectedPlanIndex + 1 }}\n                  span.icon.is-small\n                    i.fas.fa-angle-down\n              .dropdown-menu\n                .dropdown-content\n                  a.dropdown-item(v-for=\"(plan, index) in this.plans\" @click=\"selectPlan(plan)\" :class=\"{'is-active': plan.$selected == 'true'}\") Plan {{ index + 1 }}\n\n            span {{ $t('tours')}}: {{ tours.length}}\n            .leaf.tour(v-for=\"tour,i in tours\" :key=\"`${i}-${tour.$id}`\"\n                @click=\"handleSelectTour(tour)\"\n                :class=\"{selected: selectedTours.includes(tour)}\")\n                div(v-if=\"tour.tourId\") {{ tour.tourId }}: {{ `${tour.vehicleId}` }}\n                div(v-else) {{ `${tour.vehicleId}` }}\n\n        .vehicles(v-if=\"activeTab=='vehicles'\")\n            span {{ $t('vehicles')}}: {{ vehicles.length}}\n            .leaf.tour(v-for=\"veh,i in vehicles\" :key=\"`${i}-${veh.$id}`\") {{ veh.$id }}\n\n        .services(v-if=\"activeTab=='services'\")\n            span {{ $t('services')}}: {{ services.length}}\n            .leaf.tour(v-for=\"service,i in services\" :key=\"`${i}-${service.$id}`\") {{ `${service.$id}` }}\n\n      .switchbox\n        .switches\n          p {{$t('scaleSize')}}\n          b-slider.slider(:tooltip=\"false\" type=\"is-link\" size=\"is-small\" v-model=\"vizSettings.scaleFactor\")\n        .switches\n          b-switch(v-model=\"vizSettings.shipmentDotsOnTourMap\")\n            span(v-html=\"$t('shipmentDots')\")\n          b-switch(v-model=\"vizSettings.simplifyTours\")\n            span(v-html=\"$t('flatten')\")\n\n</template>\n\n<script lang=\"ts\">\nconst i18n = {\n  messages: {\n    en: {\n      carriers: 'Carriers',\n      vehicles: 'VEHICLES',\n      services: 'SERVICES',\n      shipments: 'SHIPMENTS',\n      tours: 'TOURS',\n      pickup: 'Pickup',\n      delivery: 'Delivery',\n      flatten: 'Simple&nbsp;tours',\n      shipmentDots: 'Show shipments',\n      scaleSize: 'Widths',\n      scaleFactor: 'Width',\n    },\n    de: {\n      carriers: 'Unternehmen',\n      vehicles: 'FAHRZEUGE',\n      services: 'BETRIEBE',\n      shipments: 'LIEFERUNGEN',\n      tours: 'TOUREN',\n      pickup: 'Abholung',\n      delivery: 'Lieferung',\n    },\n  },\n}\n\nimport { defineComponent } from 'vue'\nimport type { PropType } from 'vue'\n\nimport { ToggleButton } from 'vue-js-toggle-button'\nimport readBlob from 'read-blob'\nimport YAML from 'yaml'\nimport naturalSort from 'javascript-natural-sort'\nimport colorMap from 'colormap'\n\nimport globalStore from '@/store'\nimport HTTPFileSystem from '@/js/HTTPFileSystem'\nimport LegendColors from '@/components/LegendColors'\nimport ZoomButtons from '@/components/ZoomButtons.vue'\nimport { gUnzip, parseXML, findMatchingGlobInFiles, arrayBufferToBase64 } from '@/js/util'\n\nimport RoadNetworkLoader from '@/workers/RoadNetworkLoader.worker.ts?worker'\n\nimport TourViz from './TourViz'\n\nimport {\n  FileSystem,\n  LegendItem,\n  LegendItemType,\n  FileSystemConfig,\n  VisualizationPlugin,\n  LIGHT_MODE,\n  DARK_MODE,\n  REACT_VIEW_HANDLES,\n  MAP_STYLES_OFFLINE,\n  ColorScheme,\n} from '@/Globals'\n\ninterface NetworkLinks {\n  source: Float32Array\n  dest: Float32Array\n  linkIds: any[]\n  projection: String\n}\n\nnaturalSort.insensitive = true\n\n// An ActivityLocation is a link on which activities occur.\n// A location can have multiple visits on a tour!\n// Visits can have multiple pickups/dropoffs.\ninterface ActivityLocation {\n  link: string\n  midpoint: number[]\n  visits: any[]\n  label: string\n  tour: any\n  details?: any\n  ptFrom: number[]\n  ptTo: number[]\n}\n\nconst CarrierPlugin = defineComponent({\n  name: 'CarrierPlugin',\n  i18n,\n  components: {\n    LegendColors,\n    ToggleButton,\n    TourViz,\n    ZoomButtons,\n  },\n  props: {\n    root: { type: String, required: true },\n    subfolder: { type: String, required: true },\n    yamlConfig: String,\n    config: Object as any,\n    thumbnail: Boolean,\n  },\n  data: () => {\n    return {\n      linkLayerId: Math.floor(1e12 * Math.random()),\n\n      vizSettings: {\n        simplifyTours: false,\n        scaleShipmentSizes: true,\n        shipmentDotsOnTourMap: true,\n        scaleFactor: 0, // 0 means don't scale at all\n      },\n\n      vizDetails: {\n        network: '',\n        carriers: '',\n        projection: '',\n        title: '',\n        description: '',\n        thumbnail: '',\n        center: null as any,\n      },\n\n      myState: {\n        statusMessage: '',\n        isRunning: false,\n        subfolder: '',\n        yamlConfig: '',\n        thumbnail: true,\n        data: [] as any[],\n      },\n\n      searchTerm: '',\n      searchEnabled: false,\n\n      globalState: globalStore.state,\n      isLoaded: true,\n      showHelp: false,\n      activeTab: 'shipments',\n\n      speedStops: [-10, -5, -2, -1, -0.5, -0.25, 0, 0.25, 0.5, 1, 2, 5, 10],\n      speed: 1,\n\n      legendBits: [] as any[],\n\n      links: null as any,\n\n      toggleTours: true,\n      toggleVehicles: true,\n      toggleShipments: true,\n      toggleServices: true,\n\n      detailContent: '',\n\n      data: null as any,\n\n      carriers: [] as any[],\n      vehicles: [] as any[],\n      shipments: [] as any[],\n      shipmentLookup: {} as any, // keyed on $id\n      services: [] as any[],\n      stopActivities: [] as any[],\n      tours: [] as any[],\n      plans: [] as any[],\n\n      shownShipments: [] as any[],\n      shipmentIdsInTour: [] as any[],\n\n      depots: [] as any,\n      shownDepots: [] as any,\n\n      shownLegs: [] as {\n        count: number\n        shipmentsOnBoard: string[]\n        totalSize: number\n        points: number[][]\n        tour: any\n        color: number[]\n        type: string\n      }[],\n\n      selectedCarrier: '',\n      selectedTours: [] as any[],\n      selectedPlan: null as any,\n      selectedPlanIndex: null as any,\n      selectedShipment: null as any,\n\n      thumbnailUrl: \"url('assets/thumbnail.jpg') no-repeat;\",\n\n      vehicleLookup: [] as string[],\n      vehicleLookupString: {} as { [id: string]: number },\n\n      // always pick the same \"random\" colors\n      rgb: colorMap({\n        colormap: 'phase',\n        nshades: 9,\n        format: 'rba',\n      })\n        .map((a: any) => a.slice(0, 3))\n        .reverse(),\n\n      dropdownIsActive: false,\n    }\n  },\n  computed: {\n    fileApi(): HTTPFileSystem {\n      return new HTTPFileSystem(this.fileSystem, globalStore)\n    },\n\n    fileSystem(): FileSystemConfig {\n      const svnProject: FileSystemConfig[] = this.$store.state.svnProjects.filter(\n        (a: FileSystemConfig) => a.slug === this.root\n      )\n      if (svnProject.length === 0) {\n        console.log('no such project')\n        throw Error\n      }\n      return svnProject[0]\n    },\n\n    urlThumbnail(): string {\n      return this.thumbnailUrl\n    },\n\n    textColor(): any {\n      const lightmode = {\n        text: '#3498db',\n        bg: '#eeeef480',\n      }\n\n      const darkmode = {\n        text: 'white',\n        bg: '#181518aa',\n      }\n\n      return this.globalState.isDarkMode ? darkmode : lightmode\n    },\n  },\n\n  watch: {\n    '$store.state.viewState'() {\n      if (!REACT_VIEW_HANDLES[this.linkLayerId]) return\n      REACT_VIEW_HANDLES[this.linkLayerId]()\n    },\n\n    'globalState.isDarkMode'() {\n      this.updateLegendColors()\n    },\n\n    async 'globalState.authAttempts'() {\n      console.log('AUTH CHANGED - Reload')\n      if (!this.yamlConfig) this.buildRouteFromUrl()\n      await this.getVizDetails()\n    },\n  },\n\n  methods: {\n    handleSelectShipment(shipment: any) {\n      // console.log({ shipment })\n\n      if (this.selectedShipment === shipment) {\n        this.selectedShipment = null\n        this.shownShipments = []\n\n        // if everything is deselected, reset view\n        if (!this.selectedTours.length) {\n          const carrier = this.carriers.filter(c => c.$id == this.selectedCarrier)\n          this.selectedCarrier = ''\n          this.handleSelectCarrier(carrier[0])\n        }\n\n        return\n      }\n\n      this.shownShipments = this.shipments.filter(s => s.$id === shipment.$id)\n      this.selectedShipment = shipment\n    },\n\n    processActivitiesInTour(tour: any): {\n      shipmentIdsInTour: any[]\n      stopActivities: ActivityLocation[]\n    } {\n      const shipmentIdsInTour: any[] = []\n      let stopCount = 0\n\n      // link ID is the lookup key for activity locations.\n      // BUT, since link-IDs are often numbers, we must always\n      // prepend an \"L\" to the link-id so that the key order\n      // is stable and based on insertion order.\n      const locations: { [link: string]: ActivityLocation } = {}\n\n      // figure out depot location as our starting point\n      let vehicle = this.vehicles.filter(v => v.$id === tour.vehicleId)[0]\n\n      const depotLink = this.links[vehicle.$depotLinkId]\n      let linkMidpoint = [0.5 * (depotLink[0] + depotLink[2]), 0.5 * (depotLink[1] + depotLink[3])]\n      let prevLocation = vehicle.$depotLinkId\n\n      // store starting location\n      locations[`L${vehicle.$depotLinkId}`] = {\n        link: vehicle.$depotLinkId,\n        midpoint: linkMidpoint,\n        visits: [{ pickup: [], delivery: [], service: [] }],\n        label: '',\n        tour,\n        details: {},\n        ptFrom: [depotLink[0], depotLink[1]],\n        ptTo: [depotLink[2], depotLink[3]],\n      }\n\n      for (const activity of tour.plan) {\n        if (!activity.$shipmentId) continue\n\n        shipmentIdsInTour.push(activity.$shipmentId)\n\n        const shipment = this.shipmentLookup[activity.$shipmentId]\n        if (!shipment) continue\n\n        const link = (activity.$type === 'pickup' ? shipment.$from : shipment.$to) as string\n        const ptFrom = [this.links[link][0], this.links[link][1]]\n        const ptTo = [this.links[link][2], this.links[link][3]]\n        const midpoint = [0.5 * (ptFrom[0] + ptTo[0]), 0.5 * (ptFrom[1] + ptTo[1])]\n\n        // pickup,delivery,service - translated for UI\n        const actType = this.$t(activity.$type)\n        // get details: remove coords, IDs, that we don't need to show the user in UI.\n        const { from, fromX, fromY, to, toX, toY, id, ...details } = shipment\n\n        const act = {\n          id: shipment.$id,\n          type: actType,\n          count: stopCount++,\n          link,\n          midpoint,\n          label: '',\n          tour,\n          details,\n          ptFrom,\n          ptTo,\n        }\n\n        // where to store it? same or new location?\n        if (link == prevLocation) {\n          // same loc as last activity\n          locations[`L${link}`].visits[locations[`L${link}`].visits.length - 1][\n            activity.$type\n          ].push(act)\n        } else if (`L${link}` in locations) {\n          // previously-visited location. Start a new visit!\n          const visit = { pickup: [], delivery: [], service: [] } as any\n          visit[activity.$type].push(act) // so gets saved in either pickup[] or delivery[]\n          locations[`L${link}`].visits.push(visit)\n        } else {\n          // never been here before\n          const visit = { pickup: [], delivery: [], service: [] } as any\n          visit[activity.$type].push(act)\n          locations[`L${link}`] = {\n            link,\n            midpoint,\n            label: '',\n            tour,\n            details,\n            ptFrom,\n            ptTo,\n            visits: [visit],\n          }\n        }\n        prevLocation = link\n      }\n\n      // convert to an array, insertion order is stable value order\n      const stopActivities = Object.values(locations)\n\n      // set stop labels: use count for all but the first one\n      for (let sCount = 0; sCount < stopActivities.length; sCount++) {\n        stopActivities[sCount].label = `${sCount}`\n      }\n      stopActivities[0].label = 'Depot'\n\n      // console.log({ shipmentIdsInTour, stopActivities })\n      return { shipmentIdsInTour, stopActivities }\n    },\n\n    setupDepots() {\n      const depots: { [link: string]: any } = {}\n\n      this.vehicles.forEach((v: any) => {\n        const linkId = v.$depotLinkId\n        let depotLink = this.links[linkId]\n\n        if (!depotLink) return\n\n        if (!depots[linkId]) {\n          depots[linkId] = {\n            type: 'depot',\n            link: v.$depotLinkId,\n            midpoint: [0.5 * (depotLink[0] + depotLink[2]), 0.5 * (depotLink[1] + depotLink[3])],\n            coords: this.links[v.$depotLinkId],\n            vehicles: {} as any,\n          }\n        }\n        depots[linkId].vehicles[v.$id] = v\n      })\n\n      this.depots = Object.values(depots)\n      this.shownDepots = this.depots.slice(0)\n    },\n\n    // -----------------------------------------------------------------------\n    selectAllTours() {\n      this.selectedTours = []\n      this.shownLegs = []\n      this.stopActivities = []\n      this.shownDepots = []\n      this.shownShipments = this.shipments.slice(0)\n\n      for (const tour of this.tours) {\n        //  all legs\n        tour.legs.forEach((leg: any, count_route: number) =>\n          this.addRouteToMap(tour, leg, count_route++)\n        )\n\n        // all activities\n        const z = this.processActivitiesInTour(tour)\n        this.stopActivities = this.stopActivities.concat(z.stopActivities)\n\n        // all depots\n        this.setupDepots()\n      }\n    },\n\n    async handleSelectTour(tour: any) {\n      // add the legs from the shipmentLookup if the tour has no route data\n      if (!tour.legs.length) {\n        console.log('No Route.')\n        for (let i = 0; i < tour.plan.length; i++) {\n          if (tour.plan[i].$shipmentId) {\n            const shipmentId = tour.plan[i].$shipmentId\n            const linksArray = [\n              this.shipmentLookup[shipmentId].$from,\n              this.shipmentLookup[shipmentId].$to,\n            ]\n            tour.legs.push({ links: linksArray })\n          }\n        }\n        this.vizSettings.simplifyTours = true\n      }\n\n      //this unselects tour if user clicks an already-selected tour again\n      if (this.selectedTours.includes(tour)) {\n        this.selectedTours = this.selectedTours.filter((element: any) => element !== tour)\n        this.shownLegs = this.shownLegs.filter(leg => leg.tour !== tour)\n        this.stopActivities = this.stopActivities.filter(stop => stop.tour !== tour)\n\n        // if everything is deselected, EVERYTHING is selected! :-O\n        if (!this.selectedTours.length) this.selectAllTours()\n        return\n      }\n\n      // if this is the first selected tour, remove everything else first\n      if (!this.selectedTours.length) {\n        this.selectedTours = []\n        this.shownLegs = []\n        this.stopActivities = []\n        this.shownDepots = []\n      }\n\n      this.selectedTours.push(tour)\n\n      const { shipmentIdsInTour, stopActivities } = this.processActivitiesInTour(tour)\n      this.shipmentIdsInTour = shipmentIdsInTour\n\n      // Add all legs from all routes of this tour to the map\n      let count_route = 0\n      for (const leg of tour.legs) {\n        this.addRouteToMap(tour, leg, count_route++)\n      }\n\n      // add stop activity locations at the very end\n      this.stopActivities = this.stopActivities.concat(stopActivities)\n    },\n\n    addRouteToMap(\n      tour: any,\n      leg: { links: any[]; shipmentsOnBoard: string[]; totalSize: number },\n      count_route: number\n    ) {\n      // starting point from xy:[0,1]\n      const points = [[this.links[leg.links[0]][0], this.links[leg.links[0]][1]]]\n\n      for (const link of leg.links) {\n        const lastPoint = points[points.length - 1]\n        const fromXY = [this.links[link][0], this.links[link][1]]\n\n        // add from-point if it isn't a duplicate\n        if (fromXY[0] !== lastPoint[0] || fromXY[1] !== lastPoint[1]) {\n          points.push(fromXY)\n        }\n\n        // always add to-point: xy:[2,3]\n        points.push([this.links[link][2], this.links[link][3]])\n      }\n\n      this.shownLegs = this.shownLegs.concat([\n        {\n          tour,\n          shipmentsOnBoard: leg.shipmentsOnBoard,\n          totalSize: leg.totalSize,\n          count: count_route,\n          points,\n          color: this.rgb[(3 + tour.tourNumber) % this.rgb.length],\n          type: 'leg',\n        },\n      ])\n    },\n\n    handleSelectCarrier(carrier: any) {\n      this.dropdownIsActive = false\n\n      if (!this.links) return\n\n      const id = carrier.$id\n\n      this.vehicles = []\n      this.shipments = []\n      this.services = []\n      this.tours = []\n      this.plans = []\n      this.shownShipments = []\n      this.shownDepots = []\n      this.selectedShipment = null\n      this.shipmentIdsInTour = []\n      this.stopActivities = []\n      this.shownLegs = []\n\n      // unselect carrier\n      if (this.selectedCarrier === id) {\n        this.selectedCarrier = ''\n        return\n      }\n\n      this.selectedCarrier = id\n\n      // vehicles\n      let vehicles = carrier.capabilities.vehicles.vehicle || []\n      this.vehicles = vehicles.sort((a: any, b: any) => naturalSort(a, b))\n\n      // depots\n      this.setupDepots()\n\n      // shipments\n      this.shipments = this.processShipments(carrier)\n\n      if (carrier.services?.service?.length)\n        this.services = carrier.services.service\n          .map((s: any) => s.$)\n          .sort((a: any, b: any) => naturalSort(a.$id, b.$id))\n\n      this.tours = this.processTours(carrier)\n\n      // select all everything\n      this.shownShipments = this.shipments\n      this.selectAllTours()\n    },\n\n    getAllPlans(carrier: any) {\n      // Add plan to plans[] if there is no plans-tag and only one plan\n      if (carrier.plan != undefined) {\n        this.plans.push(carrier.plan)\n        this.selectedPlan = carrier.plan\n        return\n      }\n\n      if (carrier.plans != undefined) {\n        // Add plan to plans[] if a plans-tag has only one child\n        if (carrier.plans.plan.length == undefined) {\n          this.plans.push(carrier.plans.plan)\n          this.selectedPlan = carrier.plans.plan\n          return\n        }\n\n        // Add plans to plans[] if a plans-tag exists and the plans-tag has multiple childs\n        this.plans = carrier.plans.plan\n\n        for (let i = 0; i < carrier.plans.plan.length; i++) {\n          if (carrier.plans.plan[i].selected == 'true') {\n            this.selectedPlan = carrier.plans.plan[i]\n            break\n          }\n          this.selectedPlan = carrier.plans.plan[i]\n        }\n      }\n    },\n\n    processTours(carrier: any) {\n      this.getAllPlans(carrier)\n\n      if (!this.selectPlan || !this.plans.length) return []\n\n      if (!Array.isArray(this.selectedPlan.tour)) {\n        this.selectedPlan.tour = [this.selectedPlan.tour]\n      }\n\n      const tours: any[] = this.selectedPlan.tour.map((tour: any, i: number) => {\n        // reconstitute the plan. Our XML library builds\n        // two arrays: one for acts and one for legs.\n        // We need them stitched back together in the correct order.\n        const plan = [tour.act[0]]\n        const shipmentsOnBoard = new Set()\n\n        for (let i = 1; i < tour.act.length; i++) {\n          // insert list of shipments onboard\n          tour.leg[i - 1].shipmentsOnBoard = [...shipmentsOnBoard]\n          plan.push(tour.leg[i - 1])\n          plan.push(tour.act[i])\n\n          // account for pickups/deliveries\n          if (tour.act[i].$type == 'pickup' && tour.act[i].$shipmentId)\n            shipmentsOnBoard.add(tour.act[i].$shipmentId)\n          if (tour.act[i].$type == 'delivery' && tour.act[i].$shipmentId)\n            shipmentsOnBoard.delete(tour.act[i].$shipmentId)\n        }\n\n        // Parse any route strings \"123434 234143 14241\"\n        const legs = tour.leg\n          .filter((leg: any) => leg.route && leg.route.length)\n          .map((leg: any) => {\n            // store shipment object, not id\n            const shipmentsOnBoard = leg.shipmentsOnBoard.map((id: any) => this.shipmentLookup[id])\n            const totalSize = shipmentsOnBoard.reduce(\n              (prev: number, curr: any) => prev + parseFloat(curr?.$size || 0),\n              0\n            )\n            return {\n              shipmentsOnBoard,\n              totalSize,\n              links: leg.route ? leg.route.split(' ') : [],\n            }\n          })\n\n        const p = {\n          vehicleId: tour.$vehicleId,\n          tourId: tour.$tourId,\n          plan,\n          legs, // legs.links, legs.shipmentsOnBoard, legs.totalSize\n          tourNumber: 0,\n        }\n        return p\n      })\n\n      tours.sort((a: any, b: any) => naturalSort(a.vehicleId, b.vehicleId))\n\n      // now assign them numbers based on their sorted order\n      tours.forEach((tour, i) => (tour.tourNumber = i))\n\n      return tours\n    },\n\n    processShipments(carrier: any) {\n      this.shipmentLookup = {} as any\n      if (!carrier.shipments?.shipment?.length) return []\n\n      const shipments = carrier.shipments.shipment.sort((a: any, b: any) =>\n        naturalSort(a.$id, b.$id)\n      )\n      try {\n        for (const shipment of shipments) {\n          // shipment has link id, so we go from link.from to link.to\n          shipment.fromX = 0.5 * (this.links[shipment.$from][0] + this.links[shipment.$from][2])\n          shipment.fromY = 0.5 * (this.links[shipment.$from][1] + this.links[shipment.$from][3])\n          shipment.toX = 0.5 * (this.links[shipment.$to][0] + this.links[shipment.$to][2])\n          shipment.toY = 0.5 * (this.links[shipment.$to][1] + this.links[shipment.$to][3])\n\n          this.shipmentLookup[shipment.$id] = shipment\n        }\n      } catch (e) {\n        // if xy are missing, skip this -- just means network isn't loaded yet.\n      }\n\n      return shipments\n    },\n\n    // this happens if viz is the full page, not a thumbnail on a project page\n    buildRouteFromUrl() {\n      const params = this.$route.params\n      if (!params.project || !params.pathMatch) {\n        console.log('I CANT EVEN: NO PROJECT/PARHMATCH')\n        return\n      }\n\n      // subfolder and config file\n      const sep = 1 + params.pathMatch.lastIndexOf('/')\n      const subfolder = params.pathMatch.substring(0, sep)\n      const config = params.pathMatch.substring(sep)\n\n      this.myState.subfolder = subfolder\n      this.myState.yamlConfig = config\n    },\n\n    async getVizDetails() {\n      // are we in a dashboard?\n      if (this.config) {\n        this.vizDetails = Object.assign({}, this.config)\n        return\n      }\n\n      // if a YAML file was passed in, just use it\n      if (this.yamlConfig?.endsWith('yaml') || this.yamlConfig?.endsWith('yml')) {\n        try {\n          const filename =\n            this.yamlConfig.indexOf('/') > -1\n              ? this.yamlConfig\n              : this.subfolder + '/' + this.yamlConfig\n\n          const text = await this.fileApi.getFileText(filename)\n          this.vizDetails = YAML.parse(text)\n          return\n        } catch (e) {\n          console.log('failed')\n          // maybe it failed because password?\n          const err = e as any\n          if (this.fileSystem.needPassword && err.status === 401) {\n            globalStore.commit('requestLogin', this.fileSystem.slug)\n          }\n          return\n        }\n      }\n\n      // Fine, build the config based on folder contents -------------------------\n      const title = this.myState.yamlConfig.substring(\n        0,\n        15 + this.myState.yamlConfig.indexOf('carriers')\n      )\n\n      // Road network: first try the most obvious network filename:\n      const { files } = await this.fileApi.getDirectory(this.myState.subfolder)\n\n      let network = this.myState.yamlConfig.replaceAll('carriers', 'network')\n      // if the obvious network file doesn't exist, just grab... the first network file:\n      if (files.indexOf(network) == -1) {\n        const allNetworks = files.filter(f => f.indexOf('network') > -1)\n        if (allNetworks.length) network = allNetworks[0]\n        else {\n          this.myState.statusMessage = 'No road network found.'\n          network = ''\n        }\n      }\n\n      this.vizDetails = {\n        network,\n        carriers: this.yamlConfig as any,\n        title,\n        description: '',\n        center: this.vizDetails.center,\n        projection: '',\n        thumbnail: '',\n      }\n\n      const t = 'Carrier Explorer'\n      this.$emit('title', t)\n\n      this.buildThumbnail()\n    },\n\n    async setMapCenter() {\n      let samples = 0\n      let longitude = 0\n      let latitude = 0\n\n      if (this.vizDetails.center) {\n        if (typeof this.vizDetails.center == 'string') {\n          this.vizDetails.center = this.vizDetails.center.split(',').map(Number)\n        }\n        longitude = this.vizDetails.center[0]\n        latitude = this.vizDetails.center[1]\n      } else if (!this.vizDetails.center) {\n        this.data = Object.entries(this.links)\n\n        if (!this.data.length) return\n\n        const numLinks = this.data.length / 2\n\n        const gap = 4096\n        for (let i = 0; i < numLinks; i += gap) {\n          longitude += this.data[i * 2][1][0]\n          latitude += this.data[i * 2 + 1][1][1]\n          samples++\n        }\n\n        longitude = longitude / samples\n        latitude = latitude / samples\n      }\n      if (longitude && latitude) {\n        this.$store.commit('setMapCamera', {\n          longitude,\n          latitude,\n          zoom: 9,\n          bearing: 0,\n          pitch: 0,\n          jump: false,\n        })\n      }\n    },\n\n    async buildThumbnail() {\n      if (this.thumbnail && this.vizDetails.thumbnail) {\n        try {\n          const blob = await this.fileApi.getFileBlob(\n            this.myState.subfolder + '/' + this.vizDetails.thumbnail\n          )\n          const buffer = await readBlob.arraybuffer(blob)\n          const base64 = arrayBufferToBase64(buffer)\n          if (base64)\n            this.thumbnailUrl = `center / cover no-repeat url(data:image/png;base64,${base64})`\n        } catch (e) {\n          console.error(e)\n        }\n      }\n    },\n\n    handleClick(object: any) {\n      console.log('CLICK!', object)\n      if (!object) this.clickedEmptyMap()\n      if (object?.type == 'depot') this.clickedDepot(object)\n      if (object?.type == 'leg') this.clickedLeg(object)\n    },\n\n    clickedDepot(object: any) {\n      const vehiclesAtThisDepot = Object.values(object.vehicles).map((v: any) => v.$id)\n      // console.log({ vehiclesAtThisDepot })\n      this.selectedTours = []\n      this.shownShipments = []\n\n      for (const tour of this.tours) {\n        if (vehiclesAtThisDepot.includes(tour.vehicleId)) {\n          this.handleSelectTour(tour)\n          // ^^ has side-effect: shipmentsInTour now has the list of shipmentIds\n          // We can use this to filter the shipments\n          this.shipmentIdsInTour.forEach(id => {\n            this.shownShipments.push(this.shipmentLookup[id])\n          })\n        }\n      }\n    },\n\n    clickedLeg(object: any) {\n      if (object?.tour) this.handleSelectTour(object?.tour)\n    },\n\n    clickedEmptyMap() {\n      this.selectAllTours()\n    },\n\n    updateLegendColors() {},\n\n    async loadCarriers() {\n      // this.myState.statusMessage = '' + this.$i18n.t('message.tours')\n\n      const carriersXML = await this.loadFileOrGzippedFile(this.vizDetails.carriers)\n      if (!carriersXML) return []\n\n      const root: any = await parseXML(carriersXML, {\n        // these elements should always be arrays, even if there's just one element:\n        alwaysArray: [\n          'carriers.carrier',\n          'carriers.carrier.capabilities.vehicles.vehicle',\n          'carriers.carrier.plan.tour',\n          'carriers.carrier.shipments.shipment',\n          'carriers.carrier.services.service',\n        ],\n      })\n\n      // sort by '$id' attribute\n      const carrierList = root.carriers.carrier.sort((a: any, b: any) => naturalSort(a.$id, b.$id))\n      // console.log(carrierList)\n\n      return carrierList\n    },\n\n    async loadNetwork() {\n      this.myState.statusMessage = 'Loading network...'\n\n      if (this.vizDetails.network.indexOf('.xml.') > -1) {\n        // load matsim xml file\n        const path = `${this.myState.subfolder}/${this.vizDetails.network}`\n        const net = await this.fetchNetwork(path, {})\n\n        this.vizDetails.projection = '' + net.projection\n\n        // build direct lookup of x/y from link-id\n        this.myState.statusMessage = 'Building network link table'\n        const links: { [id: string]: number[] } = {}\n\n        net.linkIds.forEach((linkId: string, i: number) => {\n          links[linkId] = [\n            net.source[i * 2],\n            net.source[i * 2 + 1],\n            net.dest[i * 2],\n            net.dest[i * 2 + 1],\n          ]\n        })\n        return links\n      } else {\n        // pre-converted JSON output from create_network.py\n        const jsonNetwork = await this.fileApi.getFileJson(\n          this.myState.subfolder + '/' + this.vizDetails.network\n        )\n\n        // geojson is ALWAYS in long/lat\n        this.vizDetails.projection = 'EPSG:4326'\n\n        return jsonNetwork\n      }\n    },\n\n    async fetchNetwork(path: string, vizDetails: any) {\n      return new Promise<NetworkLinks>((resolve, reject) => {\n        const thread = new RoadNetworkLoader()\n        try {\n          thread.postMessage({\n            filePath: path,\n            fileSystem: this.fileSystem,\n            vizDetails,\n          })\n\n          thread.onmessage = e => {\n            // perhaps network has no CRS and we need to ask user\n            if (e.data.promptUserForCRS) {\n              let crs =\n                prompt('Enter the coordinate reference system, e.g. EPSG:25832') || 'EPSG:31468'\n\n              if (Number.isFinite(parseInt(crs))) crs = `EPSG:${crs}`\n\n              thread.postMessage({ crs })\n              return\n            }\n\n            if (e.data.status) {\n              this.myState.statusMessage = '' + e.data.status\n              return\n            }\n\n            // normal exit\n            thread.terminate()\n\n            if (e.data.error) {\n              console.error(e.data.error)\n              globalStore.commit('error', e.data.error)\n              this.myState.statusMessage = e.data.error\n              reject(e.data.error)\n            }\n            resolve(e.data.links)\n          }\n        } catch (err) {\n          thread.terminate()\n          console.error(err)\n          reject(err)\n        }\n      })\n    },\n\n    toggleLoaded(loaded: boolean) {\n      this.isLoaded = loaded\n    },\n\n    rotateColors() {\n      localStorage.setItem(\n        'plugin/agent-animation/colorscheme',\n        this.globalState.isDarkMode ? ColorScheme.DarkMode : ColorScheme.LightMode\n      )\n    },\n\n    async loadFileOrGzippedFile(name: string) {\n      let filepath = `${this.subfolder}/${name}`\n\n      try {\n        // figure out which file to load with *? wildcards\n        if (filepath.indexOf('*') > -1 || filepath.indexOf('?') > -1) {\n          const zDataset = filepath.substring(1 + filepath.lastIndexOf('/'))\n          const zSubfolder = filepath.substring(0, filepath.lastIndexOf('/'))\n\n          // fetch list of files in this folder\n          const { files } = await this.fileApi.getDirectory(zSubfolder)\n          const matchingFiles = findMatchingGlobInFiles(files, zDataset)\n          if (matchingFiles.length == 0) throw Error(`No files matched \"${zDataset}\"`)\n          if (matchingFiles.length > 1)\n            throw Error(`More than one file matched \"${zDataset}\": ${matchingFiles}`)\n          filepath = `${zSubfolder}/${matchingFiles[0]}`\n        }\n\n        let content = ''\n\n        if (filepath.endsWith('xml') || filepath.endsWith('gz')) {\n          const blob = await this.fileApi.getFileBlob(filepath)\n          const buffer = await blob.arrayBuffer()\n          // recursively gunzip until it can gunzip no more:\n          const unzipped = gUnzip(buffer)\n          const text = new TextDecoder('utf-8').decode(unzipped)\n          return text\n        }\n      } catch (e) {\n        // oh no\n      }\n\n      const error = `Error loading ${filepath}`\n      globalStore.commit('error', error)\n      this.myState.statusMessage = error\n      return ''\n    },\n\n    selectDropdown() {\n      this.dropdownIsActive = !this.dropdownIsActive\n    },\n\n    selectPlan(plan: any) {\n      // Set all plans to unselected\n      for (let i = 0; i < this.plans.length; i++) {\n        this.plans[i].$selected = 'false'\n      }\n\n      // Select new plan\n      plan.$selected = 'true'\n\n      this.selectedPlanIndex = this.plans.indexOf(plan)\n\n      // Unselect all tours\n      this.selectedTours = []\n\n      this.selectDropdown()\n      this.selectedPlan = plan\n    },\n  },\n  async mounted() {\n    globalStore.commit('setFullScreen', !this.thumbnail)\n\n    this.myState.thumbnail = this.thumbnail\n    this.myState.subfolder = this.subfolder\n\n    if (!this.yamlConfig) this.buildRouteFromUrl()\n    await this.getVizDetails()\n\n    if (this.thumbnail) return\n\n    this.showHelp = false\n    this.updateLegendColors()\n\n    this.myState.statusMessage = 'Loading carriers...'\n\n    this.carriers = await this.loadCarriers()\n\n    await this.$nextTick() // update UI update before network load begins\n    this.links = await this.loadNetwork()\n    this.setMapCenter()\n\n    this.myState.statusMessage = ''\n\n    // Select the first carrier if the carriers are loaded\n    if (this.carriers.length) this.handleSelectCarrier(this.carriers[0])\n\n    // Select the first tour if the tours are loaded\n    if (this.tours.length) this.handleSelectTour(this.tours[0])\n  },\n\n  beforeDestroy() {\n    this.myState.isRunning = false\n\n    globalStore.commit('setFullScreen', false)\n    this.$store.commit('setFullScreen', false)\n  },\n})\n\nexport default CarrierPlugin\n</script>\n\n<style scoped lang=\"scss\">\n@import '@/styles.scss';\n\n/* SCROLLBARS\n   The emerging W3C standard is currently Firefox-only */\n* {\n  scrollbar-width: thin;\n  scrollbar-color: #454 $steelGray;\n}\n\n/* And this works on Chrome/Edge/Safari */\n*::-webkit-scrollbar {\n  width: 10px;\n}\n*::-webkit-scrollbar-track {\n  background: var(--bgPanel3);\n}\n*::-webkit-scrollbar-thumb {\n  background-color: var(--textVeryPale);\n  border-radius: 6px;\n}\n\n.carrier-viewer {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  pointer-events: none;\n  min-height: $thumbnailHeight;\n}\n\n.container-1 {\n  display: flex;\n  height: 100%;\n}\n\n.carrier-viewer.hide-thumbnail {\n  background: none;\n}\n\n.main-panel {\n  position: relative;\n  flex: 1;\n}\n\nh4 {\n  border-top: 1px solid #bbb;\n  margin: 1rem 0.25rem 0.5rem 0.25rem;\n  padding-top: 0.25rem;\n  font-weight: bold;\n  font-size: 1.1rem;\n}\n\n.right-panel {\n  color: var(--text);\n  display: flex;\n  flex-direction: column;\n  font-size: 0.8rem;\n  pointer-events: auto;\n  background-color: var(--bgPanel3);\n  width: 18rem;\n  max-width: 18rem;\n  padding: 0 0.25rem;\n}\n\n.nav {\n  grid-area: title;\n  display: flex;\n  flex-direction: row;\n  margin: 0 0;\n  padding: 0 0.5rem 0 1rem;\n\n  a {\n    font-weight: bold;\n    color: white;\n    text-decoration: none;\n\n    &.router-link-exact-active {\n      color: white;\n    }\n  }\n\n  p {\n    margin: auto 0.5rem auto 0;\n    padding: 0 0;\n    color: white;\n  }\n}\n\n.speed-block {\n  margin-top: 1rem;\n}\n\n.legend-block {\n  margin-top: 2rem;\n}\n\n.speed-slider {\n  flex: 1;\n  width: 100%;\n  margin: 0rem 0.25rem 0.25rem 0rem;\n  font-weight: bold;\n}\n\n.big {\n  padding: 0rem 0;\n  // margin-top: 1rem;\n  font-size: 2rem;\n  line-height: 3.75rem;\n  font-weight: bold;\n}\n\n.anim {\n  // background-color: #181919;\n  pointer-events: auto;\n}\n\n.speed-label {\n  font-size: 0.8rem;\n  font-weight: bold;\n}\n\n.clock {\n  grid-area: clock;\n  width: 273px;\n  background-color: #000000cc;\n  border: 3px solid white;\n  margin-bottom: 1.2rem;\n  color: white;\n}\n\n.clock p {\n  text-align: center;\n  padding: 1rem 1rem;\n}\n\n.tooltip {\n  padding: 5rem 5rem;\n  background-color: #ccc;\n  z-index: -1;\n}\n\n.panel-items {\n  display: flex;\n  flex-direction: column;\n  margin: 0 0;\n  max-height: 100%;\n  height: 100%;\n  width: 100%;\n}\n\nh3 {\n  font-size: 1.2rem;\n  padding: 0;\n}\n\ninput {\n  border: none;\n  background-color: #235;\n  color: #ccc;\n}\n\n.carrier {\n  padding: 0.25rem 0.5rem;\n  margin: 0 0rem;\n  color: var(--text);\n}\n\n.carrier:nth-of-type(odd) {\n  background: var(--bgPanel2);\n}\n\n.carrier-details {\n  font-weight: normal;\n  margin-left: 0.5rem;\n  animation: slide-up 0.25s ease;\n  color: white;\n}\n\n.carrier-details .carrier:hover {\n  cursor: pointer;\n  background-color: $themeColorPale; // var(--bgBold);\n}\n\n.carrier:hover {\n  color: var(--link);\n}\n\n.carrier-title {\n  margin-top: 0.1rem;\n  display: flex;\n  flex-direction: row;\n\n  i {\n    opacity: 0.3;\n    margin-top: 0.2rem;\n    margin-left: -0.2rem;\n    margin-right: 0.4rem;\n  }\n}\n\n.carrier-title:hover {\n  i {\n    opacity: 0.7;\n  }\n}\n\n.carrier.selected {\n  font-weight: bold;\n  background-color: $themeColorPale;\n  box-shadow: 0 0 3px 0 rgba(0, 0, 0, 0.3) inset;\n  color: white;\n}\n\n.carrier-list {\n  user-select: none;\n  flex: 1;\n  overflow-y: auto;\n  overflow-x: hidden;\n  cursor: pointer;\n}\n\n.detail-area {\n  user-select: none;\n  flex: 1;\n  overflow-x: hidden;\n  cursor: pointer;\n  margin: 0 0.25rem 0.25rem 0.25rem;\n  // border-bottom: 1px solid #555;\n}\n\n.carrier-section {\n  margin-top: 0.25rem;\n  margin-bottom: 0.25rem;\n}\n\n@keyframes slide-up {\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n\n.playback-stuff {\n  grid-area: playback;\n  padding: 0rem 2rem 2rem 2rem;\n  pointer-events: auto;\n}\n\n.leaf {\n  padding-left: 1rem;\n}\n\n.leaf:hover {\n  color: yellowgreen;\n}\n\n.tour.selected {\n  background-color: var(--textFancy);\n  font-weight: bold;\n  color: var(--bgPanel3);\n}\n\n.shipment-in-tour {\n  background-color: #497c7e;\n}\n\n.detail-list {\n  width: 250px;\n  overflow-y: auto;\n  overflow-x: hidden;\n}\n\n.detail-list pre {\n  font-family: 'Arial';\n  padding: 0 0;\n  line-height: 0.8rem;\n  background-color: var(--bgPanel);\n  color: var(--text);\n}\n\n.switches {\n  display: flex;\n  // margin: 0.25rem 0.25rem;\n\n  p {\n    flex: 1;\n    margin: auto 0;\n  }\n}\n\n.slider {\n  flex: 4;\n  margin-right: 0 1rem;\n}\n\n.detail-buttons {\n  margin: 0 0.25rem 0.5rem 0.25rem;\n}\n\n.switchbox {\n  margin: 0 0.25rem 0.5rem 0.25rem;\n}\n\n.xmessage {\n  position: absolute;\n  bottom: 0;\n  z-index: 10;\n  background-color: var(--bgPanel2);\n  padding: 0.5rem 1rem;\n}\n\n.dropdown {\n  margin-bottom: 0.5rem;\n}\n\n@media only screen and (max-width: 640px) {\n  .nav {\n    padding: 0.5rem 0.5rem;\n  }\n\n  .clock {\n    text-align: center;\n  }\n\n  .right-side {\n    font-size: 0.7rem;\n    margin-right: 0.25rem;\n  }\n\n  .big {\n    padding: 0 0rem;\n    margin-top: 0.5rem;\n    font-size: 1.3rem;\n    line-height: 2rem;\n  }\n\n  .side-section {\n    margin-left: 0;\n  }\n\n  .extra-buttons {\n    margin-right: 1rem;\n  }\n}\n</style>\n"],"names":["naturalSort","a","b","re","sre","dre","hre","ore","i","s","x","y","xN","yN","xD","yD","oFxNcL","oFyNcL","cLoc","numS","dashShaders","offsetShaders","defaultProps","PathStyleExtension","LayerExtension","dash","offset","highPrecisionDash","layer","extension","result","mergeShaders","context","attributeManager","params","uniforms","path","positionSize","isNested","geometrySize","p","prevP","dist","_defineProperty","Component","props","listItems","item","React","ActivityColor","viewState","setViewState","useState","globalStore","hoverInfo","setHoverInfo","pickupsAndDeliveries","setPickupsAndDeliveries","dark","activeTab","numSelectedTours","shipments","depots","legs","settings","stopActivities","center","onClick","projection","simplifyTours","scaleFactor","shipmentDotsOnTourMap","widthScale","layers","REACT_VIEW_HANDLES","useEffect","pickups","deliveries","shipment","xy","handleClick","event","handleViewState","view","renderTooltip","object","renderActivityTooltip","renderLegTooltip","renderStopTooltip","activity","_a","_b","visits","prev","visit","numPickupsAndDeliveries","overview","tipHeight","yPosition","PathLayer","d","ArcLayer","PathOffsetLayer","TextLayer","ScatterplotLayer","opacity","showBackgroundMap","DeckGL","e","StaticMap","MAPBOX_TOKEN","i18n","CarrierPlugin","defineComponent","LegendColors","ToggleButton","TourViz","ZoomButtons","colorMap","HTTPFileSystem","svnProject","lightmode","darkmode","carrier","c","tour","shipmentIdsInTour","stopCount","locations","vehicle","v","depotLink","linkMidpoint","prevLocation","link","ptFrom","ptTo","midpoint","actType","from","fromX","fromY","to","toX","toY","id","details","act","sCount","linkId","leg","count_route","z","shipmentId","linksArray","element","stop","points","lastPoint","fromXY","vehicles","tours","plan","shipmentsOnBoard","totalSize","curr","sep","subfolder","config","filename","text","YAML","err","title","files","network","allNetworks","f","t","samples","longitude","latitude","numLinks","gap","blob","buffer","readBlob","base64","arrayBufferToBase64","vehiclesAtThisDepot","carriersXML","parseXML","net","links","jsonNetwork","vizDetails","resolve","reject","thread","RoadNetworkLoader","crs","loaded","ColorScheme","name","filepath","zDataset","zSubfolder","matchingFiles","findMatchingGlobInFiles","content","unzipped","gUnzip","error"],"mappings":"y4BAKA,IAAAA,GAAiB,SAASA,EAAaC,EAAGC,EAAG,CAE5C,IAAIC,EAAK,8EACRC,EAAM,iBACNC,EAAM,iHACNC,EAAM,iBACNC,EAAM,KACNC,EAAI,SAASC,EAAG,CAAE,OAAOT,EAAY,cAAgB,GAAKS,GAAG,YAAW,GAAM,GAAKA,CAAI,EAEvFC,EAAIF,EAAEP,CAAC,EAAE,QAAQG,EAAK,EAAE,GAAK,GAC7BO,EAAIH,EAAEN,CAAC,EAAE,QAAQE,EAAK,EAAE,GAAK,GAE7BQ,EAAKF,EAAE,QAAQP,EAAI,QAAQ,EAAE,QAAQ,MAAM,EAAE,EAAE,QAAQ,MAAM,EAAE,EAAE,MAAM,IAAI,EAC3EU,EAAKF,EAAE,QAAQR,EAAI,QAAQ,EAAE,QAAQ,MAAM,EAAE,EAAE,QAAQ,MAAM,EAAE,EAAE,MAAM,IAAI,EAE3EW,EAAK,SAASJ,EAAE,MAAMJ,CAAG,EAAG,EAAE,GAAMM,EAAG,SAAW,GAAKF,EAAE,MAAML,CAAG,GAAK,KAAK,MAAMK,CAAC,EACnFK,EAAK,SAASJ,EAAE,MAAML,CAAG,EAAG,EAAE,GAAKQ,GAAMH,EAAE,MAAMN,CAAG,GAAK,KAAK,MAAMM,CAAC,GAAK,KAC1EK,EAAQC,EAET,GAAIF,EAAI,CACP,GAAKD,EAAKC,EAAO,MAAO,GACnB,GAAKD,EAAKC,EAAO,MAAO,EAC7B,CAED,QAAQG,EAAK,EAAGC,EAAK,KAAK,IAAIP,EAAG,OAAQC,EAAG,MAAM,EAAGK,EAAOC,EAAMD,IAAQ,CAKzE,GAHAF,EAAS,EAAEJ,EAAGM,CAAI,GAAK,IAAI,MAAMX,CAAG,GAAK,WAAWK,EAAGM,CAAI,CAAC,GAAKN,EAAGM,CAAI,GAAK,EAC7ED,EAAS,EAAEJ,EAAGK,CAAI,GAAK,IAAI,MAAMX,CAAG,GAAK,WAAWM,EAAGK,CAAI,CAAC,GAAKL,EAAGK,CAAI,GAAK,EAEzE,MAAMF,CAAM,IAAM,MAAMC,CAAM,EAAK,OAAQ,MAAMD,CAAM,EAAK,EAAI,GAMpE,GAJS,OAAOA,GAAW,OAAOC,IACjCD,GAAU,GACVC,GAAU,IAEPD,EAASC,EAAU,MAAO,GAC9B,GAAID,EAASC,EAAU,MAAO,EAC9B,CACD,MAAO,EACR,iBC5CaG,GAAc,CACzB,OAAQ,CACN,WAAY;AAAA;AAAA;AAAA;AAAA;AAAA,EACZ,eAAgB;AAAA;AAAA;AAAA,EAChB,WAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EACZ,iBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CACnB,CACH,EACaC,GAAgB,CAC3B,OAAQ,CACN,WAAY;AAAA;AAAA,EACZ,wBAAyB;AAAA;AAAA;AAAA,EACzB,6BAA8B;AAAA;AAAA;AAAA;AAAA,EAC9B,iBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CACnB,CACH,ECXMC,GAAe,CACnB,aAAc,CACZ,KAAM,WACN,MAAO,CAAC,EAAG,CAAC,CACb,EACD,UAAW,CACT,KAAM,WACN,MAAO,CACR,EACD,cAAe,GACf,gBAAiB,EACnB,EACe,MAAMC,UAA2BC,EAAe,CAC7D,YAAY,CACV,KAAAC,EAAO,GACP,OAAAC,EAAS,GACT,kBAAAC,EAAoB,EACrB,EAAG,GAAI,CACN,MAAM,CACJ,KAAMF,GAAQE,EACd,OAAAD,EACA,kBAAAC,CACN,CAAK,CACF,CAED,UAAUC,EAAO,CACf,MAAO,mBAAoBA,EAAM,KAClC,CAED,WAAWC,EAAW,CACpB,GAAI,CAACA,EAAU,UAAU,IAAI,EAC3B,OAAO,KAGT,IAAIC,EAAS,CAAA,EAEb,OAAID,EAAU,KAAK,OACjBC,EAASC,EAAaD,EAAQV,EAAW,GAGvCS,EAAU,KAAK,SACjBC,EAASC,EAAaD,EAAQT,EAAa,GAGtCS,CACR,CAED,gBAAgBE,EAASH,EAAW,CAClC,MAAMI,EAAmB,KAAK,sBAE1B,CAACA,GAAoB,CAACJ,EAAU,UAAU,IAAI,IAI9CA,EAAU,KAAK,MACjBI,EAAiB,aAAa,CAC5B,mBAAoB,CAClB,KAAM,EACN,SAAU,cACX,CACT,CAAO,EAGCJ,EAAU,KAAK,mBACjBI,EAAiB,aAAa,CAC5B,oBAAqB,CACnB,KAAM,EACN,SAAU,UACV,UAAWJ,EAAU,eAAe,KAAK,IAAI,CAC9C,CACT,CAAO,EAGCA,EAAU,KAAK,QACjBI,EAAiB,aAAa,CAC5B,gBAAiB,CACf,KAAM,EACN,SAAU,WACX,CACT,CAAO,EAEJ,CAED,YAAYC,EAAQL,EAAW,CAC7B,GAAI,CAACA,EAAU,UAAU,IAAI,EAC3B,OAGF,MAAMM,EAAW,CAAA,EAEbN,EAAU,KAAK,OACjBM,EAAS,cAAgB,KAAK,MAAM,cAAgB,EAAI,EACxDA,EAAS,gBAAkB,EAAQ,KAAK,MAAM,iBAGhD,KAAK,MAAM,MAAM,YAAYA,CAAQ,CACtC,CAED,eAAeC,EAAM,CACnB,MAAMN,EAAS,CAAC,CAAC,EACXO,EAAe,KAAK,MAAM,iBAAmB,KAAO,EAAI,EACxDC,EAAW,MAAM,QAAQF,EAAK,CAAC,CAAC,EAChCG,EAAeD,EAAWF,EAAK,OAASA,EAAK,OAASC,EAC5D,IAAIG,EACAC,EAEJ,QAASjC,EAAI,EAAGA,EAAI+B,EAAe,EAAG/B,IACpCgC,EAAIF,EAAWF,EAAK5B,CAAC,EAAI4B,EAAK,MAAM5B,EAAI6B,EAAc7B,EAAI6B,EAAeA,CAAY,EACrFG,EAAI,KAAK,gBAAgBA,CAAC,EAEtBhC,EAAI,IACNsB,EAAOtB,CAAC,EAAIsB,EAAOtB,EAAI,CAAC,EAAIkC,GAAKD,EAAOD,CAAC,GAG3CC,EAAQD,EAGV,OAAOV,CACR,CAEH,CAEAa,EAAgBpB,EAAoB,eAAgBD,EAAY,EAEhEqB,EAAgBpB,EAAoB,gBAAiB,oBAAoB,EC7HzE,SAAwBqB,GAAUC,EAK/B,CACD,MAAMC,EAAYD,EAAM,MAAM,IAC5BE,GAAAC,EAAA,cAAC,KAAG,CAAA,IAAKD,EAAK,MAAQA,EAAK,MAAM,CAAC,CAChC,EAAAC,EAAA,cAAC,MAAA,CACC,MAAO,CACL,MAAO,OACP,OAAQ,GAAG,KAAK,IAAI,EAAG,GAAO,EAAID,EAAK,MAAQ,GAAK,CAAC,CAAC,KACtD,gBAAiB,OAAOA,EAAK,KAAK,GACpC,CAAA,CAED,EAAAA,EAAK,OAASC,EAAA,cAAC,MAAI,CAAA,MAAO,CAAE,aAAc,QAAS,CAAA,EAAID,EAAK,KAAM,CACrE,CACD,EAED,uBACG,MACC,KAAAC,EAAA,cAAC,KAAA,CACC,MAAO,CACL,UAAW,OACX,WAAY,OACZ,aAAc,SACd,SAAU,QACZ,CAAA,EAECH,EAAM,KAAA,EAERG,EAAA,cAAA,IAAA,KAAGH,EAAM,WAAY,kBACrB,KAAG,CAAA,MAAO,CAAE,UAAW,OAAQ,QAAS,EAAG,OAAQ,CAAE,CAAA,EAAIC,CAAU,CACtE,CAEJ,CCVA,MAAMG,EAAgB,CACpB,OAAQ,CAAC,EAAG,IAAK,GAAG,EACpB,SAAU,CAAC,IAAK,EAAG,EAAE,EACrB,QAAS,CAAC,IAAK,GAAI,GAAG,CACxB,EAEA,SAAwBL,GAAUC,EAc/B,CACD,KAAM,CAACK,EAAWC,CAAY,EAAIC,EAAS,SAAAC,EAAY,MAAM,SAAS,EAChE,CAACC,EAAWC,CAAY,EAAIH,EAAA,SAAS,CAAS,CAAA,EAC9C,CAACI,EAAsBC,CAAuB,EAAIL,WAAS,CAC/D,KAAM,WACN,QAAS,CAAC,EACV,WAAY,CAAC,CAAA,CACd,EAEK,CACJ,KAAAM,EACA,UAAAC,EACA,iBAAAC,EACA,UAAAC,EACA,OAAAC,EACA,KAAAC,EACA,SAAAC,EACA,eAAAC,EACA,OAAAC,EACA,QAAAC,EACA,WAAAC,CACE,EAAAvB,EAEE,CAAE,cAAAwB,EAAe,YAAAC,EAAa,sBAAAC,CAAA,EAA0BP,EAI1D,IAAAQ,EAAaF,GAAe,EAAI,KAAO,EAAI,KAAK,IAAI,GAAI,IAAMA,GAAe,EAAI,CAAG,EAExF,MAAMG,EAAc,CAAA,EAIDC,EAAA7B,EAAM,MAAM,EAAI,IAAM,CAC1BM,EAAAE,EAAY,MAAM,SAAS,CAAA,EAI1CsB,EAAAA,UAAU,IAAM,CACd,MAAMC,EAAsF,CAAA,EACtFC,EACJ,CAAA,EAEFhB,EAAU,QAAoBiB,GAAA,CAC5B,IAAIC,EAAK,GAAGD,EAAS,KAAK,IAAIA,EAAS,KAAK,GACvCF,EAAQG,CAAE,IACbH,EAAQG,CAAE,EAAI,CAAE,KAAM,SAAU,YAAa,CAAA,EAAI,MAAO,CAACD,EAAS,MAAOA,EAAS,KAAK,CAAE,GAC3FF,EAAQG,CAAE,EAAE,YAAY,KAAKD,EAAS,GAAG,EAEzCC,EAAK,GAAGD,EAAS,GAAG,IAAIA,EAAS,GAAG,GAC/BD,EAAWE,CAAE,IAChBF,EAAWE,CAAE,EAAI,CAAE,KAAM,WAAY,YAAa,CAAA,EAAI,MAAO,CAACD,EAAS,IAAKA,EAAS,GAAG,CAAE,GAC5FD,EAAWE,CAAE,EAAE,YAAY,KAAKD,EAAS,GAAG,CAAA,CAC7C,EAEuBrB,EAAA,CACtB,KAAM,WACN,QAAS,OAAO,OAAOmB,CAAO,EAC9B,WAAY,OAAO,OAAOC,CAAU,CAAA,CACrC,CAAA,EACA,CAAChB,CAAS,CAAC,EAEd,SAASmB,EAAYC,EAAY,CAC1BA,EAAM,OAITd,EAAQc,EAAM,MAAM,EAFpBd,EAAQ,IAAI,CAIhB,CAEA,SAASe,EAAgBC,EAAW,CAClChC,EAAagC,CAAI,EACjBA,EAAK,OAAS,CAACA,EAAK,UAAWA,EAAK,QAAQ,EAChC9B,EAAA,OAAO,eAAgB8B,CAAI,CACzC,CAEA,SAASC,EAAc9B,EAAgB,CAC/B,KAAA,CAAE,OAAA+B,CAAW/B,EAAAA,EACnB,OAAK+B,GAIDA,GAAA,YAAAA,EAAQ,OAAQ,SAAiBC,EAAsBhC,EAAW,QAAQ,GAC1E+B,GAAA,YAAAA,EAAQ,OAAQ,WAAmBC,EAAsBhC,EAAW,UAAU,EAC9E+B,GAAA,MAAAA,EAAQ,MAAcE,EAAiBjC,CAAS,GAChD+B,GAAA,YAAAA,EAAQ,OAAQ,QAAgB,KAC7BG,EAAkBlC,CAAS,EARd,IAStB,CAES,SAAAgC,EAAsBhC,EAAgBmC,EAAkB,CAC/D,KAAM,CAAE,OAAAJ,EAAQ,EAAA3E,EAAG,EAAAC,CAAA,EAAM2C,EAGvB,OAAAN,EAAA,cAAC,MAAA,CACC,UAAU,UACV,MAAO,CACL,gBAAiB,YACjB,UAAW,iCACX,MAAO,OACP,QAAS,gBACT,SAAU,WACV,QAAS,GACT,KAAMtC,EAAI,GACV,IAAKC,EAAI,EACX,CAAA,kBAEC,QAAM,CAAA,MAAO,CAAE,SAAU,QAAS,SAAU,QAAS,CAAA,EACnDqC,EAAA,cAAA,QAAA,qBACE,KACC,KAAAA,EAAA,cAAC,MAAG,MAAO,CAAE,UAAW,QAAS,aAAc,SAAU,WAAY,WAClEyC,EAAS,GACZ,EACAzC,EAAA,cAAC,MAAG,MAAO,CAAE,WAAY,QAAS,GAAIqC,EAAO,YAAY,KAAK,IAAI,CAAE,CACtE,CACF,CACF,CAAA,CAGN,CAEA,SAASE,EAAiBjC,EAAgB,SACxC,KAAM,CAAE,OAAA+B,EAAQ,EAAA3E,EAAG,EAAAC,CAAA,EAAM2C,EAGvB,OAAAN,EAAA,cAAC,MAAA,CACC,UAAU,UACV,MAAO,CACL,SAAU,SACV,gBAAiB,YACjB,UAAW,iCACX,MAAO,OACP,QAAS,gBACT,SAAU,WACV,KAAMtC,EAAI,GACV,IAAKC,EAAI,EACX,CAAA,EAECqC,EAAA,cAAA,IAAA,MAAG0C,EAAAL,GAAA,YAAAA,EAAQ,OAAR,YAAAK,EAAc,SAAU,kBAC3B,KAAG,IAAA,EAAE,SACC,GAAIL,GAAA,YAAAA,EAAQ,OAAM,oBAAE,KAAG,IAAA,EAAE,wBACXM,EAAAN,GAAA,YAAAA,EAAQ,mBAAR,YAAAM,EAA0B,OAAO,oBAAE,KAAG,IAAA,EAAE,eAChDN,GAAA,YAAAA,EAAQ,SAAA,CAG3B,CAEA,SAASG,EAAkBlC,EAAgB,CACzC,KAAM,CAAE,OAAA+B,EAAQ,EAAA3E,EAAG,EAAAC,CAAA,EAAM2C,EAGnBsC,EAASP,EAAO,OAAO,OACvBT,EAAUS,EAAO,OAAO,OAC5B,CAACQ,EAAcC,IAAeD,EAAOC,EAAM,OAAO,OAClD,CAAA,EAEIjB,EAAaQ,EAAO,OAAO,OAC/B,CAACQ,EAAcC,IAAeD,EAAOC,EAAM,SAAS,OACpD,CAAA,EAGIC,GAA0BnB,EAAUC,EACpCmB,EAAW,CAAE,OAAAJ,EAAQ,QAAAhB,EAAS,WAAAC,CAAW,EAGzCoB,EAAY,OAAO,KAAKZ,CAAM,EAAE,OAAS,GAAK,GACpD,IAAIa,EAAYvF,EAAI,GAChB,OAAAuF,EAAYD,EAAY,OAAO,cACjCC,EAAYvF,EAAIsF,GAIhBjD,EAAA,cAAC,MAAA,CACC,UAAU,UACV,MAAO,CACL,SAAU,SACV,gBAAiB,YACjB,UAAW,iCACX,MAAO,OACP,QAAS,gBACT,SAAU,WACV,KAAMtC,EAAI,GACV,IAAKwF,CACP,CAAA,EAEAlD,EAAA,cAAC,QAAA,CACC,MAAO,CACL,SAAU,QACZ,CAAA,EAEAA,EAAA,cAAC,aACE,OAAO,KAAKgD,CAAQ,EAAE,IAAK/F,GAExB+C,EAAA,cAAC,KAAG,CAAA,IAAK/C,CACP,EAAA+C,EAAA,cAAC,KAAG,CAAA,MAAO,CAAE,UAAW,QAAS,aAAc,QAAS,CAAA,EAAI/C,EAAE,GAAC,EAC/D+C,EAAA,cAAC,KAAG,CAAA,MAAO,CAAE,WAAY,MAAO,CAAA,EAAG,IAAEgD,EAAS/F,CAAC,CAAE,CACnD,CAEH,EAgBA8F,IAA2B,GAC1B,OAAO,KAAKV,EAAO,OAAO,EAAE,IAAKpF,GAE7B+C,EAAA,cAAC,KAAG,CAAA,IAAK/C,CACP,EAAA+C,EAAA,cAAC,KAAA,CACC,MAAO,CAAE,UAAW,QAAS,aAAc,SAAU,WAAY,QAAS,CAAA,EAEzE/C,EAAE,MAAM,CAAC,EAAE,GAEd,EAAA+C,EAAA,cAAC,KAAG,CAAA,MAAO,CAAE,WAAY,QAAS,CAAA,EAAIqC,EAAO,QAAQpF,CAAC,CAAE,CAC1D,CAEH,CACL,CACF,CAAA,CAGN,CA4HA,GAxHI0D,GAAa,UACRc,EAAA,KAEL,IAAI0B,GAAU,CACZ,GAAI,6BACJ,KAAMlC,EACN,QAAUmC,GAAW,CAACA,EAAE,OAAQA,EAAE,IAAI,EACtC,SAAU,CAAC,IAAK,IAAK,GAAG,EACxB,UAAW,EACX,QAAS,EACT,eAAgB,EAChB,QAAS,GACT,cAAe,GACf,SAAU,GACV,cAAe,GACf,eAAgB,CAAC,IAAK,IAAK,GAAG,EAC9B,WAAY,CAAE,UAAW,EAAM,EAC/B,aAAc,CAAC,EAAG,CAAC,EACnB,cAAe,GACf,WAAY,CAAC,IAAI7E,EAAmB,CAAE,KAAM,EAAM,CAAA,CAAC,CAAA,CACpD,CAAA,EAGC8C,EACKI,EAAA,KAEL,IAAI4B,EAAS,CACX,GAAI,WACJ,KAAMtC,EACN,kBAAoBqC,GAAWA,EAAE,OAAO,CAAC,EACzC,kBAAoBA,GAAWA,EAAE,OAAOA,EAAE,OAAO,OAAS,CAAC,EAC3D,eAAiBA,GAAWA,EAAE,MAC9B,eAAiBA,GAAWA,EAAE,MAC9B,SAAU9B,EAAe8B,GAAWA,EAAE,UAAY,EAAI,EACtD,UAAW,GACX,eAAgB,EAChB,eAAgB,IAChB,WAAY,SACZ,WAAA5B,EACA,QAAS,GACT,WAAY,CAAE,UAAW,EAAM,EAC/B,eAAgB,CAAE,SAAU,CAACF,CAAW,CAAE,EAC1C,YAAa,CAAE,SAAU,GAAI,EAC7B,SAAU,GACV,cAAe,GACf,eAAgB,CAAC,IAAK,IAAK,GAAG,EAC9B,QAASf,CAAA,CACV,CAAA,EAGIkB,EAAA,KAEL,IAAI6B,GAAgB,CAClB,GAAI,iBACJ,KAAMvC,EACN,QAAUqC,GAAWA,EAAE,OACvB,SAAWA,GAAWA,EAAE,MACxB,SAAU9B,EAAe8B,GAAWA,EAAE,UAAY,EAClD,UAAW,EACX,QAAS,EACT,eAAgB,EAChB,eAAgB,IAChB,WAAY,SACZ,WAAA5B,EACA,QAAS,GACT,cAAe,GACf,SAAU,GACV,cAAe,GACf,eAAgB,CAAC,IAAK,IAAK,GAAG,EAC9B,QAASjB,EACT,WAAY,CAAE,UAAW,EAAM,EAC/B,eAAgB,CAAE,SAAU,CAACe,CAAW,CAAE,EAC1C,YAAa,CAAE,SAAU,GAAI,CAAA,CAC9B,CAAA,EAKEG,EAAA,KAEL,IAAI8B,EAAU,CACZ,GAAI,cACJ,KAAMtC,EACN,WAAY,GACZ,kBAAmBL,IAAqB,EAAI,CAAC,EAAG,EAAG,EAAG,CAAC,EAAI,CAAC,EAAG,EAAG,EAAG,CAAC,EACtE,SAAU,CAAC,IAAK,IAAK,GAAG,EACxB,mBAAqBwC,GAAW,CACxB,MAAAxB,EAAUwB,EAAE,OAAO,OACvB,CAACP,EAAcC,IAAeD,EAAOC,EAAM,OAAO,OAClD,CAAA,EAEIjB,EAAauB,EAAE,OAAO,OAC1B,CAACP,EAAcC,IAAeD,EAAOC,EAAM,SAAS,OACpD,CAAA,EAEF,OAAIlB,GAAWC,EAAmB,CAAC,EAAG,EAAG,GAAG,EACxCD,EAAgB3B,EAAc,OAC9B4B,EAAmB5B,EAAc,SAC9B,CAAC,IAAK,IAAK,CAAC,CACrB,EACA,YAAcmD,GAAWA,EAAE,SAC3B,QAAUA,GACRA,EAAE,OAAS,QAAUA,EAAE,MAAQxC,IAAqB,EAAI,IAAM,GAAGwC,EAAE,KAAK,GAC1E,QAAUA,GAAYA,EAAE,OAAS,QAAU,GAAKxC,IAAqB,EAAI,EAAI,GAC7E,cAAe,SACf,qBAAsB,SACtB,QAAS,EACT,QAAS,GACT,UAAW,GACX,UAAW,EACX,SAAU,GACV,cAAe,GACf,eAAgB,CAAC,IAAK,IAAK,GAAG,EAC9B,QAASL,EACT,QAASgB,CAAA,CACV,CAAA,GAKDZ,GAAa,YAAa,CACrBc,EAAA,KAEL,IAAI+B,EAAiB,CACnB,GAAI,aACJ,KAAMhD,EAAqB,WAC3B,YAAc4C,GAAWA,EAAE,MAC3B,SAAUnD,EAAc,SACxB,UAAW,EACX,QAAS,GACT,WAAY,CAAE,UAAW,EAAM,EAC/B,SAAU,GACV,YAAa,SACb,QAASM,CAAA,CACV,CAAA,EAEIkB,EAAA,KAEL,IAAI+B,EAAiB,CACnB,GAAI,UACJ,KAAMhD,EAAqB,QAC3B,YAAc4C,GAAWA,EAAE,MAC3B,SAAUnD,EAAc,OACxB,UAAW,EACX,QAAS,GACT,WAAY,CAAE,UAAW,EAAM,EAC/B,SAAU,GACV,YAAa,SACb,QAASM,CAAA,CACV,CAAA,EAGH,MAAMkD,EAAU5C,EAAU,OAAS,EAAI,GAAK,IAErCY,EAAA,KAEL,IAAI4B,EAAS,CACX,GAAI,YACJ,KAAMxC,EACN,kBAAoBuC,GAAW,CAACA,EAAE,MAAOA,EAAE,KAAK,EAChD,kBAAoBA,GAAW,CAACA,EAAE,IAAKA,EAAE,GAAG,EAC5C,eAAgB,CAAC,EAAG,IAAK,IAAKK,CAAO,EACrC,eAAgB,CAAC,IAAK,EAAG,GAAI,GAAG,EAChC,SAAUnC,EAAe8B,GAAW,SAASA,EAAE,KAAK,GAAK,EAAM,EAC/D,WAAY,SACZ,UAAW,GACX,QAAS,GACT,WAAY,CAAE,UAAW,EAAM,EAC/B,WAAA5B,EACA,eAAgB,EAChB,eAAgB,IAChB,eAAgB,CAAE,SAAU,CAACF,CAAW,CAAE,EAC1C,YAAa,CAAE,SAAU,GAAI,CAAA,CAC9B,CAAA,CAEL,CAGOG,EAAA,KAEL,IAAI8B,EAAU,CACZ,GAAI,SACJ,KAAMzC,EACN,WAAY,GACZ,kBAAmB,CAAC,EAAG,EAAG,EAAG,CAAC,EAC9B,SAAU,CAAC,IAAK,IAAK,GAAG,EACxB,mBAAoB,CAAC,EAAG,IAAK,GAAG,EAChC,YAAcsC,GAAWA,EAAE,SAC3B,QAAUA,GAAW,QACrB,cAAe,SACf,qBAAsB,SACtB,QAAS,GACT,QAAS,EACT,QAAS,GACT,UAAW,GACX,UAAW,EACX,SAAU,GACV,cAAe,GACf,eAAgB,CAAC,IAAK,IAAK,GAAG,EAC9B,QAAS7C,CAAA,CACV,CAAA,EAGG,MAAAmD,GAAoBtC,GAAcA,IAAe,WAGrD,OAAApB,EAAA,cAAC2D,GAAA,CACC,OAAAlC,EACA,cAAe,EACf,WAAY,GACZ,UAAW,IAAM,UACjB,QAASO,EACT,UAAA9B,EACA,kBAAoB0D,GAAW1B,EAAgB0B,EAAE,SAAS,CAAA,EAEzDF,oBAGEG,GAAU,CAAA,qBAAsBC,GAAc,SAAUzD,EAAY,QAAQ,SAAU,EAExF+B,EAAc9B,CAAS,CAAA,CAG9B,CC5ZA,MAAAyD,GAAA,CACA,SAAA,CACA,GAAA,CACA,SAAA,WACA,SAAA,WACA,SAAA,WACA,UAAA,YACA,MAAA,QACA,OAAA,SACA,SAAA,WACA,QAAA,oBACA,aAAA,iBACA,UAAA,SACA,YAAA,OACA,EACA,GAAA,CACA,SAAA,cACA,SAAA,YACA,SAAA,WACA,UAAA,cACA,MAAA,SACA,OAAA,WACA,SAAA,WACA,CACA,CACA,EAyCA/G,EAAA,YAAA,GAgBA,MAAAgH,GAAAC,GAAA,CACA,KAAA,gBACA,KAAAF,GACA,WAAA,CAAA,aACAG,GAAA,aACAC,GAAA,aAAA,QACAC,GACA,YAAAC,EACA,EACA,MAAA,CACA,KAAA,CAAA,KAAA,OAAA,SAAA,EAAA,EACA,UAAA,CAAA,KAAA,OAAA,SAAA,EAAA,EACA,WAAA,OACA,OAAA,OACA,UAAA,OACA,EACA,KAAA,KACA,CACA,YAAA,KAAA,MAAA,KAAA,KAAA,QAAA,EAEA,YAAA,CACA,cAAA,GACA,mBAAA,GACA,sBAAA,GACA,YAAA,CACA,EAEA,WAAA,CACA,QAAA,GACA,SAAA,GACA,WAAA,GACA,MAAA,GACA,YAAA,GACA,UAAA,GACA,OAAA,IACA,EAEA,QAAA,CACA,cAAA,GACA,UAAA,GACA,UAAA,GACA,WAAA,GACA,UAAA,GACA,KAAA,CAAA,CACA,EAEA,WAAA,GACA,cAAA,GAEA,YAAAhE,EAAA,MACA,SAAA,GACA,SAAA,GACA,UAAA,YAEA,WAAA,CAAA,IAAA,GAAA,GAAA,GAAA,IAAA,KAAA,EAAA,IAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EACA,MAAA,EAEA,WAAA,CAAA,EAEA,MAAA,KAEA,YAAA,GACA,eAAA,GACA,gBAAA,GACA,eAAA,GAEA,cAAA,GAEA,KAAA,KAEA,SAAA,CAAA,EACA,SAAA,CAAA,EACA,UAAA,CAAA,EACA,eAAA,CAAA,EACA,SAAA,CAAA,EACA,eAAA,CAAA,EACA,MAAA,CAAA,EACA,MAAA,CAAA,EAEA,eAAA,CAAA,EACA,kBAAA,CAAA,EAEA,OAAA,CAAA,EACA,YAAA,CAAA,EAEA,UAAA,CAAA,EAUA,gBAAA,GACA,cAAA,CAAA,EACA,aAAA,KACA,kBAAA,KACA,iBAAA,KAEA,aAAA,yCAEA,cAAA,CAAA,EACA,oBAAA,CAAA,EAGA,IAAAiE,GAAA,CACA,SAAA,QACA,QAAA,EACA,OAAA,KAAA,CACA,EACA,IAAArH,GAAAA,EAAA,MAAA,EAAA,CAAA,CAAA,EACA,QAAA,EAEA,iBAAA,EAAA,GAGA,SAAA,CACA,SAAA,CACA,OAAA,IAAAsH,GAAA,KAAA,WAAAlE,CAAA,CACA,EAEA,YAAA,CACA,MAAAmE,EAAA,KAAA,OAAA,MAAA,YAAA,OACAvH,GAAAA,EAAA,OAAA,KAAA,IAAA,EAEA,GAAAuH,EAAA,SAAA,EACA,cAAA,IAAA,iBAAA,EACA,MAEA,OAAAA,EAAA,CAAA,CACA,EAEA,cAAA,CACA,OAAA,KAAA,YACA,EAEA,WAAA,CACA,MAAAC,EAAA,CACA,KAAA,UACA,GAAA,WAAA,EAGAC,EAAA,CACA,KAAA,QACA,GAAA,WAAA,EAGA,OAAA,KAAA,YAAA,WAAAA,EAAAD,CACA,CACA,EAEA,MAAA,CACA,0BAAA,CACA/C,EAAA,KAAA,WAAA,GACAA,EAAA,KAAA,WAAA,GACA,EAEA,0BAAA,CACA,KAAA,mBAAA,CACA,EAEA,KAAA,4BAAA,CACA,QAAA,IAAA,uBAAA,EACA,KAAA,YAAA,KAAA,kBAAA,EACA,MAAA,KAAA,eACA,CACA,EAEA,QAAA,CACA,qBAAAI,EAAA,CAGA,GAAA,KAAA,mBAAAA,EAAA,CAKA,GAJA,KAAA,iBAAA,KACA,KAAA,eAAA,GAGA,CAAA,KAAA,cAAA,OAAA,CACA,MAAA6C,EAAA,KAAA,SAAA,UAAAC,EAAA,KAAA,KAAA,eAAA,EACA,KAAA,gBAAA,GACA,KAAA,oBAAAD,EAAA,CAAA,CAAA,CACA,CAEA,MACA,CAEA,KAAA,eAAA,KAAA,UAAA,UAAAlH,EAAA,MAAAqE,EAAA,GAAA,EACA,KAAA,iBAAAA,CACA,EAEA,wBAAA+C,EAGA,CACA,MAAAC,EAAA,CAAA,EACA,IAAAC,EAAA,EAMA,MAAAC,EAAA,CAAA,EAGA,IAAAC,EAAA,KAAA,SAAA,OAAAC,GAAAA,EAAA,MAAAL,EAAA,SAAA,EAAA,CAAA,EAEA,MAAAM,EAAA,KAAA,MAAAF,EAAA,YAAA,EACA,IAAAG,EAAA,CAAA,IAAAD,EAAA,CAAA,EAAAA,EAAA,CAAA,GAAA,IAAAA,EAAA,CAAA,EAAAA,EAAA,CAAA,EAAA,EACAE,EAAAJ,EAAA,aAGAD,EAAA,IAAAC,EAAA,YAAA,EAAA,EAAA,CACA,KAAAA,EAAA,aACA,SAAAG,EACA,OAAA,CAAA,CAAA,OAAA,CAAA,EAAA,SAAA,GAAA,QAAA,CAAA,EAAA,EACA,MAAA,GACA,KAAAP,EACA,QAAA,CAAA,EACA,OAAA,CAAAM,EAAA,CAAA,EAAAA,EAAA,CAAA,CAAA,EACA,KAAA,CAAAA,EAAA,CAAA,EAAAA,EAAA,CAAA,CAAA,CAAA,EAGA,UAAA1C,KAAAoC,EAAA,KAAA,CACA,GAAA,CAAApC,EAAA,YAAA,SAEAqC,EAAA,KAAArC,EAAA,WAAA,EAEA,MAAAX,EAAA,KAAA,eAAAW,EAAA,WAAA,EACA,GAAA,CAAAX,EAAA,SAEA,MAAAwD,EAAA7C,EAAA,QAAA,SAAAX,EAAA,MAAAA,EAAA,IACAyD,EAAA,CAAA,KAAA,MAAAD,CAAA,EAAA,CAAA,EAAA,KAAA,MAAAA,CAAA,EAAA,CAAA,CAAA,EACAE,EAAA,CAAA,KAAA,MAAAF,CAAA,EAAA,CAAA,EAAA,KAAA,MAAAA,CAAA,EAAA,CAAA,CAAA,EACAG,EAAA,CAAA,IAAAF,EAAA,CAAA,EAAAC,EAAA,CAAA,GAAA,IAAAD,EAAA,CAAA,EAAAC,EAAA,CAAA,EAAA,EAGAE,EAAA,KAAA,GAAAjD,EAAA,KAAA,EAEA,CAAA,KAAAkD,EAAA,MAAAC,EAAA,MAAAC,EAAA,GAAAC,EAAA,IAAAC,EAAA,IAAAC,EAAA,GAAAC,EAAA,GAAAC,CAAA,EAAApE,EAEAqE,EAAA,CACA,GAAArE,EAAA,IACA,KAAA4D,EACA,MAAAX,IACA,KAAAO,EACA,SAAAG,EACA,MAAA,GACA,KAAAZ,EACA,QAAAqB,EACA,OAAAX,EACA,KAAAC,CAAA,EAIA,GAAAF,GAAAD,EAEAL,EAAA,IAAAM,CAAA,EAAA,EAAA,OAAAN,EAAA,IAAAM,CAAA,EAAA,EAAA,OAAA,OAAA,CAAA,EACA7C,EAAA,KACA,EAAA,KAAA0D,CAAA,UACA,IAAAb,CAAA,KAAAN,EAAA,CAEA,MAAAlC,EAAA,CAAA,OAAA,CAAA,EAAA,SAAA,GAAA,QAAA,CAAA,GACAA,EAAAL,EAAA,KAAA,EAAA,KAAA0D,CAAA,EACAnB,EAAA,IAAAM,CAAA,EAAA,EAAA,OAAA,KAAAxC,CAAA,CAAA,KACA,CAEA,MAAAA,EAAA,CAAA,OAAA,CAAA,EAAA,SAAA,GAAA,QAAA,CAAA,GACAA,EAAAL,EAAA,KAAA,EAAA,KAAA0D,CAAA,EACAnB,EAAA,IAAAM,CAAA,EAAA,EAAA,CACA,KAAAA,EACA,SAAAG,EACA,MAAA,GACA,KAAAZ,EACA,QAAAqB,EACA,OAAAX,EACA,KAAAC,EACA,OAAA,CAAA1C,CAAA,CAAA,CAEA,CACAuC,EAAAC,CACA,CAGA,MAAArE,EAAA,OAAA,OAAA+D,CAAA,EAGA,QAAAoB,EAAA,EAAAA,EAAAnF,EAAA,OAAAmF,IACAnF,EAAAmF,CAAA,EAAA,MAAA,GAAAA,CAAA,GAEA,OAAAnF,EAAA,CAAA,EAAA,MAAA,QAGA,CAAA,kBAAA6D,EAAA,eAAA7D,EACA,EAEA,aAAA,CACA,MAAAH,EAAA,CAAA,EAEA,KAAA,SAAA,QAAAoE,GAAA,CACA,MAAAmB,EAAAnB,EAAA,aACA,IAAAC,EAAA,KAAA,MAAAkB,CAAA,EAEAlB,IAEArE,EAAAuF,CAAA,IACAvF,EAAAuF,CAAA,EAAA,CACA,KAAA,QACA,KAAAnB,EAAA,aACA,SAAA,CAAA,IAAAC,EAAA,CAAA,EAAAA,EAAA,CAAA,GAAA,IAAAA,EAAA,CAAA,EAAAA,EAAA,CAAA,EAAA,EACA,OAAA,KAAA,MAAAD,EAAA,YAAA,EACA,SAAA,CAAA,CAAA,GAGApE,EAAAuF,CAAA,EAAA,SAAAnB,EAAA,GAAA,EAAAA,EAAA,CACA,EAEA,KAAA,OAAA,OAAA,OAAApE,CAAA,EACA,KAAA,YAAA,KAAA,OAAA,MAAA,CAAA,CACA,EAGA,gBAAA,CACA,KAAA,cAAA,GACA,KAAA,UAAA,GACA,KAAA,eAAA,GACA,KAAA,YAAA,GACA,KAAA,eAAA,KAAA,UAAA,MAAA,CAAA,EAEA,UAAA+D,KAAA,KAAA,MAAA,CAEAA,EAAA,KAAA,QAAA,CAAAyB,EAAAC,IACA,KAAA,cAAA1B,EAAAyB,EAAAC,GAAA,CAAA,EAIA,MAAAC,EAAA,KAAA,wBAAA3B,CAAA,EACA,KAAA,eAAA,KAAA,eAAA,OAAA2B,EAAA,cAAA,EAGA,KAAA,YAAA,CACA,CACA,EAEA,MAAA,iBAAA3B,EAAA,CAEA,GAAA,CAAAA,EAAA,KAAA,OAAA,CACA,QAAA,IAAA,WAAA,EACA,QAAArH,EAAA,EAAAA,EAAAqH,EAAA,KAAA,OAAArH,IACA,GAAAqH,EAAA,KAAArH,CAAA,EAAA,YAAA,CACA,MAAAiJ,EAAA5B,EAAA,KAAArH,CAAA,EAAA,YACAkJ,EAAA,CACA,KAAA,eAAAD,CAAA,EAAA,MACA,KAAA,eAAAA,CAAA,EAAA,GAAA,EAEA5B,EAAA,KAAA,KAAA,CAAA,MAAA6B,CAAA,CAAA,CACA,CAEA,KAAA,YAAA,cAAA,EACA,CAGA,GAAA,KAAA,cAAA,SAAA7B,CAAA,EAAA,CACA,KAAA,cAAA,KAAA,cAAA,OAAA8B,GAAAA,IAAA9B,CAAA,EACA,KAAA,UAAA,KAAA,UAAA,OAAAyB,GAAAA,EAAA,OAAAzB,CAAA,EACA,KAAA,eAAA,KAAA,eAAA,OAAA+B,GAAAA,EAAA,OAAA/B,CAAA,EAGA,KAAA,cAAA,QAAA,KAAA,eAAA,EACA,MACA,CAGA,KAAA,cAAA,SACA,KAAA,cAAA,GACA,KAAA,UAAA,GACA,KAAA,eAAA,GACA,KAAA,YAAA,IAGA,KAAA,cAAA,KAAAA,CAAA,EAEA,KAAA,CAAA,kBAAAC,EAAA,eAAA7D,CAAA,EAAA,KAAA,wBAAA4D,CAAA,EACA,KAAA,kBAAAC,EAGA,IAAAyB,EAAA,EACA,UAAAD,KAAAzB,EAAA,KACA,KAAA,cAAAA,EAAAyB,EAAAC,GAAA,EAIA,KAAA,eAAA,KAAA,eAAA,OAAAtF,CAAA,CACA,EAEA,cACA4D,EACAyB,EACAC,EACA,CAEA,MAAAM,EAAA,CAAA,CAAA,KAAA,MAAAP,EAAA,MAAA,CAAA,CAAA,EAAA,CAAA,EAAA,KAAA,MAAAA,EAAA,MAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,EAEA,UAAAhB,KAAAgB,EAAA,MAAA,CACA,MAAAQ,EAAAD,EAAAA,EAAA,OAAA,CAAA,EACAE,EAAA,CAAA,KAAA,MAAAzB,CAAA,EAAA,CAAA,EAAA,KAAA,MAAAA,CAAA,EAAA,CAAA,CAAA,GAGAyB,EAAA,CAAA,IAAAD,EAAA,CAAA,GAAAC,EAAA,CAAA,IAAAD,EAAA,CAAA,IACAD,EAAA,KAAAE,CAAA,EAIAF,EAAA,KAAA,CAAA,KAAA,MAAAvB,CAAA,EAAA,CAAA,EAAA,KAAA,MAAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CACA,CAEA,KAAA,UAAA,KAAA,UAAA,OAAA,CACA,CACA,KAAAT,EACA,iBAAAyB,EAAA,iBACA,UAAAA,EAAA,UACA,MAAAC,EACA,OAAAM,EACA,MAAA,KAAA,KAAA,EAAAhC,EAAA,YAAA,KAAA,IAAA,MAAA,EACA,KAAA,KACA,CAAA,CACA,CACA,EAEA,oBAAAF,EAAA,SAGA,GAFA,KAAA,iBAAA,GAEA,CAAA,KAAA,MAAA,OAEA,MAAAsB,EAAAtB,EAAA,IAeA,GAbA,KAAA,SAAA,GACA,KAAA,UAAA,GACA,KAAA,SAAA,GACA,KAAA,MAAA,GACA,KAAA,MAAA,GACA,KAAA,eAAA,GACA,KAAA,YAAA,GACA,KAAA,iBAAA,KACA,KAAA,kBAAA,GACA,KAAA,eAAA,GACA,KAAA,UAAA,GAGA,KAAA,kBAAAsB,EAAA,CACA,KAAA,gBAAA,GACA,MACA,CAEA,KAAA,gBAAAA,EAGA,IAAAe,EAAArC,EAAA,aAAA,SAAA,SAAA,CAAA,EACA,KAAA,SAAAqC,EAAA,KAAA,CAAA,EAAA9J,IAAAF,EAAA,EAAAE,CAAA,CAAA,EAGA,KAAA,YAAA,EAGA,KAAA,UAAA,KAAA,iBAAAyH,CAAA,GAEAhC,GAAAD,EAAAiC,EAAA,WAAA,YAAAjC,EAAA,UAAA,MAAAC,EAAA,SACA,KAAA,SAAAgC,EAAA,SAAA,QACA,IAAAlH,GAAAA,EAAA,CAAA,EACA,KAAA,CAAA,EAAAP,IAAAF,EAAA,EAAA,IAAAE,EAAA,GAAA,CAAA,GAEA,KAAA,MAAA,KAAA,aAAAyH,CAAA,EAGA,KAAA,eAAA,KAAA,UACA,KAAA,eAAA,CACA,EAEA,YAAAA,EAAA,CAEA,GAAAA,EAAA,MAAA,KAAA,CACA,KAAA,MAAA,KAAAA,EAAA,IAAA,EACA,KAAA,aAAAA,EAAA,KACA,MACA,CAEA,GAAAA,EAAA,OAAA,KAAA,CAEA,GAAAA,EAAA,MAAA,KAAA,QAAA,KAAA,CACA,KAAA,MAAA,KAAAA,EAAA,MAAA,IAAA,EACA,KAAA,aAAAA,EAAA,MAAA,KACA,MACA,CAGA,KAAA,MAAAA,EAAA,MAAA,KAEA,QAAAnH,EAAA,EAAAA,EAAAmH,EAAA,MAAA,KAAA,OAAAnH,IAAA,CACA,GAAAmH,EAAA,MAAA,KAAAnH,CAAA,EAAA,UAAA,OAAA,CACA,KAAA,aAAAmH,EAAA,MAAA,KAAAnH,CAAA,EACA,KACA,CACA,KAAA,aAAAmH,EAAA,MAAA,KAAAnH,CAAA,CACA,CACA,CACA,EAEA,aAAAmH,EAAA,CAGA,GAFA,KAAA,YAAAA,CAAA,EAEA,CAAA,KAAA,YAAA,CAAA,KAAA,MAAA,OAAA,MAAA,GAEA,MAAA,QAAA,KAAA,aAAA,IAAA,IACA,KAAA,aAAA,KAAA,CAAA,KAAA,aAAA,IAAA,GAGA,MAAAsC,EAAA,KAAA,aAAA,KAAA,IAAA,CAAApC,EAAA,IAAA,CAIA,MAAAqC,EAAA,CAAArC,EAAA,IAAA,CAAA,CAAA,EACAsC,MAAA,IAEA,QAAA3J,EAAA,EAAAA,EAAAqH,EAAA,IAAA,OAAArH,IAEAqH,EAAA,IAAArH,EAAA,CAAA,EAAA,iBAAA,CAAA,GAAA2J,CAAA,EACAD,EAAA,KAAArC,EAAA,IAAArH,EAAA,CAAA,CAAA,EACA0J,EAAA,KAAArC,EAAA,IAAArH,CAAA,CAAA,EAGAqH,EAAA,IAAArH,CAAA,EAAA,OAAA,UAAAqH,EAAA,IAAArH,CAAA,EAAA,aACA2J,EAAA,IAAAtC,EAAA,IAAArH,CAAA,EAAA,WAAA,EACAqH,EAAA,IAAArH,CAAA,EAAA,OAAA,YAAAqH,EAAA,IAAArH,CAAA,EAAA,aACA2J,EAAA,OAAAtC,EAAA,IAAArH,CAAA,EAAA,WAAA,EAIA,MAAAuD,EAAA8D,EAAA,IACA,OAAAyB,GAAAA,EAAA,OAAAA,EAAA,MAAA,MAAA,EACA,IAAAA,GAAA,CAEAa,MAAAA,EAAAb,EAAA,iBAAA,IAAAL,GAAA,KAAA,eAAAA,CAAA,CAAA,EACAmB,EAAAD,EAAA,OACA,CAAAtE,EAAAwE,IAAAxE,EAAA,YAAAwE,GAAA,YAAAA,EAAA,QAAA,CAAA,EACA,CAAA,EAEA,MAAA,CACA,iBAAAF,EACA,UAAAC,EACA,MAAAd,EAAA,MAAAA,EAAA,MAAA,MAAA,GAAA,EAAA,CAAA,CAAA,CACA,CACA,EASA,MAPA,CACA,UAAAzB,EAAA,WACA,OAAAA,EAAA,QACA,KAAAqC,EACA,KAAAnG,EACA,WAAA,CAAA,CAEA,CACA,EAEA,OAAAkG,EAAA,KAAA,CAAAhK,EAAAC,IAAAF,EAAAC,EAAA,UAAAC,EAAA,SAAA,CAAA,EAGA+J,EAAA,QAAA,CAAApC,EAAA,IAAAA,EAAA,WAAA,CAAA,EAEAoC,CACA,EAEA,iBAAAtC,EAAA,SAEA,GADA,KAAA,eAAA,GACA,GAAAhC,GAAAD,EAAAiC,EAAA,YAAA,YAAAjC,EAAA,WAAA,MAAAC,EAAA,QAAA,MAAA,GAEA,MAAA9B,EAAA8D,EAAA,UAAA,SAAA,KAAA,CAAA1H,EAAAC,IACAF,EAAAC,EAAA,IAAAC,EAAA,GAAA,CAAA,EAEA,GAAA,CACA,UAAA4E,KAAAjB,EAEAiB,EAAA,MAAA,IAAA,KAAA,MAAAA,EAAA,KAAA,EAAA,CAAA,EAAA,KAAA,MAAAA,EAAA,KAAA,EAAA,CAAA,GACAA,EAAA,MAAA,IAAA,KAAA,MAAAA,EAAA,KAAA,EAAA,CAAA,EAAA,KAAA,MAAAA,EAAA,KAAA,EAAA,CAAA,GACAA,EAAA,IAAA,IAAA,KAAA,MAAAA,EAAA,GAAA,EAAA,CAAA,EAAA,KAAA,MAAAA,EAAA,GAAA,EAAA,CAAA,GACAA,EAAA,IAAA,IAAA,KAAA,MAAAA,EAAA,GAAA,EAAA,CAAA,EAAA,KAAA,MAAAA,EAAA,GAAA,EAAA,CAAA,GAEA,KAAA,eAAAA,EAAA,GAAA,EAAAA,OAEA,CAEA,CAEA,OAAAjB,CACA,EAGA,mBAAA,CACA,MAAA3B,EAAA,KAAA,OAAA,OACA,GAAA,CAAAA,EAAA,SAAA,CAAAA,EAAA,UAAA,CACA,QAAA,IAAA,mCAAA,EACA,MACA,CAGA,MAAAoI,EAAA,EAAApI,EAAA,UAAA,YAAA,GAAA,EACAqI,EAAArI,EAAA,UAAA,UAAA,EAAAoI,CAAA,EACAE,EAAAtI,EAAA,UAAA,UAAAoI,CAAA,EAEA,KAAA,QAAA,UAAAC,EACA,KAAA,QAAA,WAAAC,CACA,EAEA,MAAA,eAAA,SAEA,GAAA,KAAA,OAAA,CACA,KAAA,WAAA,OAAA,OAAA,CAAA,EAAA,KAAA,MAAA,EACA,MACA,CAGA,IAAA9E,EAAA,KAAA,aAAA,MAAAA,EAAA,SAAA,UAAAC,EAAA,KAAA,aAAA,MAAAA,EAAA,SAAA,OACA,GAAA,CACA,MAAA8E,EACA,KAAA,WAAA,QAAA,GAAA,EAAA,GACA,KAAA,WACA,KAAA,UAAA,IAAA,KAAA,WAEAC,EAAA,MAAA,KAAA,QAAA,YAAAD,CAAA,EACA,KAAA,WAAAE,GAAA,MAAAD,CAAA,EACA,aACA9D,EAAA,CACA,QAAA,IAAA,QAAA,EAEA,MAAAgE,EAAAhE,EACA,KAAA,WAAA,cAAAgE,EAAA,SAAA,KACAvH,EAAA,OAAA,eAAA,KAAA,WAAA,IAAA,EAEA,MACA,CAIA,MAAAwH,EAAA,KAAA,QAAA,WAAA,UACA,EACA,GAAA,KAAA,QAAA,WAAA,QAAA,UAAA,CAAA,EAIA,CAAA,MAAAC,GAAA,MAAA,KAAA,QAAA,aAAA,KAAA,QAAA,SAAA,EAEA,IAAAC,EAAA,KAAA,QAAA,WAAA,WAAA,WAAA,SAAA,EAEA,GAAAD,EAAA,QAAAC,CAAA,GAAA,GAAA,CACA,MAAAC,EAAAF,EAAA,OAAAG,GAAAA,EAAA,QAAA,SAAA,EAAA,EAAA,EACAD,EAAA,OAAAD,EAAAC,EAAA,CAAA,GAEA,KAAA,QAAA,cAAA,yBACAD,EAAA,GAEA,CAEA,KAAA,WAAA,CACA,QAAAA,EACA,SAAA,KAAA,WACA,MAAAF,EACA,YAAA,GACA,OAAA,KAAA,WAAA,OACA,WAAA,GACA,UAAA,EAAA,EAGA,MAAAK,EAAA,mBACA,KAAA,MAAA,QAAAA,CAAA,EAEA,KAAA,eAAA,CACA,EAEA,MAAA,cAAA,CACA,IAAAC,EAAA,EACAC,EAAA,EACAC,EAAA,EAEA,GAAA,KAAA,WAAA,OACA,OAAA,KAAA,WAAA,QAAA,WACA,KAAA,WAAA,OAAA,KAAA,WAAA,OAAA,MAAA,GAAA,EAAA,IAAA,MAAA,GAEAD,EAAA,KAAA,WAAA,OAAA,CAAA,EACAC,EAAA,KAAA,WAAA,OAAA,CAAA,UACA,CAAA,KAAA,WAAA,OAAA,CAGA,GAFA,KAAA,KAAA,OAAA,QAAA,KAAA,KAAA,EAEA,CAAA,KAAA,KAAA,OAAA,OAEA,MAAAC,EAAA,KAAA,KAAA,OAAA,EAEAC,EAAA,KACA,QAAA/K,EAAA,EAAAA,EAAA8K,EAAA9K,GAAA+K,EACAH,GAAA,KAAA,KAAA5K,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EACA6K,GAAA,KAAA,KAAA7K,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EACA2K,IAGAC,EAAAA,EAAAD,EACAE,EAAAA,EAAAF,CACA,CACAC,GAAAC,GACA,KAAA,OAAA,OAAA,eAAA,CACA,UAAAD,EACA,SAAAC,EACA,KAAA,EACA,QAAA,EACA,MAAA,EACA,KAAA,EAAA,CACA,CAEA,EAEA,MAAA,gBAAA,CACA,GAAA,KAAA,WAAA,KAAA,WAAA,UACA,GAAA,CACA,MAAAG,EAAA,MAAA,KAAA,QAAA,YACA,KAAA,QAAA,UAAA,IAAA,KAAA,WAAA,SAAA,EAEAC,EAAA,MAAAC,GAAA,YAAAF,CAAA,EACAG,EAAAC,GAAAH,CAAA,EACAE,IACA,KAAA,aAAA,sDAAAA,CAAA,WACA/E,EAAA,CACA,QAAA,MAAAA,CAAA,CACA,CAEA,EAEA,YAAAvB,EAAA,CACA,QAAA,IAAA,SAAAA,CAAA,EACAA,GAAA,KAAA,gBAAA,GACAA,GAAA,YAAAA,EAAA,OAAA,SAAA,KAAA,aAAAA,CAAA,GACAA,GAAA,YAAAA,EAAA,OAAA,OAAA,KAAA,WAAAA,CAAA,CACA,EAEA,aAAAA,EAAA,CACA,MAAAwG,EAAA,OAAA,OAAAxG,EAAA,QAAA,EAAA,IAAA6C,GAAAA,EAAA,GAAA,EAEA,KAAA,cAAA,GACA,KAAA,eAAA,GAEA,UAAAL,KAAA,KAAA,MACAgE,EAAA,SAAAhE,EAAA,SAAA,IACA,KAAA,iBAAAA,CAAA,EAGA,KAAA,kBAAA,QAAAoB,GAAA,CACA,KAAA,eAAA,KAAA,KAAA,eAAAA,CAAA,CAAA,CAAA,CACA,EAGA,EAEA,WAAA5D,EAAA,CACAA,GAAA,MAAAA,EAAA,MAAA,KAAA,iBAAAA,GAAA,YAAAA,EAAA,IAAA,CACA,EAEA,iBAAA,CACA,KAAA,eAAA,CACA,EAEA,oBAAA,CAAA,EAEA,MAAA,cAAA,CAGA,MAAAyG,EAAA,MAAA,KAAA,sBAAA,KAAA,WAAA,QAAA,EACA,OAAAA,GAEA,MAAAC,GAAAD,EAAA,CAEA,YAAA,CACA,mBACA,iDACA,6BACA,sCACA,mCACA,CAAA,CACA,GAGA,SAAA,QAAA,KAAA,CAAA7L,EAAAC,IAAAF,EAAAC,EAAA,IAAAC,EAAA,GAAA,CAAA,EAdA,EAkBA,EAEA,MAAA,aAAA,CAGA,GAFA,KAAA,QAAA,cAAA,qBAEA,KAAA,WAAA,QAAA,QAAA,OAAA,EAAA,GAAA,CAEA,MAAAkC,EAAA,GAAA,KAAA,QAAA,SAAA,IAAA,KAAA,WAAA,OAAA,GACA4J,EAAA,MAAA,KAAA,aAAA5J,EAAA,CAAA,CAAA,EAEA,KAAA,WAAA,WAAA,GAAA4J,EAAA,WAGA,KAAA,QAAA,cAAA,8BACA,MAAAC,EAAA,CAAA,EAEA,OAAAD,EAAA,QAAA,QAAA,CAAA3C,EAAA7I,IAAA,CACAyL,EAAA5C,CAAA,EAAA,CACA2C,EAAA,OAAAxL,EAAA,CAAA,EACAwL,EAAA,OAAAxL,EAAA,EAAA,CAAA,EACAwL,EAAA,KAAAxL,EAAA,CAAA,EACAwL,EAAA,KAAAxL,EAAA,EAAA,CAAA,CAAA,CACA,CACA,EACAyL,CAAA,KACA,CAEA,MAAAC,EAAA,MAAA,KAAA,QAAA,YACA,KAAA,QAAA,UAAA,IAAA,KAAA,WAAA,OAAA,EAIA,YAAA,WAAA,WAAA,YAEAA,CACA,CACA,EAEA,MAAA,aAAA9J,EAAA+J,EAAA,CACA,OAAA,IAAA,QAAA,CAAAC,EAAAC,IAAA,CACA,MAAAC,EAAA,IAAAC,GACA,GAAA,CACAD,EAAA,YAAA,CACA,SAAAlK,EACA,WAAA,KAAA,WACA,WAAA+J,CAAA,CACA,EAEAG,EAAA,UAAA1F,GAAA,CAEA,GAAAA,EAAA,KAAA,iBAAA,CACA,IAAA4F,EACA,OAAA,wDAAA,GAAA,aAEA,OAAA,SAAA,SAAAA,CAAA,CAAA,IAAAA,EAAA,QAAAA,CAAA,IAEAF,EAAA,YAAA,CAAA,IAAAE,CAAA,CAAA,EACA,MACA,CAEA,GAAA5F,EAAA,KAAA,OAAA,CACA,KAAA,QAAA,cAAA,GAAAA,EAAA,KAAA,OACA,MACA,CAGA0F,EAAA,UAAA,EAEA1F,EAAA,KAAA,QACA,QAAA,MAAAA,EAAA,KAAA,KAAA,EACAvD,EAAA,OAAA,QAAAuD,EAAA,KAAA,KAAA,EACA,KAAA,QAAA,cAAAA,EAAA,KAAA,MACAyF,EAAAzF,EAAA,KAAA,KAAA,GAEAwF,EAAAxF,EAAA,KAAA,KAAA,CAAA,QAEAgE,EAAA,CACA0B,EAAA,UAAA,EACA,QAAA,MAAA1B,CAAA,EACAyB,EAAAzB,CAAA,CACA,CAAA,CACA,CACA,EAEA,aAAA6B,EAAA,CACA,KAAA,SAAAA,CACA,EAEA,cAAA,CACA,aAAA,QACA,qCACA,KAAA,YAAA,WAAAC,EAAA,SAAAA,EAAA,SAAA,CAEA,EAEA,MAAA,sBAAAC,EAAA,CACA,IAAAC,EAAA,GAAA,KAAA,SAAA,IAAAD,CAAA,GAEA,GAAA,CAEA,GAAAC,EAAA,QAAA,GAAA,EAAA,IAAAA,EAAA,QAAA,GAAA,EAAA,GAAA,CACA,MAAAC,EAAAD,EAAA,UAAA,EAAAA,EAAA,YAAA,GAAA,CAAA,EACAE,EAAAF,EAAA,UAAA,EAAAA,EAAA,YAAA,GAAA,CAAA,EAGA,CAAA,MAAA9B,CAAA,EAAA,MAAA,KAAA,QAAA,aAAAgC,CAAA,EACAC,EAAAC,GAAAlC,EAAA+B,CAAA,EACA,GAAAE,EAAA,QAAA,EAAA,MAAA,MAAA,qBAAAF,CAAA,GAAA,EACA,GAAAE,EAAA,OAAA,EACA,MAAA,MAAA,+BAAAF,CAAA,MAAAE,CAAA,EAAA,EACAH,EAAA,GAAAE,CAAA,IAAAC,EAAA,CAAA,CAAA,EACA,CAEA,IAAAE,EAAA,GAEA,GAAAL,EAAA,SAAA,KAAA,GAAAA,EAAA,SAAA,IAAA,EAAA,CAEA,MAAAnB,EAAA,MADA,MAAA,KAAA,QAAA,YAAAmB,CAAA,GACA,cAEAM,EAAAC,GAAA1B,CAAA,EAEA,OADA,IAAA,YAAA,OAAA,EAAA,OAAAyB,CAAA,CAEA,OACA,CAEA,CAEA,MAAAE,EAAA,iBAAAR,CAAA,GACA,OAAAvJ,EAAA,OAAA,QAAA+J,CAAA,EACA,KAAA,QAAA,cAAAA,EACA,EACA,EAEA,gBAAA,CACA,KAAA,iBAAA,CAAA,KAAA,gBACA,EAEA,WAAAlD,EAAA,CAEA,QAAA1J,EAAA,EAAAA,EAAA,KAAA,MAAA,OAAAA,IACA,KAAA,MAAAA,CAAA,EAAA,UAAA,QAIA0J,EAAA,UAAA,OAEA,KAAA,kBAAA,KAAA,MAAA,QAAAA,CAAA,EAGA,KAAA,cAAA,GAEA,KAAA,eAAA,EACA,KAAA,aAAAA,CACA,CACA,EACA,MAAA,SAAA,CACA7G,EAAA,OAAA,gBAAA,CAAA,KAAA,SAAA,EAEA,KAAA,QAAA,UAAA,KAAA,UACA,KAAA,QAAA,UAAA,KAAA,UAEA,KAAA,YAAA,KAAA,kBAAA,EACA,MAAA,KAAA,gBAEA,MAAA,YAEA,KAAA,SAAA,GACA,KAAA,mBAAA,EAEA,KAAA,QAAA,cAAA,sBAEA,KAAA,SAAA,MAAA,KAAA,aAAA,EAEA,MAAA,KAAA,YACA,KAAA,MAAA,MAAA,KAAA,YAAA,EACA,KAAA,aAAA,EAEA,KAAA,QAAA,cAAA,GAGA,KAAA,SAAA,QAAA,KAAA,oBAAA,KAAA,SAAA,CAAA,CAAA,EAGA,KAAA,MAAA,QAAA,KAAA,iBAAA,KAAA,MAAA,CAAA,CAAA,EACA,EAEA,eAAA,CACA,KAAA,QAAA,UAAA,GAEAA,EAAA,OAAA,gBAAA,EAAA,EACA,KAAA,OAAA,OAAA,gBAAA,EAAA,CACA,CACA,CAAA","x_google_ignoreList":[0,1,2]}