{"version":3,"file":"AggregateOd-d750fd6b.js","sources":["../../src/plugins/aggregate-od/LegendBoxOD.vue","../../src/plugins/aggregate-od/LineFilterSlider.vue","../../src/plugins/aggregate-od/ScaleBoxOD.vue","../../src/plugins/aggregate-od/TimeSlider.vue","../../src/components/ScaleSlider.vue","../../src/plugins/aggregate-od/AggregateOd.vue"],"sourcesContent":["<template lang=\"pug\">\n#legend-container\n  p.title {{$t('legend')}}\n  .legend-item(v-for=\"item in rows\")\n    .legend-col(v-if =\"typeof item === 'string' && item.includes('#')\" :style=\"{'background-color': item}\")\n    .legend-element1(v-if =\"typeof item === 'string' && !item.includes('#') && item == ('↓')\") {{item}}\n    .legend-element2(v-if =\"typeof item === 'string' && !item.includes('#') && item != ('↓')\") {{item}}\n</template>\n\n<script lang=\"ts\">\nconst i18n = {\n  messages: {\n    en: { linewidth: 'Line widths:', legend: 'Legend:' },\n    de: { linewidth: 'Linienbreite:', legend: 'Legende:' },\n  },\n}\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  name: 'LegendBoxOD',\n  i18n,\n  props: {\n    rows: { type: Array, required: true },\n  },\n})\n</script>\n\n<style scoped lang=\"scss\">\n@import '@/styles.scss';\n#legend-container {\n  display: flex;\n  flex-direction: row;\n  color: var(--text);\n  background-color: var(--bgPanel);\n  padding: 0rem 0.5rem;\n  border: solid 1px rgba(161, 160, 160, 0.781);\n  border-radius: 2px;\n}\n\n.legend-item {\n  display: flex;\n  flex-direction: row;\n  font-size: 0.8rem;\n}\n\n.legend-col {\n  width: 1rem;\n  margin-top: 0.6rem;\n  height: 2rem;\n}\n\np.title {\n  color: var(--text);\n  font-size: 0.9rem;\n  text-transform: uppercase;\n  margin-bottom: 1rem;\n  margin-top: 1.1rem;\n  margin-right: 2rem;\n  font-weight: normal;\n}\n.legend-element1 {\n  font-size: 1.2rem;\n  font-weight: bold;\n  margin-right: 0.8rem;\n  margin-left: -1.75rem;\n  margin-top: 0.6rem;\n}\n\n.legend-element2 {\n  font-size: 1.2rem;\n  font-weight: bold;\n  margin-right: 0.8rem;\n  margin-left: -0.8rem;\n  margin-top: 0.6rem;\n}\n</style>\n","<template lang=\"pug\">\nb-slider.time-slider(\n  v-bind=\"options\"\n  v-model=\"sliderValue\"\n  tooltip-always\n)\n  b-slider-tick(v-for=\"tick,i in options.data\" :key=\"i\" :value=\"i\")\n\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  name: 'LineFilterSlider',\n  props: {\n    initialValue: { type: Number, required: true },\n  },\n  data: () => {\n    return {\n      sliderValue: 0,\n      options: {\n        size: 'is-small',\n        indicator: true,\n        min: 0,\n        max: 100,\n        'tooltip-always': true,\n        tooltip: true,\n        data: [\n          0,\n          1,\n          2,\n          5,\n          10,\n          15,\n          20,\n          25,\n          30,\n          35,\n          40,\n          45,\n          50,\n          55,\n          60,\n          65,\n          70,\n          75,\n          80,\n          85,\n          90,\n          95,\n          100,\n          'Alle',\n        ],\n      } as any,\n    }\n  },\n  // VUE LIFECYCLE HOOKS\n  mounted() {\n    this.options['custom-formatter'] = (val: any) => '' + this.options.data[val]\n    this.sliderValue = this.initialValue\n    this.sliderValue = this.options.data.includes(this.initialValue)\n      ? this.options.data.indexOf(this.initialValue)\n      : 0\n    this.options.max = this.options.data.length - 1\n  },\n  watch: {\n    sliderValue(result: any) {\n      this.$emit('change', this.options.data[result])\n    },\n  },\n})\n</script>\n\n<style scoped>\n.time-slider {\n  max-width: 100%;\n  padding: 0 1rem;\n}\n</style>\n","<template lang=\"pug\">\n#scale-container\n  p.title {{$t('linewidth')}}\n    .scale-element {{ \"|↔︎|\" }}\n    .scale-scale {{ `~ ${this.rows[0]} ` + $t('trips') }}\n\n</template>\n\n<script lang=\"ts\">\nconst i18n = {\n  messages: {\n    en: { linewidth: 'Line widths:', legend: 'Legend:', trips: 'trips' },\n    de: { linewidth: 'Linienbreite:', legend: 'Legende:', trips: 'Fahrten' },\n  },\n}\n\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  name: 'LineFilterSlider',\n  i18n,\n  props: {\n    rows: { type: Array, required: true },\n  },\n})\n</script>\n\n<style scoped>\n#scale-container {\n  display: flex;\n  flex-direction: row;\n  color: var(--text);\n  background-color: var(--bgPanel);\n  padding: 0rem 0.5rem;\n  border: solid 1px rgba(161, 160, 160, 0.7);\n  border-radius: 4px;\n}\n\n.scale-item {\n  display: flex;\n  flex-direction: row;\n  margin-bottom: 0.25rem;\n}\n\np.title {\n  color: var(--text);\n  font-size: 0.9rem;\n  text-transform: uppercase;\n  margin-bottom: 1rem;\n  margin-top: 1.1rem;\n  margin-right: 1rem;\n  font-weight: normal;\n}\n\n.scale-element {\n  position: relative;\n  font-weight: normal;\n  margin-right: 1rem;\n  margin-top: 0.7rem;\n}\n\n.scale-scale {\n  position: relative;\n  font-variant: small-caps;\n  font-weight: normal;\n  margin-right: 0.2rem;\n  margin-top: 0.7rem;\n}\n</style>\n","<template lang=\"pug\">\n.time-slider\n  b-slider(:min=\"0\" :max=\"stops.length\" v-model=\"sliderValue\" :tooltip=\"false\")\n    b-slider-tick(v-for=\"stop,i of allStops\" :key=\"stop\" :value=\"i\")\n  p: b {{ stopLabel }}\n\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  name: 'TimeSliderX',\n  components: {},\n  props: {\n    useRange: Boolean,\n    all: String,\n    stops: { type: Array, required: true },\n  },\n  data: () => {\n    return {\n      sliderValue: 0 as any,\n    }\n  },\n  computed: {\n    allStops() {\n      const initial = this.all ? [this.all] : []\n      return [...initial, ...this.stops]\n    },\n\n    stopLabel() {\n      if (Array.isArray(this.sliderValue))\n        return `${this.allStops[this.sliderValue[0]]} : ${this.allStops[this.sliderValue[1]]}`\n      else return this.allStops[this.sliderValue]\n    },\n  },\n  watch: {\n    useRange(useIt: boolean) {\n      if (useIt) {\n        this.sliderValue = [1, this.allStops.length - 1]\n      } else {\n        this.sliderValue = this.sliderValue[0]\n      }\n    },\n\n    sliderValue() {\n      const timePeriod = Array.isArray(this.sliderValue)\n        ? [this.allStops[this.sliderValue[0]], this.allStops[this.sliderValue[1]]]\n        : this.allStops[this.sliderValue]\n      this.$emit('change', timePeriod)\n    },\n  },\n  mounted() {\n    // console.log(777, this.stops)\n  },\n  methods: {},\n})\n</script>\n\n<style scoped lang=\"scss\">\n@import '@/styles.scss';\n\n.time-slider {\n  margin: 0.5rem;\n  margin-top: -0.75rem;\n}\n\np {\n  font-size: 1rem;\n  margin: 0;\n  margin-left: -0.4rem;\n  padding: 0;\n  line-height: 0.5rem;\n}\n</style>\n","<template lang=\"pug\">\nb-slider.time-slider(v-if=\"options.data.length\"\n  v-bind=\"options\"\n  v-model=\"sliderValue\"\n)\n  b-slider-tick(v-for=\"tick,i in options.data\" :key=\"i\" :value=\"i\")\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  name: 'ScaleSlider',\n  props: {\n    stops: { type: Array, required: true },\n    initialValue: { type: Number, required: true },\n  },\n  data: () => {\n    return {\n      sliderValue: 1,\n      options: {\n        // tooltip: false,\n        'tooltip-always': true,\n        min: 0,\n        size: 'is-small',\n        max: 100,\n        indicator: true,\n        data: [] as any[], //this.stops,\n        'custom-formatter': {},\n      },\n    }\n  },\n  mounted() {\n    this.options['custom-formatter'] = (val: any) => '' + this.options.data[val]\n    this.options.max = this.stops.length - 1\n    this.options.data = this.stops\n    this.sliderValue = this.stops.includes(this.initialValue)\n      ? this.stops.indexOf(this.initialValue)\n      : 0\n  },\n  watch: {\n    sliderValue() {\n      this.sliderChangedEvent()\n    },\n  },\n  methods: {\n    sliderChangedEvent() {\n      // console.log(result)\n      this.$emit('change', this.options.data[this.sliderValue])\n    },\n  },\n})\n</script>\n\n<style scoped>\n.time-slider {\n  max-width: 100%;\n  padding: 0 1rem;\n}\n</style>\n","<template lang=\"pug\">\n.mycomponent(:id=\"containerId\")\n\n  zoom-buttons.zoom-buttons(v-if=\"!thumbnail\")\n\n  .map-container\n    .mymap(:id=\"mapId\")\n\n    .status-blob(v-show=\"!thumbnail && loadingText\")\n      p {{ loadingText }}\n\n    .lower-left(v-if=\"!thumbnail && !loadingText\")\n      .subheading {{ $t('lineWidths')}}\n      scale-slider.scale-slider(:stops='scaleValues' :initialValue='currentScale' @change='bounceScaleSlider')\n\n      .subheading {{ $t('hide')}}\n      line-filter-slider.scale-slider(\n        :initialValue=\"lineFilter\"\n        @change='bounceLineFilter')\n\n    .lower-right(v-if=\"!thumbnail && !isMobile\")\n      legend-box.complication(:rows=\"legendRows\")\n      scale-box.complication(:rows=\"scaleRows\")\n\n  .widgets(v-if=\"!thumbnail\" :style=\"{'padding': yamlConfig ? '0 0.5rem 0.5rem 0.5rem' : '0 0'}\")\n\n    //- TIME SLIDER ----\n    .widget-column(v-if=\"this.headers.length > 2\" style=\"min-width: 8rem\")\n      h4.heading {{ $t('time')}}\n      b-checkbox.checkbox(v-model=\"showTimeRange\") {{ $t('duration') }}\n      time-slider.xtime-slider(\n        :useRange=\"showTimeRange\"\n        :stops=\"headers\"\n        :all=\"allTimeBinsLabel\"\n        @change=\"bounceTimeSlider\")\n\n    //- CENTROID CONTROLS\n    .widget-column\n      h4.heading {{ $t('circle')}}\n      b-checkbox.checkbox(v-model=\"showCentroids\")\n        | &nbsp;{{ $t('showCentroids')}}\n      b-checkbox.checkbox(v-model=\"showCentroidLabels\")\n        | &nbsp;{{$t('showNumbers')}}\n\n    //- ORIG/DEST BUTTONS\n    .widget-column(style=\"margin: 0 0 0 auto\")\n      h4.heading {{$t('total')}}\n      b-button.is-small(@click='clickedOrigins' :class='{\"is-link\": isOrigin ,\"is-active\": isOrigin}') {{$t('origins')}}\n      b-button.is-small(@click='clickedDestinations' hint=\"Hide\" :class='{\"is-link\": !isOrigin,\"is-active\": !isOrigin}') {{$t('dest')}}\n\n</template>\n\n<script lang=\"ts\">\nconst i18n = {\n  messages: {\n    en: {\n      legend: 'Legend:',\n      lineWidth: 'Line width:',\n      lineWidths: 'Line widths',\n      hide: 'Hide smaller than',\n      time: 'Time of Day',\n      duration: 'Duration',\n      circle: 'Centroids',\n      showCentroids: 'Show centroids',\n      showNumbers: 'Show totals',\n      total: 'Totals for',\n      origins: 'Origins',\n      dest: 'Destinations',\n    },\n    de: {},\n  },\n}\n\nimport { defineComponent } from 'vue'\nimport type { PropType } from 'vue'\nimport * as shapefile from 'shapefile'\nimport * as turf from '@turf/turf'\nimport { debounce } from 'debounce'\nimport { FeatureCollection, Feature } from 'geojson'\nimport maplibregl, { MapMouseEvent, PositionOptions } from 'maplibre-gl'\nimport nprogress from 'nprogress'\nimport proj4 from 'proj4'\nimport readBlob from 'read-blob'\nimport YAML from 'yaml'\n\nimport { findMatchingGlobInFiles } from '@/js/util'\nimport Coords from '@/js/Coords'\nimport CollapsiblePanel from '@/components/CollapsiblePanel.vue'\nimport LegendBox from './LegendBoxOD.vue'\nimport LineFilterSlider from './LineFilterSlider.vue'\nimport ScaleBox from './ScaleBoxOD.vue'\nimport TimeSlider from './TimeSlider.vue'\nimport ScaleSlider from '@/components/ScaleSlider.vue'\nimport ZoomButtons from '@/components/ZoomButtons.vue'\n\nimport { ColorScheme, FileSystem, FileSystemConfig, Status, VisualizationPlugin } from '@/Globals'\nimport HTTPFileSystem from '@/js/HTTPFileSystem'\n\nimport CSVWorker from './AggregateDatasetStreamer.worker.ts?worker'\n\nimport globalStore from '@/store'\n\ninterface AggOdYaml {\n  shpFile: string\n  dbfFile: string\n  csvFile: string\n  projection: string\n  scaleFactor: number\n  title?: string\n  description?: string\n  idColumn?: string\n  lineWidth?: number\n  lineWidths?: number\n  hideSmallerThan?: number\n  mapIsIndependent?: boolean\n}\n\nconst TOTAL_MSG = 'Alle >>'\nconst FADED = 0.0 // 0.15\n\nconst SCALE_WIDTH = [1, 3, 5, 10, 25, 50, 100, 150, 200, 300, 400, 450, 500, 1000, 5000]\n\nconst INPUTS = {\n  OD_FLOWS: 'O/D Flows (.csv)',\n  SHP_FILE: 'Shapefile .SHP',\n  DBF_FILE: 'Shapefile .DBF',\n}\n\nconst Component = defineComponent({\n  name: 'AggregateOD',\n  i18n,\n  components: {\n    CollapsiblePanel,\n    LegendBox,\n    LineFilterSlider,\n    ScaleBox,\n    ScaleSlider,\n    TimeSlider,\n    ZoomButtons,\n  },\n  props: {\n    root: { type: String, required: true },\n    subfolder: { type: String, required: true },\n    yamlConfig: String,\n    config: Object,\n    thumbnail: Boolean,\n  },\n  data: () => {\n    return {\n      globalState: globalStore.state,\n      isFinishedLoading: false,\n\n      myState: {\n        subfolder: '',\n        yamlConfig: '',\n        thumbnail: false,\n      },\n\n      vizDetails: {\n        csvFile: '',\n        shpFile: '',\n        dbfFile: '',\n        projection: '',\n        scaleFactor: 1,\n        title: '',\n        description: '',\n        mapIsIndependent: false,\n      } as AggOdYaml,\n\n      standaloneYAMLconfig: {\n        csvFile: '',\n        shpFile: '',\n        dbfFile: '',\n        projection: '',\n        scaleFactor: 1,\n        title: '',\n        description: '',\n        mapIsIndependent: false,\n      },\n\n      YAMLrequirementsOD: {\n        shpFile: '',\n        dbfFile: '',\n        csvFile: '',\n        projection: '',\n        scaleFactor: 1,\n      },\n\n      containerId: `c${Math.floor(1e12 * Math.random())}`,\n      mapId: `map-c${Math.floor(1e12 * Math.random())}`,\n\n      centroids: {} as any,\n      centroidSource: {} as any,\n      linkData: {} as any,\n      spiderLinkFeatureCollection: {} as any,\n\n      zoneData: {} as any, // [i][j][timePeriod] where [-1] of each is totals\n      dailyData: {} as any, // [i][j]\n      marginals: {} as any,\n      hoveredStateId: 0 as any,\n\n      rowName: '',\n      colName: '',\n      headers: [] as string[],\n\n      geojson: {} as any,\n      idColumn: '',\n\n      mapIsIndependent: false,\n\n      showTimeRange: false,\n      showCentroids: true,\n      showCentroidLabels: true,\n\n      isOrigin: true,\n      selectedCentroid: 0,\n      maxZonalTotal: 0,\n\n      loadingText: 'Aggregierte Quell-Ziel Muster',\n      mymap: {} as maplibregl.Map,\n      project: {} as any,\n\n      scaleFactor: 1,\n      scaleValues: SCALE_WIDTH,\n      currentScale: SCALE_WIDTH[0],\n      currentTimeBin: TOTAL_MSG,\n      allTimeBinsLabel: TOTAL_MSG,\n\n      lineFilter: 0,\n\n      projection: '',\n      hoverId: null as any,\n\n      _mapExtentXYXY: null as any,\n      _maximum: null as any,\n\n      bounceTimeSlider: {} as any,\n      bounceScaleSlider: {} as any,\n      bounceLineFilter: {} as any,\n      resizer: null as ResizeObserver | null,\n      isMapMoving: false,\n      isDarkMode: false,\n\n      csvWorker: null as Worker | null,\n    }\n  },\n  computed: {\n    fileSystem(): FileSystemConfig {\n      const svnProject: FileSystemConfig[] = this.$store.state.svnProjects.filter(\n        (a: FileSystemConfig) => a.slug === this.root\n      )\n      if (svnProject.length === 0) {\n        console.log('no such project')\n        throw Error\n      }\n      return svnProject[0]\n    },\n\n    fileApi() {\n      return new HTTPFileSystem(this.fileSystem, globalStore)\n    },\n\n    isMobile() {\n      const w = window\n      const d = document\n      const e = d.documentElement\n      const g = d.getElementsByTagName('body')[0]\n      const x = w.innerWidth || e.clientWidth || g.clientWidth\n      const y = w.innerHeight || e.clientHeight || g.clientHeight\n\n      return x < 640\n    },\n\n    legendRows(): any[] {\n      return ['#00aa66', '#880033', '↓', '↑']\n    },\n\n    scaleRows(): any[] {\n      return [\n        Math.min(\n          Math.round((1200 * Math.pow(this.currentScale, -1) + 20) * Math.sqrt(this.scaleFactor)),\n          1000 * this.scaleFactor\n        ),\n      ]\n    },\n  },\n  methods: {\n    setupResizer() {\n      this.resizer = new ResizeObserver(() => {\n        if (this.mymap) this.mymap.resize()\n      })\n\n      const viz = document.getElementById(this.containerId) as HTMLElement\n      this.resizer.observe(viz)\n    },\n\n    configureSettings() {\n      if (this.vizDetails.lineWidths || this.vizDetails.lineWidth) {\n        this.currentScale = this.vizDetails.lineWidth || this.vizDetails.lineWidths || 1\n      }\n      if (this.vizDetails.hideSmallerThan) this.lineFilter = this.vizDetails.hideSmallerThan\n    },\n\n    handleMapMotion() {\n      const mapCamera = {\n        longitude: this.mymap.getCenter().lng,\n        latitude: this.mymap.getCenter().lat,\n        bearing: this.mymap.getBearing(),\n        zoom: this.mymap.getZoom(),\n        pitch: this.mymap.getPitch(),\n      }\n\n      if (!this.mapIsIndependent) this.$store.commit('setMapCamera', mapCamera)\n      if (!this.isMapMoving) this.isMapMoving = true\n    },\n\n    async getVizDetails() {\n      if (this.config) {\n        this.validateYAML()\n        this.vizDetails = Object.assign({}, this.config) as any\n      } else {\n        try {\n          // might be a project config:\n          const filename =\n            this.myState.yamlConfig.indexOf('/') > -1\n              ? this.myState.yamlConfig\n              : this.myState.subfolder + '/' + this.myState.yamlConfig\n\n          const text = await this.fileApi.getFileText(filename)\n          this.standaloneYAMLconfig = Object.assign({}, YAML.parse(text))\n          this.validateYAML()\n          this.setVizDetails()\n        } catch (e) {\n          console.error('' + e)\n        }\n      }\n\n      this.$emit('title', this.vizDetails.title)\n\n      this.scaleFactor = this.vizDetails.scaleFactor\n      this.projection = this.vizDetails.projection\n      this.mapIsIndependent = !!this.vizDetails.mapIsIndependent\n      this.idColumn = this.vizDetails.idColumn ? this.vizDetails.idColumn : 'id'\n\n      nprogress.done()\n    },\n\n    validateYAML() {\n      const hasYaml = new RegExp('.*(yml|yaml)$').test(this.myState.yamlConfig)\n\n      let configuration = {} as any\n\n      if (hasYaml) {\n        configuration = this.standaloneYAMLconfig\n      } else {\n        configuration = this.config\n      }\n\n      for (const key in this.YAMLrequirementsOD) {\n        if (key in configuration === false) {\n          this.$emit('error', {\n            type: Status.ERROR,\n            msg: `${this.yamlConfig}: missing required key: ${key}`,\n            desc: '',\n          })\n        }\n      }\n    },\n\n    setVizDetails() {\n      this.vizDetails = Object.assign({}, this.vizDetails, this.standaloneYAMLconfig)\n\n      const t = this.vizDetails.title ? this.vizDetails.title : 'Aggregate OD'\n      this.$emit('title', t)\n    },\n\n    async findFilenameFromWildcard(path: string) {\n      // get folder\n      let folder =\n        path.indexOf('/') > -1 ? path.substring(0, path.lastIndexOf('/')) : this.subfolder\n\n      // get file path search pattern\n      const { files } = await this.fileApi.getDirectory(folder)\n      let pattern = path.indexOf('/') === -1 ? path : path.substring(path.lastIndexOf('/') + 1)\n      const match = findMatchingGlobInFiles(files, pattern)\n\n      if (match.length === 1) {\n        return `${folder}/${match[0]}`\n      } else {\n        throw Error('File not found: ' + path)\n      }\n    },\n\n    async loadFiles() {\n      try {\n        this.loadingText = 'Dateien laden...'\n\n        const shpFilename = await this.findFilenameFromWildcard(\n          `${this.myState.subfolder}/${this.vizDetails.shpFile}`\n        )\n        const dbfFilename = await this.findFilenameFromWildcard(\n          `${this.myState.subfolder}/${this.vizDetails.dbfFile}`\n        )\n\n        const blob = await this.fileApi.getFileBlob(shpFilename)\n        const shpFile = await readBlob.arraybuffer(blob)\n\n        const blob2 = await this.fileApi.getFileBlob(dbfFilename)\n        const dbfFile = await readBlob.arraybuffer(blob2)\n\n        return { shpFile, dbfFile }\n        //\n      } catch (e) {\n        const error = e as any\n        let msg = error.statusText || '' + error\n        if (error.url) msg += ': ' + error.url\n\n        console.error(msg)\n        this.loadingText = '' + e\n        this.$emit('error', msg)\n        return null\n      }\n    },\n\n    async setupMap() {\n      try {\n        this.mymap = new maplibregl.Map({\n          container: this.mapId,\n          style: globalStore.getters.mapStyle,\n          logoPosition: 'top-left',\n        })\n      } catch (e) {\n        console.error('HUH?')\n        return\n      }\n\n      try {\n        const extent = localStorage.getItem(this.$route.fullPath + '-bounds')\n        if (extent) {\n          const lnglat = JSON.parse(extent)\n\n          const mFac = this.isMobile ? 0 : 1\n          const padding = { top: 50 * mFac, bottom: 50 * mFac, right: 100 * mFac, left: 50 * mFac }\n\n          this.$store.commit('setMapCamera', {\n            longitude: 0.5 * (lnglat[0] + lnglat[2]),\n            latitude: 0.5 * (lnglat[1] + lnglat[3]),\n            zoom: 8,\n            pitch: 0,\n            bearing: 0,\n            jump: true, // initial map\n          })\n        }\n      } catch (e) {\n        // no consequence if json was weird, just drop it\n      }\n\n      this.mymap.on('click', this.handleEmptyClick)\n      // Start doing stuff AFTER the MapBox library has fully initialized\n      this.mymap.on('load', this.mapIsReady)\n      this.mymap.on('move', this.handleMapMotion)\n\n      // clean up display just when we're in thumbnail mode\n      if (this.thumbnail) {\n        let baubles = document.getElementsByClassName(\n          'mapboxgl-ctrl mapboxgl-ctrl-attrib mapboxgl-compact'\n        )\n        for (const elem of baubles) elem.setAttribute('style', 'display: none')\n\n        baubles = document.getElementsByClassName('mapboxgl-ctrl mapboxgl-ctrl-group')\n        for (const elem of baubles) elem.setAttribute('style', 'display: none')\n\n        baubles = document.getElementsByClassName('mapboxgl-ctrl-logo')\n        for (const elem of baubles) elem.setAttribute('style', 'display: none')\n      } else {\n        let baubles = document.getElementsByClassName('mapboxgl-ctrl-logo')\n        for (const elem of baubles) elem.setAttribute('style', 'margin-bottom: 3rem;')\n      }\n    },\n\n    handleEmptyClick(e: any) {\n      if (\n        this.mymap\n          .queryRenderedFeatures(e.point)\n          .filter(feature => feature.source === 'centroids' || feature.source === 'spider-source')\n          .length === 0\n      ) {\n        // didn't click on a centroid: clear the map\n        this.fadeUnselectedLinks(-1)\n        this.selectedCentroid = 0\n        if (this.isMobile) {\n        } // do something\n      }\n    },\n\n    async mapIsReady() {\n      const files = await this.loadFiles()\n\n      if (files) {\n        this.geojson = await this.processShapefile(files)\n        // this is async, setup will continue at finishedLoading() when data is loaded\n        if (this.geojson) this.loadCSVData()\n      }\n\n      nprogress.done()\n    },\n\n    createSpiderLinks() {\n      this.spiderLinkFeatureCollection = { type: 'FeatureCollection', features: [] }\n\n      for (const id of Object.keys(this.linkData)) {\n        const link: any = this.linkData[id]\n\n        if (link.daily <= this.lineFilter) continue\n\n        try {\n          const origCoord = this.centroids[link.orig].geometry.coordinates\n          const destCoord = this.centroids[link.dest].geometry.coordinates\n          const color = origCoord[1] - destCoord[1] > 0 ? '#00aa66' : '#880033'\n          const fade = 0.7\n          const properties: any = {\n            id: id,\n            orig: link.orig || 0,\n            dest: link.dest || 0,\n            daily: link.daily || 0,\n            color,\n            fade,\n          }\n          // Test this\n          properties[TOTAL_MSG] = link.daily\n          link.values.forEach((value: number, i: number) => {\n            properties[this.headers[i]] = value ?? 0\n          })\n\n          const feature: any = {\n            type: 'Feature',\n            properties,\n            geometry: {\n              type: 'LineString',\n              coordinates: [origCoord, destCoord],\n            },\n          }\n          this.spiderLinkFeatureCollection.features.push(feature)\n        } catch (e) {\n          // some dests aren't on map: z.b. 'other'\n        }\n      }\n      // console.log(555, this.currentTimeBin, {\n      //   SPIDERLINKFEATURECOLLECTION: this.spiderLinkFeatureCollection,\n      // })\n    },\n\n    updateSpiderLinks() {\n      this.createSpiderLinks()\n\n      // avoiding mapbox typescript bug:\n      if (this.selectedCentroid) {\n        this.fadeUnselectedLinks(this.selectedCentroid)\n      } else {\n        const tsMap = this.mymap as any\n        tsMap.getSource('spider-source').setData(this.spiderLinkFeatureCollection)\n      }\n    },\n\n    buildSpiderLinks() {\n      if (!this.mymap.getSource('spider-source')) {\n        this.createSpiderLinks()\n        // console.log({ spiders: this.spiderLinkFeatureCollection })\n        this.mymap.addSource('spider-source', {\n          data: this.spiderLinkFeatureCollection,\n          type: 'geojson',\n        } as any)\n      }\n\n      if (this.mymap.getLayer('spider-layer')) this.mymap.removeLayer('spider-layer')\n      this.mymap.addLayer(\n        {\n          id: 'spider-layer',\n          source: 'spider-source',\n          type: 'line',\n          paint: {\n            'line-color': ['get', 'color'],\n            'line-width': ['*', (1 / 500) * this.scaleFactor, ['get', 'daily']],\n            'line-offset': ['*', 0.5, ['get', 'daily']],\n            'line-opacity': ['get', 'fade'],\n          },\n          filter: ['>', ['get', this.currentTimeBin], 0],\n        },\n        'centroid-layer'\n      )\n\n      this.changedScale(this.currentScale)\n\n      const parent = this\n      this.mymap.on('click', 'spider-layer', function (e: maplibregl.MapMouseEvent) {\n        parent.clickedOnSpiderLink(e)\n      })\n\n      // turn \"hover cursor\" into a pointer, so user knows they can click.\n      this.mymap.on('mousemove', 'spider-layer', function (e: maplibregl.MapMouseEvent) {\n        parent.mymap.getCanvas().style.cursor = e ? 'pointer' : 'grab'\n      })\n\n      // and back to normal when they mouse away\n      this.mymap.on('mouseleave', 'spider-layer', function () {\n        parent.mymap.getCanvas().style.cursor = 'grab'\n      })\n    },\n\n    clickedOrigins() {\n      this.isOrigin = true\n      this.updateCentroidLabels()\n\n      this.convertRegionColors(this.geojson)\n\n      // avoiding mapbox typescript bug:\n      const tsMap = this.mymap as any\n      tsMap.getSource('shpsource').setData(this.geojson)\n    },\n\n    clickedDestinations() {\n      this.isOrigin = false\n      this.updateCentroidLabels()\n\n      this.convertRegionColors(this.geojson)\n\n      // avoiding mapbox typescript bug:\n      const tsMap = this.mymap as any\n      tsMap.getSource('shpsource').setData(this.geojson)\n    },\n\n    updateCentroidLabels() {\n      const labels = this.isOrigin ? '{dailyFrom}' : '{dailyTo}'\n      const radiusField = this.isOrigin ? 'widthFrom' : 'widthTo'\n\n      if (this.mymap.getLayer('centroid-layer')) this.mymap.removeLayer('centroid-layer')\n      if (this.mymap.getLayer('centroid-label-layer'))\n        this.mymap.removeLayer('centroid-label-layer')\n\n      if (this.showCentroids) {\n        this.mymap.addLayer({\n          layout: { visibility: this.thumbnail ? 'none' : 'visible' },\n          id: 'centroid-layer',\n          source: 'centroids',\n          type: 'circle',\n          paint: {\n            'circle-color': '#ec0',\n            'circle-radius': ['get', radiusField],\n            'circle-stroke-width': 2,\n            'circle-stroke-color': 'white',\n          },\n          filter: ['>', ['get', this.isOrigin ? 'dailyFrom' : 'dailyTo'], 0],\n        })\n      }\n\n      if (this.showCentroidLabels) {\n        this.mymap.addLayer({\n          id: 'centroid-label-layer',\n          source: 'centroids',\n          type: 'symbol',\n          layout: {\n            'text-field': labels,\n            'text-size': 11,\n          },\n          paint: this.showCentroids ? {} : { 'text-halo-color': 'white', 'text-halo-width': 2 },\n          filter: ['>', ['get', this.isOrigin ? 'dailyFrom' : 'dailyTo'], 0],\n        })\n      }\n    },\n\n    unselectAllCentroids() {\n      this.fadeUnselectedLinks(-1)\n      this.selectedCentroid = 0\n    },\n\n    clickedOnCentroid(e: any) {\n      e.originalEvent.stopPropagating = true\n\n      const centroid = e.features[0].properties\n      // console.log('CLICK!', centroid, this.selectedCentroid, centroid.id === this.selectedCentroid)\n\n      const id = centroid.id\n\n      // a second click on a centroid UNselects it.\n      if (id === this.selectedCentroid) {\n        this.unselectAllCentroids()\n        return\n      }\n\n      this.selectedCentroid = id\n      this.fadeUnselectedLinks(id)\n    },\n\n    fadeUnselectedLinks(id: any) {\n      const tsMap = this.mymap as any\n\n      for (const feature of this.spiderLinkFeatureCollection.features) {\n        const endpoints = feature.properties.id.split(':')\n        let fade = endpoints[0] === String(id) || endpoints[1] === String(id) ? 0.7 : FADED\n        if (id === -1) fade = 0.7\n        feature.properties.fade = fade\n      }\n      tsMap.getSource('spider-source').setData(this.spiderLinkFeatureCollection)\n    },\n\n    clickedOnSpiderLink(e: any) {\n      if (e.originalEvent.stopPropagating) return\n\n      // console.log({ CLICK: e })\n\n      const props = e.features[0].properties\n      // console.log(props)\n\n      const trips = Math.round(10000 * props.daily * this.scaleFactor) / 10000\n      let revTrips = 0\n      const reverseDir = '' + props.dest + ':' + props.orig\n\n      if (this.linkData[reverseDir])\n        revTrips = Math.round(10000 * this.linkData[reverseDir].daily * this.scaleFactor) / 10000\n\n      const totalTrips = trips + revTrips\n\n      let html = `<h1><b>${totalTrips} Bidirectional Trip${totalTrips !== 1 ? 's' : ''}</b></h1>`\n      html += `<p style=\"width: max-content\">_________________________</p>`\n      html += `<p style=\"width: max-content\">${trips} trip${\n        trips !== 1 ? 's' : ''\n      } // ${revTrips} reverse trip${revTrips !== 1 ? 's' : ''}</p>`\n\n      new maplibregl.Popup({ closeOnClick: true })\n        .setLngLat(e.lngLat)\n        .setHTML(html)\n        .addTo(this.mymap)\n    },\n\n    convertRegionColors(geojson: FeatureCollection) {\n      for (const feature of geojson.features) {\n        if (!feature.properties) continue\n\n        const daily = this.isOrigin ? feature.properties.dailyFrom : feature.properties.dailyTo\n        const ratio = daily / this.maxZonalTotal\n\n        let blue = 128 + 127 * (1.0 - ratio)\n        if (!blue) blue = 255\n\n        feature.properties.blue = blue\n      }\n    },\n\n    handleCentroidsForTimeOfDayChange(timePeriod: any) {\n      const centroids: FeatureCollection = { type: 'FeatureCollection', features: [] }\n\n      for (const feature of this.geojson.features) {\n        const centroid: any = turf.centerOfMass(feature as any)\n\n        centroid.properties.id = feature.id\n\n        const values = this.calculateCentroidValuesForZone(timePeriod, feature)\n\n        centroid.properties.dailyFrom = Math.round(10000 * values.from * this.scaleFactor) / 10000\n        centroid.properties.dailyTo = Math.round(10000 * values.to * this.scaleFactor) / 10000\n\n        let digits = Math.log10(centroid.properties.dailyFrom)\n        centroid.properties.widthFrom = 6 + digits * 3.5\n        digits = Math.log10(centroid.properties.dailyTo)\n        centroid.properties.widthTo = 6 + digits * 3.5\n\n        if (!feature.properties) feature.properties = {}\n\n        feature.properties.dailyFrom = values.from\n        feature.properties.dailyTo = values.to\n\n        if (centroid.properties.dailyFrom + centroid.properties.dailyTo > 0) {\n          centroids.features.push(centroid)\n          if (feature.properties) this.centroids[feature.properties[this.idColumn]] = centroid\n        }\n      }\n\n      this.centroidSource = centroids\n\n      const tsMap = this.mymap as any\n      tsMap.getSource('centroids').setData(this.centroidSource)\n      this.updateCentroidLabels()\n    },\n\n    calculateCentroidValuesForZone(timePeriod: any, feature: any) {\n      let from = 0\n      let to = 0\n\n      // daily\n      if (timePeriod === 'Alle >>') {\n        to = feature.properties.dailyTo\n        from = feature.properties.dailyFrom\n        return { from, to }\n      }\n\n      const fromMarginal = this.marginals.from[feature.id]\n      const toMarginal = this.marginals.to[feature.id]\n\n      // time range\n      if (Array.isArray(timePeriod)) {\n        let hourFrom = this.headers.indexOf(timePeriod[0]) - 1\n        if (hourFrom < 0) hourFrom = 0\n\n        const hourTo = this.headers.indexOf(timePeriod[1]) - 1\n\n        for (let i = hourFrom; i <= hourTo; i++) {\n          from += fromMarginal ? Math.round(fromMarginal[i]) : 0\n          to += toMarginal ? Math.round(toMarginal[i]) : 0\n        }\n        return { from, to }\n      }\n\n      // one time period\n      const hour = this.headers.indexOf(timePeriod) - 1\n\n      from = fromMarginal ? Math.round(fromMarginal[hour]) : 0\n      to = toMarginal ? Math.round(toMarginal[hour]) : 0\n\n      return { from, to }\n    },\n\n    buildCentroids(geojson: FeatureCollection) {\n      const centroids: FeatureCollection = { type: 'FeatureCollection', features: [] }\n\n      for (const feature of geojson.features) {\n        if (!feature.id) continue\n\n        const centroid: any = turf.centerOfMass(feature as any)\n        centroid.properties.id = feature.id\n        centroid.id = feature.id\n\n        let dailyFrom = Math.round(this.marginals.rowTotal[feature.id])\n        let dailyTo = Math.round(this.marginals.colTotal[feature.id])\n\n        if (!dailyFrom) dailyFrom = 0\n        if (!dailyTo) dailyTo = 0\n\n        centroid.properties.dailyFrom = dailyFrom * this.scaleFactor\n        centroid.properties.dailyTo = dailyTo * this.scaleFactor\n\n        let digits = Math.log10(centroid.properties.dailyFrom)\n        centroid.properties.widthFrom = 6 + digits * 3.5\n        digits = Math.log10(centroid.properties.dailyTo)\n        centroid.properties.widthTo = 6 + digits * 3.5\n\n        if (dailyFrom) this.maxZonalTotal = Math.max(this.maxZonalTotal, dailyFrom)\n        if (dailyTo) this.maxZonalTotal = Math.max(this.maxZonalTotal, dailyTo)\n\n        if (!feature.properties) feature.properties = {}\n        feature.properties.dailyFrom = dailyFrom\n        feature.properties.dailyTo = dailyTo\n\n        if (centroid.properties.dailyFrom + centroid.properties.dailyTo > 0) {\n          centroids.features.push(centroid)\n          if (feature.properties) this.centroids[feature.id] = centroid\n          this.updateMapExtent(centroid.geometry.coordinates)\n        }\n      }\n\n      this.centroidSource = centroids\n\n      if (!this.mymap.getSource('centroids')) {\n        this.mymap.addSource('centroids', {\n          data: this.centroidSource,\n          type: 'geojson',\n        } as any)\n      }\n      this.updateCentroidLabels()\n\n      this.mymap.on('click', 'centroid-layer', (e: maplibregl.MapMouseEvent) => {\n        this.clickedOnCentroid(e)\n      })\n\n      // turn \"hover cursor\" into a pointer, so user knows they can click.\n      this.mymap.on('mousemove', 'centroid-layer', (e: maplibregl.MapMouseEvent) => {\n        this.mymap.getCanvas().style.cursor = e ? 'pointer' : 'grab'\n      })\n\n      // and back to normal when they mouse away\n      this.mymap.on('mouseleave', 'centroid-layer', () => {\n        this.mymap.getCanvas().style.cursor = 'grab'\n      })\n    },\n\n    setMapExtent() {\n      localStorage.setItem(this.$route.fullPath + '-bounds', JSON.stringify(this._mapExtentXYXY))\n\n      const options = this.thumbnail\n        ? { animate: false }\n        : {\n            padding: { top: 25, bottom: 25, right: 100, left: 100 },\n            animate: false,\n          }\n      this.mymap.fitBounds(this._mapExtentXYXY, options)\n    },\n\n    setupKeyListeners() {\n      window.addEventListener('keyup', event => {\n        if (event.keyCode === 27) {\n          // ESC\n          this.pressedEscape()\n        }\n      })\n      window.addEventListener('keydown', event => {\n        if (event.keyCode === 38) {\n          // UP\n          this.pressedArrowKey(-1)\n        }\n        if (event.keyCode === 40) {\n          // DOWN\n          this.pressedArrowKey(+1)\n        }\n      })\n    },\n\n    // To display only the centroids whose dailyTo and dailyFrom values are not\n    // both 0, the objects get the property 'isVisible'. When adding the geojson\n    // data to the map, it is filtered by this attribute.\n    processGeojson() {\n      for (const feature of this.geojson.features) {\n        const data = feature.properties\n        if (data.dailyFrom !== 0 || data.dailyTo !== 0) {\n          feature.properties.isVisible = true\n        } else {\n          feature.properties.isVisible = false\n        }\n      }\n    },\n\n    async processShapefile(files: any) {\n      this.loadingText = 'Verkehrsnetz bauarbeiten...'\n      const geojson = await shapefile.read(files.shpFile, files.dbfFile)\n\n      // if we have lots of features, then we should filter the LINES for performance\n      if (geojson.features.length > 150) this.lineFilter = 10\n\n      this.loadingText = 'Koordinaten berechnen...'\n\n      for (const feature of geojson.features) {\n        const properties = feature.properties as any\n\n        // 'id' column used for lookup, unless idColumn is set in YAML\n        if (!this.idColumn && properties) this.idColumn = Object.keys(properties)[0]\n\n        if (!(this.idColumn in properties)) {\n          this.$emit('error', `Shapefile does not contain ID column \"${this.idColumn}\"`)\n          return\n        }\n\n        // Save id somewhere helpful\n        if (feature.properties) feature.id = feature.properties[this.idColumn]\n\n        try {\n          if (feature.geometry.type === 'MultiPolygon') {\n            this.convertMultiPolygonCoordinatesToWGS84(feature)\n          } else {\n            this.convertPolygonCoordinatesToWGS84(feature)\n          }\n        } catch (e) {\n          console.error('ERR with feature: ' + feature)\n          console.error(e)\n        }\n      }\n      return geojson\n    },\n\n    convertPolygonCoordinatesToWGS84(polygon: any) {\n      for (const origCoords of polygon.geometry.coordinates) {\n        const newCoords: any = []\n        for (const p of origCoords) {\n          const lnglat = Coords.toLngLat(this.projection, p) as any\n          newCoords.push(lnglat)\n        }\n\n        // replace existing coords\n        origCoords.length = 0\n        origCoords.push(...newCoords)\n      }\n    },\n\n    origConvertMultiPolygonCoordinatesToWGS84(multipolygon: any) {\n      for (const origCoords of multipolygon.geometry.coordinates) {\n        const coordinates = origCoords[0] // multipolygons have an extra array[0] added\n\n        const newCoords: any = []\n        for (const p of coordinates) {\n          const lnglat = proj4(this.projection, 'WGS84', p) as any\n          newCoords.push(lnglat)\n        }\n\n        origCoords[0] = newCoords\n      }\n    },\n\n    convertMultiPolygonCoordinatesToWGS84(multipolygon: any) {\n      multipolygon.geometry.coordinates = this.recurseWGS84(multipolygon.geometry.coordinates)\n    },\n\n    recurseWGS84(coords: any[]): any {\n      const newCoords = []\n\n      for (let coordArray of coords) {\n        if (Array.isArray(coordArray[0])) {\n          newCoords.push(this.recurseWGS84(coordArray))\n        } else {\n          newCoords.push(proj4(this.projection, 'WGS84', coordArray))\n        }\n      }\n      return newCoords\n    },\n\n    async getDailyDataSummary() {\n      const rowTotal: any = {}\n      const colTotal: any = {}\n      const fromCentroid: any = {}\n      const toCentroid: any = {}\n\n      for (const row of Object.keys(this.zoneData)) {\n        // store number of time periods (no totals here)\n        fromCentroid[row] = Array(this.headers.length - 1).fill(0)\n\n        for (const col of Object.keys(this.zoneData[row])) {\n          // daily totals\n          if (!rowTotal[row]) rowTotal[row] = 0\n          if (!colTotal[col]) colTotal[col] = 0\n\n          if (this.dailyData[row][col]) {\n            rowTotal[row] += this.dailyData[row][col]\n            colTotal[col] += this.dailyData[row][col]\n          }\n\n          if (!toCentroid[col]) toCentroid[col] = Array(this.headers.length - 1).fill(0)\n\n          // time-of-day details\n          for (let i = 0; i < this.headers.length - 1; i++) {\n            // number of time periods\n            if (this.zoneData[row][col][i]) {\n              fromCentroid[row][i] += this.zoneData[row][col][i]\n              toCentroid[col][i] += this.zoneData[row][col][i]\n            }\n          }\n        }\n      }\n\n      return { rowTotal, colTotal, from: fromCentroid, to: toCentroid }\n    },\n\n    async loadCSVData() {\n      this.loadingText = 'Load CSV data...'\n\n      let csvFilename = ''\n      try {\n        csvFilename = await this.findFilenameFromWildcard(\n          `${this.myState.subfolder}/${this.vizDetails.csvFile}`\n        )\n      } catch (e) {\n        this.$store.commit(\n          'error',\n          `Error loading ${this.myState.subfolder}/${this.vizDetails.csvFile}`\n        )\n        return\n      }\n\n      this.csvWorker = new CSVWorker()\n      this.csvWorker.onmessage = (event: MessageEvent) => {\n        const message = event.data\n        if (message.status) {\n          this.loadingText = message.status\n        } else if (message.error) {\n          this.csvWorker?.terminate()\n          this.loadingText = message.error\n          this.$emit('error', {\n            type: Status.ERROR,\n            msg: `Aggr.OD: Error loading \"${this.myState.subfolder}/${this.vizDetails.csvFile}\"`,\n            desc: `Check the path and filename`,\n          })\n        } else if (message.finished) {\n          this.csvWorker?.terminate()\n          this.finishedLoadingData(message)\n        }\n      }\n\n      this.csvWorker.postMessage({ fileSystem: this.fileSystem, filePath: csvFilename })\n    },\n\n    async finishedLoadingData(message: any) {\n      console.log(222, 'done') // message)\n      this.loadingText = 'Building diagram...'\n      this.isFinishedLoading = true\n      await this.$nextTick()\n      this.rowName = message.rowName\n      this.colName = message.colName\n      this.headers = message.headers\n      this.dailyData = message.dailyZoneData\n      this.zoneData = message.zoneData\n      this.linkData = message.dailyLinkData\n\n      this.marginals = await this.getDailyDataSummary()\n      this.buildCentroids(this.geojson)\n      this.convertRegionColors(this.geojson)\n      this.addGeojsonToMap(this.geojson)\n      this.setMapExtent()\n      this.buildSpiderLinks()\n      this.setupKeyListeners()\n      this.loadingText = ''\n    },\n\n    updateMapExtent(coordinates: any) {\n      this._mapExtentXYXY[0] = Math.min(this._mapExtentXYXY[0], coordinates[0])\n      this._mapExtentXYXY[1] = Math.min(this._mapExtentXYXY[1], coordinates[1])\n      this._mapExtentXYXY[2] = Math.max(this._mapExtentXYXY[2], coordinates[0])\n      this._mapExtentXYXY[3] = Math.max(this._mapExtentXYXY[3], coordinates[1])\n    },\n\n    addGeojsonToMap(geojson: any) {\n      this.processGeojson()\n      this.addGeojsonLayers(geojson)\n      this.addNeighborhoodHoverEffects()\n    },\n\n    addGeojsonLayers(geojson: any) {\n      if (!this.mymap.getSource('shpsource')) {\n        this.mymap.addSource('shpsource', {\n          data: geojson,\n          type: 'geojson',\n        } as any)\n      }\n\n      if (this.mymap.getLayer('shplayer-fill')) this.mymap.removeLayer('shplayer-fill')\n      this.mymap.addLayer(\n        {\n          id: 'shplayer-fill',\n          source: 'shpsource',\n          type: 'fill',\n          paint: {\n            'fill-color': ['rgb', ['get', 'blue'], ['get', 'blue'], 255],\n            'fill-opacity': 0.5,\n          },\n        },\n        'water'\n      )\n\n      if (this.mymap.getLayer('shplayer-border')) this.mymap.removeLayer('shplayer-border')\n      this.mymap.addLayer(\n        {\n          id: 'shplayer-border',\n          source: 'shpsource',\n          type: 'line',\n          paint: {\n            'line-color': '#66f',\n            'line-opacity': 0.5,\n            'line-width': ['case', ['boolean', ['feature-state', 'hover'], false], 3, 1],\n          },\n          filter: ['==', 'isVisible', true],\n        },\n        'centroid-layer'\n      )\n    },\n\n    addNeighborhoodHoverEffects() {\n      const parent = this\n      this.mymap.on('mousemove', 'shplayer-fill', function (e: any) {\n        // typescript definitions and mapbox-gl are out of sync at the moment :-(\n        // so setFeatureState is missing\n        const tsMap = parent.mymap as any\n        if (e.features.length > 0) {\n          if (parent.hoveredStateId) {\n            tsMap.setFeatureState(\n              { source: 'shpsource', id: parent.hoveredStateId },\n              { hover: false }\n            )\n          }\n          parent.hoveredStateId = e.features[0].properties[parent.idColumn]\n          tsMap.setFeatureState({ source: 'shpsource', id: parent.hoveredStateId }, { hover: true })\n        }\n      })\n\n      // When the mouse leaves the state-fill layer, update the feature state of the\n      // previously hovered feature.\n      this.mymap.on('mouseleave', 'shplayer-fill', function () {\n        const tsMap = parent.mymap as any\n        if (parent.hoveredStateId) {\n          tsMap.setFeatureState(\n            { source: 'shpsource', id: parent.hoveredStateId },\n            { hover: false }\n          )\n        }\n        parent.hoveredStateId = null\n      })\n    },\n\n    offsetLineByMeters(line: any, metersToTheRight: number) {\n      try {\n        const offsetLine = turf.lineOffset(line, metersToTheRight, { units: 'meters' })\n        return offsetLine\n      } catch (e) {\n        // offset can fail if points are exactly on top of each other; ignore.\n      }\n      return line\n    },\n\n    pressedEscape() {\n      this.unselectAllCentroids()\n    },\n\n    pressedArrowKey(delta: number) {},\n\n    changedTimeSlider(value: any) {\n      this.currentTimeBin = value\n\n      const widthFactor = (this.currentScale / 500) * this.scaleFactor\n\n      if (this.showTimeRange == false) {\n        this.mymap.setPaintProperty('spider-layer', 'line-width', [\n          '*',\n          widthFactor,\n          ['get', value],\n        ])\n        this.mymap.setPaintProperty('spider-layer', 'line-offset', [\n          '*',\n          0.5 * widthFactor,\n          ['get', value],\n        ])\n      } else {\n        const sumElements: any = ['+']\n\n        // build the summation expressions: e.g. ['+', ['get', '1'], ['get', '2']]\n        let include = false\n        for (const header of this.headers) {\n          if (header === value[0]) include = true\n\n          // don't double-count the total\n          if (header === TOTAL_MSG) continue\n\n          if (include) sumElements.push(['get', header])\n\n          if (header === value[1]) include = false\n        }\n\n        this.mymap.setPaintProperty('spider-layer', 'line-width', ['*', widthFactor, sumElements])\n        this.mymap.setPaintProperty('spider-layer', 'line-offset', [\n          '*',\n          0.5 * widthFactor,\n          sumElements,\n        ])\n      }\n\n      this.handleCentroidsForTimeOfDayChange(value)\n    },\n\n    changedScale(value: any) {\n      if (!this.isFinishedLoading) return\n\n      // console.log({ slider: value, timebin: this.currentTimeBin })\n      this.currentScale = value\n      this.changedTimeSlider(this.currentTimeBin)\n    },\n\n    changedLineFilter(value: any) {\n      if (value === 'Alle') this.lineFilter = Infinity\n      else this.lineFilter = value\n\n      this.updateSpiderLinks()\n    },\n  },\n  watch: {\n    'globalState.viewState'(value: any) {\n      if (this.mapIsIndependent) return\n      if (!this.mymap || this.isMapMoving || this.thumbnail) {\n        this.isMapMoving = false\n        return\n      }\n\n      const { bearing, longitude, latitude, zoom, pitch } = value\n      // sometimes closing a view returns a null map, ignore it!\n      if (!zoom) return\n\n      try {\n        this.mymap.off('move', this.handleMapMotion)\n\n        this.mymap.jumpTo({\n          bearing,\n          zoom,\n          center: [longitude, latitude],\n          pitch,\n        })\n        // back on again\n        this.mymap.on('move', this.handleMapMotion)\n      } catch (e) {\n        // oh well\n      }\n    },\n\n    '$store.state.colorScheme'() {\n      this.isDarkMode = this.$store.state.colorScheme === ColorScheme.DarkMode\n      if (!this.mymap) return\n\n      this.mymap.setStyle(globalStore.getters.mapStyle)\n\n      this.mymap.on('style.load', () => {\n        this.buildCentroids(this.geojson)\n        this.buildSpiderLinks()\n        this.addGeojsonToMap(this.geojson)\n        // this.setupKeyListeners()\n      })\n    },\n\n    '$store.state.resizeEvents'() {\n      if (this.mymap) this.mymap.resize()\n    },\n\n    showTimeRange() {\n      // console.log(this.showTimeRange)\n    },\n\n    showCentroids() {\n      this.updateCentroidLabels()\n    },\n\n    showCentroidLabels() {\n      this.updateCentroidLabels()\n    },\n  },\n  async created() {\n    this._mapExtentXYXY = [180, 90, -180, -90]\n    this._maximum = 0\n  },\n  async mounted() {\n    globalStore.commit('setFullScreen', !this.thumbnail)\n    this.isDarkMode = this.$store.state.colorScheme === ColorScheme.DarkMode\n\n    this.bounceTimeSlider = debounce(this.changedTimeSlider, 100)\n    this.bounceScaleSlider = debounce(this.changedScale, 50)\n    this.bounceLineFilter = debounce(this.changedLineFilter, 250)\n\n    this.myState.thumbnail = this.thumbnail\n    this.myState.yamlConfig = this.yamlConfig || ''\n    this.myState.subfolder = this.subfolder\n\n    await this.getVizDetails()\n\n    if (this.thumbnail) return\n\n    this.setupMap()\n    this.configureSettings()\n    this.setupResizer()\n  },\n\n  beforeDestroy() {\n    if (this.csvWorker) this.csvWorker.terminate()\n  },\n\n  destroyed() {\n    globalStore.commit('setFullScreen', false)\n  },\n})\n\nexport default Component\n</script>\n\n<style scoped lang=\"scss\">\n@import '@/styles.scss';\n\nh3 {\n  margin: 0px 0px;\n}\n\nh4 {\n  margin-left: 3px;\n}\n\n.mycomponent {\n  // position: absolute;\n  display: grid;\n  grid-template-columns: auto 1fr;\n  grid-template-rows: 1fr auto;\n  // position: relative;\n}\n\n.status-blob {\n  position: absolute;\n  bottom: 0.5rem;\n  left: 0.5rem;\n  background-color: white;\n  padding: 0.75rem 1.5rem;\n  z-index: 5;\n  filter: $filterShadow;\n  font-size: 1.2rem;\n}\n\n.map-container {\n  height: 100%;\n  min-height: $thumbnailHeight;\n  // background-color: #eee;\n  grid-column: 1 / 3;\n  grid-row: 1 / 3;\n  display: flex;\n  flex-direction: column;\n  position: relative;\n}\n\n.mymap {\n  flex: 1;\n}\n\n.mytitle {\n  margin-left: 10px;\n  color: var(--text);\n}\n\n.details {\n  font-size: 12px;\n  margin-bottom: auto;\n  margin-top: auto;\n}\n\n.info-header {\n  padding: 0.5rem 0rem;\n}\n\n.widgets {\n  color: var(--text);\n  display: flex;\n  flex-direction: row;\n  user-select: none;\n  background-color: var(--bgMapPanel);\n  grid-column: 1 / 3;\n}\n\n.widget-column {\n  margin-right: 1rem;\n  display: flex;\n  flex-direction: column;\n}\n\n.status-blob p {\n  color: #555;\n}\n\n.lower-right {\n  position: absolute;\n  bottom: 2rem;\n  right: 0.5rem;\n  display: flex;\n  z-index: 1;\n}\n\n.lower-left {\n  width: 10rem;\n  position: absolute;\n  left: 5px;\n  bottom: 2rem;\n  right: 0.5rem;\n  display: flex;\n  flex-direction: column;\n  z-index: 1;\n  background-color: var(--bgPanel);\n  opacity: 0.9;\n  filter: $filterShadow;\n  border: solid 1px rgba(161, 160, 160, 0.781);\n  border-radius: 2px;\n  padding-bottom: 0.25rem;\n}\n\n.complication {\n  margin: 0rem 0rem 0rem 0.25rem;\n}\n\n.widget-column button {\n  // flex-grow: 1;\n  margin: 1px 0px;\n}\n\n.heading {\n  font-weight: bold;\n  text-align: left;\n  margin-top: 0.5rem;\n}\n\n.subheading {\n  text-align: left;\n  font-size: 0.9rem;\n  line-height: 1rem;\n  margin: 0.25rem 0 0rem 0.5rem;\n}\n\n.description {\n  margin-top: 0rem;\n  padding: 0rem 0.25rem;\n}\n\n.hide-button {\n  grid-column: 1/2;\n  grid-row: 2/3;\n  margin: auto auto 0.5rem 16.5rem;\n  z-index: 20;\n}\n\n.hide-toggle-button {\n  margin-left: 0.25rem;\n}\n\n.left-panel {\n  z-index: 2;\n  position: absolute;\n  top: 0rem;\n  left: 0;\n  display: flex;\n  flex-direction: row;\n  pointer-events: auto;\n  max-height: 50%;\n  max-width: 50%;\n  width: 18rem;\n}\n\n.mapboxgl-popup-content {\n  padding: 0px 20px 0px 0px;\n  opacity: 0.95;\n  box-shadow: 0 0 3px #00000080;\n}\n\n.white-box {\n  padding: 0.5rem 0.25rem 0.5rem 0.25rem;\n}\n\n.zoom-buttons {\n  position: absolute;\n  top: 0.3rem;\n  right: 0.3rem;\n  z-index: 1;\n}\n\n.checkbox {\n  font-size: 0.9rem;\n  margin-bottom: 2px;\n}\n\n.checkbox:hover {\n  color: var(--textFancy);\n}\n\n.xtime-slider {\n  margin-top: -0.25rem;\n}\n\n@media only screen and (max-width: 640px) {\n}\n</style>\n"],"names":["i18n","_sfc_main$4","defineComponent","_sfc_main$3","val","result","_sfc_main$2","_sfc_main$1","useIt","timePeriod","_sfc_main","TOTAL_MSG","FADED","SCALE_WIDTH","Component","CollapsiblePanel","LegendBox","LineFilterSlider","ScaleBox","ScaleSlider","TimeSlider","ZoomButtons","globalStore","svnProject","a","HTTPFileSystem","w","d","e","g","x","viz","mapCamera","filename","text","YAML","nprogress","hasYaml","configuration","key","Status","path","folder","files","pattern","match","findMatchingGlobInFiles","shpFilename","dbfFilename","blob","shpFile","readBlob","blob2","dbfFile","error","msg","maplibregl","extent","lnglat","mFac","padding","baubles","elem","feature","id","link","origCoord","destCoord","color","fade","properties","value","i","parent","labels","radiusField","tsMap","endpoints","props","trips","revTrips","reverseDir","totalTrips","html","geojson","blue","centroids","centroid","turf.centerOfMass","values","digits","from","to","fromMarginal","toMarginal","hourFrom","hourTo","hour","dailyFrom","dailyTo","options","event","data","shapefile.read","polygon","origCoords","newCoords","p","Coords","multipolygon","coordinates","proj4","coords","coordArray","rowTotal","colTotal","fromCentroid","toCentroid","row","col","csvFilename","CSVWorker","message","_a","_b","line","metersToTheRight","turf.lineOffset","delta","widthFactor","sumElements","include","header","bearing","longitude","latitude","zoom","pitch","ColorScheme","debounce"],"mappings":"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"}