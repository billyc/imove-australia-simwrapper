{"version":3,"file":"XyTime-a5c887a8.js","sources":["../../src/plugins/xy-time/ScatterplotColorBinsLayer.ts","../../src/plugins/xy-time/XyTimeDeckMap.tsx","../../src/plugins/xy-time/ModalDialogCustomColorbreakpoint.vue","../../src/plugins/xy-time/XyTime.vue"],"sourcesContent":["import { ScatterplotLayer } from '@deck.gl/layers'\n\nexport default class ScatterplotColorBinsLayer extends ScatterplotLayer {\n  public initializeState(context: any) {\n    super.initializeState(context)\n\n    this.getAttributeManager().addInstanced({\n      instanceValue: {\n        accessor: 'getValue',\n        size: 1,\n        defaultValue: 0.0,\n        transition: true,\n      },\n    })\n  }\n\n  public getShaders() {\n    return {\n      ...super.getShaders(),\n      inject: {\n        'vs:#decl': `\n            #define MAX_COLORS 21\n            #define MAX_BREAKPOINTS 20\n            uniform int numBreakpoints;\n            uniform vec3 colors[MAX_COLORS];\n            uniform float breakpoints[MAX_BREAKPOINTS];\n            attribute float instanceValue;\n            `,\n        'vs:DECKGL_FILTER_COLOR': `\n            // geometry.pickingColor = instancePickingColors;\n            picking_setPickingColor(geometry.pickingColor);\n\n            int lastBreakpoint = numBreakpoints;\n\n            for(int i=0; i < MAX_BREAKPOINTS; ++i) {\n              if (instanceValue < breakpoints[i]) {\n                color = vec4(colors[i], 1.0);\n                return;\n              }\n              if (i == lastBreakpoint) {\n                color = vec4(colors[i], 1.0);\n                return;\n              }\n            }\n            color = vec4(1.0, 0.0, 0.0, 1.0);\n            return;\n          `,\n      },\n    }\n  }\n\n  // uniform cannot change size, so we pre-allocate the\n  // max storage for colors and breakpoints here.\n  private MAX_COLORS = 21\n  private uniformColors = new Array(this.MAX_COLORS * 3)\n  private uniformBreakpoints = new Array(this.MAX_COLORS - 1)\n\n  draw({ uniforms }: any) {\n    const { colors, breakpoints } = this.props\n\n    colors.map((c: number[], i: number) => {\n      this.uniformColors[i * 3] = c[0] / 256\n      this.uniformColors[i * 3 + 1] = c[1] / 256\n      this.uniformColors[i * 3 + 2] = c[2] / 256\n    })\n\n    breakpoints.map((c: number, i: number) => {\n      this.uniformBreakpoints[i] = c\n    })\n\n    const combinedUniforms = {\n      ...uniforms,\n      colors: this.uniformColors,\n      breakpoints: this.uniformBreakpoints,\n      numBreakpoints: breakpoints.length,\n    }\n\n    super.draw({\n      uniforms: combinedUniforms,\n    })\n  }\n}\n\nScatterplotColorBinsLayer.layerName = 'ScatterplotColorBinsLayer'\nScatterplotColorBinsLayer.defaultProps = {\n  colors: [\n    [128, 128, 128],\n    [128, 128, 128],\n  ],\n  breakpoints: [0.0],\n}\n","import React, { useState, useMemo, useEffect } from 'react'\nimport DeckGL from '@deck.gl/react'\nimport { StaticMap } from 'react-map-gl'\nimport { DataFilterExtension } from '@deck.gl/extensions'\nimport * as timeConvert from 'convert-seconds'\n\nimport { REACT_VIEW_HANDLES, MAPBOX_TOKEN } from '@/Globals'\nimport ScatterplotColorBinsLayer from '@/plugins/xy-time/ScatterplotColorBinsLayer'\nimport globalStore from '@/store'\n\nconst dataFilter = new DataFilterExtension({ filterSize: 1 })\n\nfunction convertSecondsToClockTimeMinutes(index: number) {\n  const seconds = index\n\n  try {\n    const hms = timeConvert(seconds)\n    const minutes = ('00' + hms.minutes).slice(-2)\n    return `${hms.hours}:${minutes}`\n  } catch (e) {\n    return '00:00'\n  }\n}\n\n// -------------------------------------------------------------------\nexport default function Component({\n  viewId = 0,\n  pointLayers = [] as {\n    coordinates: Float32Array\n    time: Float32Array\n    color: Uint8Array\n    value: Float32Array\n    timeRange: number[]\n  }[],\n  timeFilter = [] as number[],\n  dark = false,\n  colors = [\n    [1, 0, 0],\n    [0.25, 0.25, 1],\n  ] as number[][],\n  breakpoints = [0.0] as number[],\n  radius = 5,\n  mapIsIndependent = false,\n}) {\n  // manage SimWrapper centralized viewState - for linked maps\n  const [viewState, setViewState] = useState(globalStore.state.viewState)\n\n  REACT_VIEW_HANDLES[viewId] = () => {\n    setViewState(globalStore.state.viewState)\n  }\n\n  function handleViewState(view: any) {\n    if (!view.latitude) return\n\n    if (!view.center) view.center = [0, 0]\n    view.center[0] = view.longitude\n    view.center[1] = view.latitude\n    setViewState(view)\n\n    if (!mapIsIndependent) globalStore.commit('setMapCamera', view)\n  }\n\n  function getTooltip(element: any, click: boolean) {\n    if (element.index < 0) return null\n\n    const layerId = element?.layer?.id\n    if (layerId === undefined) return null\n\n    const time = pointLayers[layerId].time[element.index]\n    const humanTime = convertSecondsToClockTimeMinutes(time)\n\n    const value = pointLayers[layerId].value[element.index]\n    const cleanValue = Math.round(1e6 * value) / 1e6\n    return {\n      html: `\\\n        <table style=\"font-size: 0.9rem\">\n        <tr>\n          <td>Value</td>\n          <td style=\"padding-left: 0.5rem;\"><b>${cleanValue}</b></td>\n        </tr><tr>\n          <td style=\"text-align: right;\">Time</td>\n          <td style=\"padding-left: 0.5rem;\"><b>${humanTime}</b></td>\n        </tr>\n        </table>\n      `,\n      style: dark\n        ? { color: '#ccc', backgroundColor: '#2a3c4f' }\n        : { color: '#223', backgroundColor: 'white' },\n    }\n  }\n\n  // add a scatterplotlayer for each set of points in pointLayers\n  const layers = pointLayers.map((points, layerIndex) => {\n    // The entire layer can be hidden if all of its points\n    // are beyond the timeFilter range that is being shown.\n    const outOfRange = points.timeRange[0] > timeFilter[1] || points.timeRange[1] < timeFilter[0]\n\n    //@ts-ignore\n    return new ScatterplotColorBinsLayer({\n      data: {\n        length: points.time.length,\n        attributes: {\n          getPosition: { value: points.coordinates, size: 2 },\n          getFilterValue: { value: points.time, size: 1 },\n          getValue: { value: points.value, size: 1 },\n        },\n      },\n      autoHighlight: true,\n      breakpoints: breakpoints,\n      colors: colors,\n      extensions: [dataFilter],\n      id: layerIndex,\n      filled: true,\n      filterRange: timeFilter.length ? timeFilter : null,\n      getRadius: radius, // 5 // (d: any) => Math.sqrt(d...),\n      // getFillColor: [10, 50, 10],\n      highlightColor: [255, 0, 224],\n      opacity: 1,\n      parameters: { depthTest: false },\n      pickable: true,\n      radiusScale: 1,\n      stroked: false,\n      updateTriggers: {\n        getPosition: pointLayers,\n        getFillColor: pointLayers,\n        getFilterValue: timeFilter,\n      },\n      // transitions: {\n      //   getFillColor: 500,\n      //   getColor: 500,\n      //   getValue: 500,\n      //   getFilterValue: 500,\n      // },\n      // hide layers that are entirely outside the time window filter:\n      visible: !outOfRange,\n    })\n  })\n\n  // initialViewState={initialViewState}\n  return (\n    <DeckGL\n      layers={layers}\n      controller={true}\n      useDevicePixels={true}\n      viewState={viewState}\n      onViewStateChange={(e: any) => handleViewState(e.viewState)}\n      pickingRadius={4}\n      onClick={getTooltip}\n      getTooltip={getTooltip}\n    >\n      {\n        /*\n        // @ts-ignore */\n        <StaticMap\n          mapStyle={globalStore.getters.mapStyle}\n          preventStyleDiffing={true}\n          mapboxApiAccessToken={MAPBOX_TOKEN}\n        />\n      }\n    </DeckGL>\n  )\n}\n","<template lang=\"pug\">\n  // Modal dialog container\n  .modal-dialog\n    // Title for the modal\n    h2.modal-dialog-heading Custom Breakpoints\n    \n    // Container for the color table\n    .color-table\n      // Loop through each color\n      .color(v-for=\"(color, index) in colors\")\n        // Button to remove a color and breakpoint \n        i.remove-button.fas.fa-xs.fa-trash(@click=\"removeBreakpoint(index)\")\n        \n        // Color picker input for selecting color\n        input.color-picker(\n          type=\"color\"\n          :value=\"intArrayToHexColor(color)\"\n          @change=\"colorChange($event, index)\"\n        )\n        \n        // Comparator symbol\n        p.comperator(v-if=\"index === 0\" v-html=\"'<p>&lt;</p>'\")\n        p.comperator(v-else v-html=\"'<p>&gE;</p>'\")\n\n        // Breakpoint picker input for adjusting breakpoints\n        input.breakpoint-picker(\n          v-if=\"index !== 0\"\n          type=\"number\"\n          step=\".01\"\n          :placeholder=\"roundToDecimalPlaces(breakpointsProp[index - 1], 6)\"\n          @change=\"changeBreakpoint($event, index - 1)\"\n          :class=\"{ 'incorrect-number-indicator': incorrectBreakpoints[index - 1] }\"\n        )\n        input.breakpoint-picker(\n          v-else\n          type=\"number\"\n          step=\".01\"\n          :placeholder=\"roundToDecimalPlaces(breakpointsProp[index], 6)\"\n          @change=\"changeBreakpoint($event, index)\"\n          :class=\"{ 'incorrect-number-indicator': incorrectBreakpoints[index - 1] }\"\n        )\n\n        // Add button for breakpoints between two breakpoints\n        .add-button-container\n          i.remove-button.fas.fa-sm.fa-plus(v-if=\"index != colors.length - 1 && index != 0\" @click=\"addBreakpoint(index)\")\n    \n    // Holds all buttons at the bottom of the panel\n    .button-holder\n      // Button to add a new color\n      button.button.is-success.is-small.is-outlined(@click=\"addColor\") Add Color\n      \n      // Button to close the modal dialog with rounded border\n      button.button.is-danger.is-small.is-outlined(\n        @click=\"closeModalDialog\"\n      ) Close\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\n\nconst MyComponent = defineComponent({\n  name: 'ModalDialogCustomColorbreakpoint',\n  props: {\n    breakpointsProp: { type: Array as () => number[], required: true }, // Array of breakpoint values\n    colorsProp: { type: Array, required: true }, // Array of color values\n  },\n  data() {\n    return {\n      // Create local copies of breakpoints and colors arrays to avoid direct modification of props\n      breakpoints: [] as number[], // Local copy of breakpoint values\n      incorrectBreakpoints: [] as any[], // Lists all incorrect breakpoints (prevoius breakpoint is higher)\n      colors: [] as any[], // Local copy of color values\n    }\n  },\n  mounted() {\n    this.colors = this.colorsProp\n    this.breakpoints = this.breakpointsProp\n    this.checkIfBreakpointsAreCorrect()\n  },\n  watch: {\n    breakpointsProp() {\n      this.breakpoints = this.breakpointsProp\n      for (let i = 0; i < this.breakpointsProp.length; i++) {\n        this.breakpoints[i] = this.roundToDecimalPlaces(this.breakpoints[i], 6)\n        this.breakpointsProp[i] = this.roundToDecimalPlaces(this.breakpointsProp[i], 6)\n      }\n    },\n    colorsProp() {\n      this.colors = this.colorsProp\n    },\n  },\n  methods: {\n    /**\n     * Adds a new color and corresponding breakpoint to the component's data.\n     */\n    addColor() {\n      // Push the last value from breakpointsProp and colorsProp to add a new color and breakpoint\n      this.breakpointsProp.push(this.breakpointsProp[this.breakpointsProp.length - 1])\n      this.colorsProp.push(this.colorsProp[this.colorsProp.length - 1])\n      this.$emit('addOrRemoveBreakpoint', this.colors, this.breakpoints)\n    },\n\n    /**\n     * Converts an array of RGB values to a hex color string.\n     * @param array - An array containing 3 integer values representing RGB components.\n     * @returns The hex color string in the format \"#RRGGBB\".\n     * @throws Error if the input array doesn't have exactly 3 elements.\n     */\n    intArrayToHexColor(array: number[]): string {\n      // Ensure the array has exactly 3 elements\n      if (array.length !== 3) {\n        throw new Error('The array must contain exactly 3 elements.')\n      }\n\n      // Convert integer values to hex strings and add leading zeros if needed\n      const hexValues = array.map(value => {\n        const hex = value.toString(16)\n        return hex.length === 1 ? '0' + hex : hex\n      })\n\n      // Combine hex values into a hex color string in the format \"#RRGGBB\"\n      const hexColor = `#${hexValues.join('')}`\n\n      return hexColor\n    },\n\n    /**\n     * Converts a hex color string to an array of RGB values.\n     * @param hexColor - The hex color string in the format \"#RRGGBB\".\n     * @returns An array containing 3 integer values representing RGB components.\n     * @throws Error if the input hex color string is not 6 characters long.\n     */\n    hexColorToIntArray(hexColor: string): number[] {\n      // Remove the '#' character if present\n      hexColor = hexColor.replace(/^#/, '')\n\n      // Ensure the input is exactly 6 characters long\n      if (hexColor.length !== 6) {\n        throw new Error('The hex color string must be 6 characters long.')\n      }\n\n      // Split the hex color string into R, G, and B components\n      const red = parseInt(hexColor.slice(0, 2), 16)\n      const green = parseInt(hexColor.slice(2, 4), 16)\n      const blue = parseInt(hexColor.slice(4, 6), 16)\n\n      return [red, green, blue]\n    },\n\n    /**\n     * Rounds a number to the specified number of decimal places.\n     * @param number - The number to be rounded.\n     * @param decimalPlaces - The number of decimal places to round to.\n     * @returns The rounded number.\n     * @throws Error if the specified decimal places is negative.\n     */\n    roundToDecimalPlaces(number: number, decimalPlaces: number): number {\n      if (decimalPlaces < 0) {\n        throw new Error('The number of decimal places cannot be negative.')\n      }\n\n      const factor = Math.pow(10, decimalPlaces)\n      return Math.round(number * factor) / factor\n    },\n\n    /**\n     * Adds a breakpoint between two breakpoints and automatically\n     * calculates the average of the two colors or values.\n     * @param index\n     */\n    addBreakpoint(index: number) {\n      if (index == 0) return\n      const prevColor = this.colorsProp[index] as number[]\n      const nextColor = this.colorsProp[index + 1] as number[]\n\n      const prevValue = this.breakpoints[index - 1]\n      const nextValue = this.breakpoints[index]\n\n      const averageColor = this.calculateAverageColor(prevColor, nextColor)\n      const averageValue = (prevValue + nextValue) / 2\n\n      this.colorsProp.splice(index + 1, 0, averageColor)\n      this.breakpoints.splice(index, 0, averageValue)\n\n      this.$emit('addOrRemoveBreakpoint', this.colors, this.breakpoints)\n    },\n\n    /**\n     * Calculates the average color between two given colors.\n     *\n     * @param color1 - The first color in the format [r, g, b].\n     * @param color2 - The second color in the format [r, g, b].\n     * @returns The calculated average color in the format [r, g, b].\n     * @throws Error if the input colors are not in the expected format.\n     */\n    calculateAverageColor(color1: number[], color2: number[]): number[] {\n      // Validate input color format\n      if (color1.length !== 3 || color2.length !== 3) {\n        throw new Error('Colors must be in the format [r, g, b]')\n      }\n\n      // Calculate average color by averaging corresponding RGB components\n      const averageColor = [\n        Math.round((color1[0] + color2[0]) / 2),\n        Math.round((color1[1] + color2[1]) / 2),\n        Math.round((color1[2] + color2[2]) / 2),\n      ]\n\n      return averageColor\n    },\n\n    /**\n     * Removes a color and corresponding breakpoint at the specified index.\n     * @param index - The index of the color and breakpoint to be removed.\n     */\n    removeBreakpoint(index: number) {\n      // Remove the corresponding color and breakpoint\n      this.breakpointsProp.splice(index - 1, 1)\n      this.colorsProp.splice(index, 1)\n      this.$emit('addOrRemoveBreakpoint', this.colors, this.breakpoints)\n      this.checkIfBreakpointsAreCorrect()\n    },\n\n    /**\n     * Emits a 'close' event to signal the closure of the modal dialog.\n     */\n    closeModalDialog() {\n      this.$emit('close')\n    },\n\n    /**\n     * Handles the change in color picker value and updates the corresponding color.\n     * @param event - The change event from the color picker.\n     * @param index - The index of the color to be updated.\n     */\n    colorChange(event: any, index: number) {\n      // Convert the hex color value to RGB and update the colors array\n      const color = this.hexColorToIntArray(event.target.value)\n      this.colors[index] = color\n      this.$emit('updateColor', this.colors)\n    },\n\n    /**\n     * Updates a breakpoint at the specified index with the new value from the event.\n     *\n     * @param {any} event - The event object triggered by the breakpoint change.\n     * @param {number} index - The index of the breakpoint being updated.\n     */\n    changeBreakpoint(event: any, index: number) {\n      this.breakpoints[index] = event.target.value\n      for (let i = 0; i < this.breakpointsProp.length; i++) {\n        if (this.breakpoints[i] === undefined) {\n          this.breakpoints[i] = this.roundToDecimalPlaces(this.breakpointsProp[i], 6)\n        }\n      }\n      this.$emit('updateBreakpoint', this.breakpoints)\n      this.checkIfBreakpointsAreCorrect()\n    },\n\n    /**\n     * Checks if the array of breakpoints is in ascending order.\n     * Returns true if all breakpoints are correctly ordered, otherwise false.\n     */\n    checkIfBreakpointsAreCorrect() {\n      let maxValue = Number.NEGATIVE_INFINITY\n      this.incorrectBreakpoints = []\n      let returnValue = true\n      for (let i = 0; i < this.breakpoints.length; i++) {\n        this.incorrectBreakpoints[i] = false\n        maxValue = this.breakpoints[i] > maxValue ? this.breakpoints[i] : maxValue\n        // console.log(this.breakpoints[i], Number(maxValue))\n        if (this.breakpoints[i] < maxValue) {\n          this.incorrectBreakpoints[i] = true\n          returnValue = false\n        }\n      }\n      return returnValue\n    },\n  },\n})\n\nexport default MyComponent\n</script>\n\n<style scoped lang=\"scss\">\n@import '@/styles.scss';\n\n.modal-dialog {\n  display: flex;\n  flex-direction: column;\n  width: min-content;\n  min-width: 300px;\n  height: min-content;\n  max-height: 500px;\n  margin: auto;\n  background-color: white;\n  border-radius: 10px;\n  // font-size: 3rem;\n  z-index: 20;\n  box-shadow: 0px 0px 5px 3px rgba(128, 128, 128, 0.1);\n}\n\n.modal-dialog-heading {\n  padding-top: 1rem;\n  width: fit-content;\n  margin: 0 auto;\n}\n\n.color {\n  display: flex;\n  align-items: center;\n  flex-direction: row;\n  margin-bottom: 3px;\n  font-size: 1.2rem;\n  width: min-content;\n}\n\n.color-table {\n  max-height: 400px;\n  overflow-y: scroll;\n  margin: 10px;\n}\n\n.color-picker {\n  width: 25px;\n  height: 25px;\n  overflow-y: scroll;\n}\n\n.comperator {\n  display: flex;\n  justify-content: center;\n  width: 1rem;\n  margin-right: 4px;\n}\n\n.button-holder {\n  font-size: 1rem;\n  display: flex;\n  justify-content: space-evenly;\n  padding-bottom: 10px;\n}\n\n.remove-button {\n  margin: 0 0.5rem;\n  padding: 5px;\n}\n\n.remove-button:hover {\n  cursor: pointer;\n}\n\n.incorrect-number-indicator {\n  color: rgb(255, 111, 111);\n}\n\n.add-button-container {\n  position: relative;\n  width: 30px;\n}\n\n.add-button-container > .remove-button {\n  position: absolute;\n  top: 0;\n  right: 0;\n}\n\n.add-color {\n  position: absolute;\n  width: 20px;\n  height: 20px;\n}\n</style>\n","<template lang=\"pug\">\n.viz-plugin(:class=\"{'hide-thumbnail': !thumbnail}\" oncontextmenu=\"return false\" :id=\"`id-${viewId}`\")\n\n  xy-time-deck-map.map-layer(v-if=\"!thumbnail\"\n    :viewId=\"viewId\"\n    :pointLayers=\"pointLayers\"\n    :timeFilter=\"timeFilter\"\n    :dark=\"this.$store.state.isDarkMode\"\n    :colors=\"this.colors\"\n    :breakpoints=\"this.breakpoints\"\n    :radius=\"this.guiConfig.radius\"\n    :mapIsIndependent=\"false\"\n  )\n\n  zoom-buttons(v-if=\"!thumbnail\" corner=\"bottom\")\n\n  .top-right\n    .gui-config(:id=\"configId\")\n\n  .bottom-right\n    .legend-area(v-if=\"legendStore\")\n      legend-box(:legendStore=\"legendStore\")\n\n  time-slider.time-slider-area(v-if=\"isLoaded\"\n    :range=\"timeRange\"\n    :activeTimeExtent=\"timeFilter\"\n    :labels=\"timeLabels\"\n    :isAnimating=\"isAnimating\"\n    @timeExtent=\"handleTimeSliderValues\"\n    @toggleAnimation=\"toggleAnimation\"\n    @drag=\"isAnimating=false\"\n  )\n\n  .message(v-if=\"!thumbnail && myState.statusMessage\")\n    p.status-message {{ myState.statusMessage }}\n\n  modal-dialog-custom-colorbreakpoint(v-if=\"this.showCustomBreakpoints\"\n    :breakpointsProp=\"this.breakpoints\"\n    :colorsProp=\"this.colors\"\n    @close=\"showCustomBreakpoints = false\"\n    @updateColor=\"(colorArray) => this.setLegend(colorArray, this.breakpoints)\"\n    @updateBreakpoint=\"(breakpointArray) => this.setLegend(this.colors, breakpointArray)\"\n    @addOrRemoveBreakpoint=\"(colorArray, breakpointArray) => this.setLegend(colorArray, breakpointArray)\"\n  )\n\n</template>\n\n<script lang=\"ts\">\nconst i18n = {\n  messages: {\n    en: {\n      loading: 'Loading data...',\n      sorting: 'Sorting into bins...',\n      aggregate: 'Summary',\n      maxHeight: '3D Height',\n      showDetails: 'Show Details',\n      selection: 'Selection',\n      areas: 'Areas',\n      count: 'Count',\n      promptCRS: `Enter the coordinate reference system, e.g. EPSG:25832\\n\\nThese coordinates are not in long/lat format. To fix this permanently, convert them to long/lat or add \"# EPSG:xxxx\" to your CSV header`,\n    },\n    de: {\n      loading: 'Dateien laden...',\n      sorting: 'Sortieren...',\n      aggregate: 'Daten',\n      maxHeight: '3-D Höhe',\n      showDetails: 'Details anzeigen',\n      selection: 'Ausgewählt',\n      areas: 'Orte',\n      count: 'Anzahl',\n    },\n  },\n}\n\nimport { defineComponent } from 'vue'\n\nimport GUI from 'lil-gui'\nimport YAML from 'yaml'\nimport colormap from 'colormap'\n\nimport util from '@/js/util'\nimport globalStore from '@/store'\nimport CollapsiblePanel from '@/components/CollapsiblePanel.vue'\nimport DrawingTool from '@/components/DrawingTool/DrawingTool.vue'\nimport HTTPFileSystem from '@/js/HTTPFileSystem'\nimport LegendBox from '@/components/viz-configurator/LegendBox.vue'\nimport LegendStore from '@/js/LegendStore'\nimport TimeSlider from '@/components/TimeSlider.vue'\nimport XyTimeDeckMap from './XyTimeDeckMap'\nimport XytDataParser from './XytDataParser.worker.ts?worker'\nimport ZoomButtons from '@/components/ZoomButtons.vue'\nimport ModalDialogCustomColorbreakpoint from './ModalDialogCustomColorbreakpoint.vue'\n\nimport {\n  ColorScheme,\n  FileSystem,\n  LegendItem,\n  LegendItemType,\n  FileSystemConfig,\n  VisualizationPlugin,\n  Status,\n  REACT_VIEW_HANDLES,\n} from '@/Globals'\n\ninterface VizDetail {\n  title: string\n  description?: string\n  file: string\n  projection: any\n  thumbnail?: string\n  center: any\n  zoom: number\n  buckets: number\n  clipMax: number\n  exponent: number\n  radius: number\n  colorRamp: string\n  breakpoints: string\n}\n\ninterface PointLayer {\n  color: Uint8Array\n  value: Float32Array\n  coordinates: Float32Array\n  time: Float32Array\n  timeRange: number[]\n}\n\nconst MyComponent = defineComponent({\n  name: 'XYTime',\n  i18n,\n  components: {\n    CollapsiblePanel,\n    DrawingTool,\n    LegendBox,\n    TimeSlider,\n    ZoomButtons,\n    XyTimeDeckMap,\n    ModalDialogCustomColorbreakpoint,\n  },\n  props: {\n    root: { type: String, required: true },\n    subfolder: { type: String, required: true },\n    yamlConfig: String,\n    config: Object,\n    thumbnail: Boolean,\n  },\n  data() {\n    return {\n      guiConfig: {\n        buckets: 7,\n        exponent: 4,\n        radius: 5,\n        'clip max': 100,\n        'color ramp': 'viridis',\n        colorRamps: ['bathymetry', 'electric', 'inferno', 'jet', 'magma', 'par', 'viridis'],\n        flip: false,\n        // @ts-ignore ->\n        'Custom breakpoints...': this.toggleModalDialog,\n        'manual breaks': '',\n      },\n      minRadius: 5,\n      maxRadius: 5000,\n      showCustomBreakpoints: false,\n      viewId: `xyt-id-${Math.floor(1e12 * Math.random())}` as any,\n      configId: `gui-config-${Math.floor(1e12 * Math.random())}` as any,\n      timeLabels: [0, 1] as any[],\n      startTime: 0,\n      isAnimating: false,\n      timeFilter: [0, 3599],\n      colors: [\n        [128, 128, 128],\n        [128, 128, 128],\n      ] as any[][],\n      breakpoints: [0.0],\n      range: [Infinity, -Infinity],\n      timeRange: [Infinity, -Infinity],\n      legendStore: null as LegendStore | null,\n      standaloneYAMLconfig: {\n        title: '',\n        description: '',\n        file: '',\n        projection: '',\n        thumbnail: '',\n        radius: 250,\n        maxHeight: 0,\n        center: null as any,\n        zoom: 9,\n      },\n      YAMLrequirementsXY: { file: '' },\n      columnLookup: [] as number[],\n      gzipWorker: null as Worker | null,\n      vizDetails: {\n        title: '',\n        description: '',\n        file: '',\n        projection: '',\n        thumbnail: '',\n        center: null as any,\n        zoom: 9,\n        // x-y-t details:\n        buckets: 5,\n        exponent: 4,\n        clipMax: 100,\n        radius: 5,\n        colorRamp: 'viridis',\n        flip: false,\n        breakpoints: null as any,\n      } as VizDetail,\n      myState: {\n        statusMessage: '',\n        subfolder: '',\n        yamlConfig: '',\n        thumbnail: false,\n      },\n      pointLayers: [] as PointLayer[],\n      isLoaded: false,\n      animator: null as any,\n      guiController: null as GUI | null,\n      resizer: null as ResizeObserver | null,\n      thumbnailUrl: \"url('assets/thumbnail.jpg') no-repeat;\",\n      ANIMATE_SPEED: 4,\n      animationElapsedTime: 0,\n    }\n  },\n  async mounted() {\n    this.$store.commit('setFullScreen', !this.thumbnail)\n    this.myState.thumbnail = this.thumbnail\n    this.myState.yamlConfig = this.yamlConfig || ''\n    this.myState.subfolder = this.subfolder\n\n    await this.getVizDetails()\n    await this.buildThumbnail()\n\n    if (this.thumbnail) return\n\n    this.setupLogoMover()\n\n    // ----------------------------------------------------\n    this.setupGui()\n    this.myState.statusMessage = `${this.$i18n.t('loading')}`\n\n    if (!this.isLoaded) await this.loadFiles()\n  },\n  beforeDestroy() {\n    // MUST erase the React view handle to prevent gigantic memory leak!\n    REACT_VIEW_HANDLES[this.viewId] = undefined\n    delete REACT_VIEW_HANDLES[this.viewId]\n\n    try {\n      if (this.gzipWorker) {\n        this.gzipWorker.postMessage({ terminate: true })\n        this.gzipWorker.terminate()\n      }\n      if (this.guiController) this.guiController.destroy()\n    } catch (e) {\n      console.warn(e)\n    }\n\n    if (this.animator) window.cancelAnimationFrame(this.animator)\n\n    this.$store.commit('setFullScreen', false)\n  },\n\n  computed: {\n    fileApi(): HTTPFileSystem {\n      return new HTTPFileSystem(this.fileSystem, globalStore)\n    },\n    fileSystem(): FileSystemConfig {\n      const svnProject: FileSystemConfig[] = this.$store.state.svnProjects.filter(\n        (a: FileSystemConfig) => a.slug === this.root\n      )\n      if (svnProject.length === 0) {\n        console.log('no such project')\n        throw Error\n      }\n      return svnProject[0]\n    },\n\n    urlThumbnail(): any {\n      return this.thumbnailUrl\n    },\n  },\n  watch: {\n    '$store.state.viewState'() {\n      if (REACT_VIEW_HANDLES[this.viewId]) REACT_VIEW_HANDLES[this.viewId]()\n    },\n  },\n  methods: {\n    toggleModalDialog() {\n      this.showCustomBreakpoints = !this.showCustomBreakpoints\n    },\n    handleTimeSliderValues(timeValues: any[]) {\n      this.animationElapsedTime = timeValues[0]\n      this.timeFilter = timeValues\n      this.timeLabels = [\n        this.convertSecondsToClockTimeMinutes(timeValues[0]),\n        this.convertSecondsToClockTimeMinutes(timeValues[1]),\n      ]\n    },\n\n    setupLogoMover() {\n      this.resizer = new ResizeObserver(this.moveLogo)\n      const deckmap = document.getElementById(`id-${this.viewId}`) as HTMLElement\n      this.resizer.observe(deckmap)\n    },\n\n    moveLogo() {\n      const deckmap = document.getElementById(`${this.viewId}`) as HTMLElement\n      const logo = deckmap?.querySelector('.mapboxgl-ctrl-bottom-left') as HTMLElement\n      if (logo) {\n        const right = deckmap.clientWidth > 640 ? '280px' : '36px'\n        logo.style.right = right\n      }\n    },\n\n    setupGui() {\n      this.guiController = new GUI({\n        title: 'Settings',\n        injectStyles: true,\n        width: 200,\n        container: document.getElementById(this.configId) || undefined,\n      })\n\n      const config = this.guiController // .addFolder('Colors')\n      config.add(this.guiConfig, 'radius', this.minRadius, this.maxRadius, 1)\n\n      const colors = config.addFolder('colors')\n      colors.add(this.guiConfig, 'color ramp', this.guiConfig.colorRamps).onChange(this.setColors)\n      colors.add(this.guiConfig, 'flip').onChange(this.setColors)\n\n      const breakpoints = config.addFolder('breakpoints')\n      breakpoints.add(this.guiConfig, 'buckets', 2, 19, 1).onChange(this.setColors)\n      breakpoints.add(this.guiConfig, 'clip max', 0, 100, 1).onChange(this.setColors)\n      breakpoints.add(this.guiConfig, 'exponent', 1, 10, 1).onChange(this.setColors)\n      breakpoints.add(this.guiConfig, 'Custom breakpoints...', 1, 100, 1)\n    },\n    async solveProjection() {\n      if (this.thumbnail) return\n\n      console.log('WHAT PROJECTION:')\n\n      try {\n        const text = await this.fileApi.getFileText(\n          this.myState.subfolder + '/' + this.myState.yamlConfig\n        )\n        this.vizDetails = YAML.parse(text)\n      } catch (e) {\n        console.error(e)\n      }\n    },\n\n    async getVizDetails() {\n      if (this.config) {\n        this.validateYAML()\n        this.vizDetails = Object.assign({}, this.config) as VizDetail\n        this.setCustomGuiConfig()\n        return\n      }\n\n      const hasYaml = new RegExp('.*(yml|yaml)$').test(this.myState.yamlConfig)\n\n      if (hasYaml) {\n        await this.loadStandaloneYAMLConfig()\n      } else {\n        // console.log('NO YAML WTF')\n        this.setConfigForRawCSV()\n      }\n    },\n\n    setCustomGuiConfig() {\n      if (!this.config) return\n\n      // Set custom radius\n      if (this.config.radius >= this.minRadius && this.config.radius <= this.maxRadius)\n        this.guiConfig.radius = this.config.radius\n\n      if (Object.prototype.toString.call(this.config.breakpoints) === '[object Array]') {\n        // Only breakpoints\n        this.setManualBreakpoints(this.config.breakpoints)\n      } else {\n        // Set custom breakpoints\n        if (this.config.breakpoints) {\n          if (this.config.breakpoints.values.length + 1 != this.config.breakpoints.colors.length) {\n            this.$emit('error', {\n              type: Status.ERROR,\n              msg: `Wrong number of colors and values for the breakpoints.`,\n              desc: `Number of colors: ${this.config.breakpoints.colors.length}, Number of values: ${this.config.breakpoints.values.length}, Must apply: Number of colors = number of values plus one.`,\n            })\n          } else {\n            this.guiConfig.buckets = this.config.breakpoints.colors.length\n            this.breakpoints = this.config.breakpoints.values\n            this.colors = this.config.breakpoints.colors\n          }\n        }\n      }\n    },\n\n    setManualBreakpoints(breakpoints: number[]) {\n      this.breakpoints = breakpoints\n      this.guiConfig.buckets = 1 + breakpoints.length\n    },\n\n    setConfigForRawCSV() {\n      let projection = 'EPSG:4326' // Include \"# EPSG:xxx\" in header of CSV to set EPSG\n\n      // output_trips:\n      this.vizDetails = Object.assign(this.vizDetails, {\n        title: 'Point Data: ' + this.myState.yamlConfig,\n        description: this.myState.yamlConfig,\n        file: this.myState.yamlConfig,\n        projection,\n        center: this.vizDetails.center,\n        zoom: this.vizDetails.zoom,\n      })\n\n      this.$emit('title', this.vizDetails.title || this.vizDetails.file)\n      return\n    },\n\n    async loadStandaloneYAMLConfig() {\n      try {\n        // might be a project config:\n        const filename =\n          this.myState.yamlConfig.indexOf('/') > -1\n            ? this.myState.yamlConfig\n            : this.myState.subfolder + '/' + this.myState.yamlConfig\n\n        const text = await this.fileApi.getFileText(filename)\n        this.standaloneYAMLconfig = Object.assign({}, YAML.parse(text))\n        this.validateYAML()\n        this.setVizDetails()\n      } catch (err) {\n        const e = err as any\n        console.log('failed')\n\n        this.$emit('error', {\n          type: Status.ERROR,\n          msg: `File not found`,\n          desc: `Could not find: ${this.myState.subfolder}/${this.myState.yamlConfig}`,\n        })\n      }\n    },\n\n    validateYAML() {\n      const hasYaml = new RegExp('.*(yml|yaml)$').test(this.myState.yamlConfig)\n      let configuration = {} as any\n\n      if (hasYaml) {\n        console.log('has yaml')\n        configuration = this.standaloneYAMLconfig\n      } else {\n        console.log('no yaml')\n        configuration = this.config\n      }\n\n      for (const key in this.YAMLrequirementsXY) {\n        if (key in configuration === false) {\n          this.$emit('error', {\n            type: Status.ERROR,\n            msg: `XYTime missing required key: ${key}`,\n            desc: `XYTime requires keys: ${Object.keys(this.YAMLrequirementsXY)}`,\n          })\n        }\n      }\n\n      if (configuration.radius == 0) {\n        this.$emit('error', {\n          type: Status.WARNING,\n          msg: `Radius set to zero`,\n          desc: 'Radius can not be zero, preset value used instead. ',\n        })\n      }\n\n      if (configuration.zoom < 5 || configuration.zoom > 50) {\n        this.$emit('error', {\n          type: Status.WARNING,\n          msg: `Zoom is out of the recommended range `,\n          desc: 'Zoom levels should be between 5 and 50. ',\n        })\n      }\n    },\n\n    setVizDetails() {\n      this.vizDetails = Object.assign({}, this.vizDetails, this.standaloneYAMLconfig)\n\n      const t = this.vizDetails.title\n        ? this.vizDetails.title\n        : 'Point Data: ' + this.vizDetails.file\n      this.$emit('title', t)\n\n      if (this.vizDetails.buckets) this.guiConfig.buckets = this.vizDetails.buckets\n      if (this.vizDetails.exponent) this.guiConfig.exponent = this.vizDetails.exponent\n      if (this.vizDetails.radius) this.guiConfig.radius = this.vizDetails.radius\n      if (this.vizDetails.clipMax) this.guiConfig['clip max'] = this.vizDetails.clipMax\n      if (this.vizDetails.colorRamp) this.guiConfig['color ramp'] = this.vizDetails.colorRamp\n    },\n\n    async buildThumbnail() {\n      if (this.thumbnail && this.vizDetails.thumbnail) {\n        try {\n          const blob = await this.fileApi.getFileBlob(\n            this.myState.subfolder + '/' + this.vizDetails.thumbnail\n          )\n          const buffer = await blob.arrayBuffer()\n          const base64 = util.arrayBufferToBase64(buffer)\n          if (base64)\n            this.thumbnailUrl = `center / cover no-repeat url(data:image/png;base64,${base64})`\n        } catch (e) {\n          console.error(e)\n        }\n      }\n    },\n\n    async parseCSVFile(filename: string) {\n      this.myState.statusMessage = 'Loading file...'\n\n      let totalRows = 0\n      // get the raw unzipped arraybuffer\n      this.gzipWorker = new XytDataParser()\n\n      this.gzipWorker.onmessage = async (event: MessageEvent) => {\n        if (event.data.status) {\n          this.myState.statusMessage = event.data.status\n        } else if (event.data.error) {\n          this.myState.statusMessage = event.data.error\n          this.$emit('error', {\n            type: Status.ERROR,\n            msg: `XYT Loading Error`,\n            desc: `Error loading: ${this.myState.subfolder}/${this.vizDetails.file}`,\n          })\n        } else if (event.data.finished) {\n          this.finishedLoadingData(totalRows, event.data)\n        } else if (event.data.needCRS) {\n          if (this.gzipWorker) this.gzipWorker.terminate()\n          let userCRS = prompt('' + this.$t('promptCRS')) || 'EPSG:25833'\n          if (Number.isFinite(parseInt(userCRS))) userCRS = `EPSG:${userCRS}`\n          this.vizDetails.projection = userCRS.toUpperCase()\n          this.parseCSVFile(filename)\n        } else {\n          const rows = event.data.time.length\n          // zoom map on first load\n          if (!totalRows) this.setFirstZoom(event.data.coordinates, rows)\n          // save layer data\n          totalRows += rows\n          this.timeRange = [0, 86399]\n          //   Math.min(this.timeRange[0], event.data.time[0]),\n          //   Math.max(this.timeRange[1], event.data.time[rows - 1]),\n          // ]\n          this.pointLayers.push(event.data)\n        }\n      }\n\n      this.gzipWorker.postMessage({\n        filepath: filename,\n        fileSystem: this.fileSystem,\n        projection: this.vizDetails.projection,\n      })\n    },\n\n    setFirstZoom(coordinates: any[], rows: number) {\n      const longitude = 0.5 * (coordinates[0] + coordinates[rows * 2 - 2])\n      const latitude = 0.5 * (coordinates[1] + coordinates[rows * 2 - 1])\n\n      if (Number.isFinite(longitude) && Number.isFinite(latitude)) {\n        // globalStore.commit(\n        //   'setMapCamera',\n        //   Object.assign({}, globalStore.state.viewState, { longitude, latitude, zoom: 10 })\n        // )\n      }\n    },\n\n    finishedLoadingData(totalRows: number, data: any) {\n      console.log('ALL DONE', { totalRows, data: data.range, time: this.timeRange })\n      this.myState.statusMessage = ''\n      this.timeFilter = [this.timeRange[0], this.timeRange[0] + 3599]\n      this.isLoaded = true\n      this.range = data.range\n      // if (!this.timeRange[1]) this.timeRange[1] = 1\n      if (this.gzipWorker) this.gzipWorker.terminate()\n\n      this.setColors()\n      this.moveLogo()\n    },\n\n    animate() {\n      if (!this.isAnimating) return\n\n      this.animationElapsedTime = this.ANIMATE_SPEED * (Date.now() - this.startTime)\n      const animationClockTime = this.animationElapsedTime + this.timeRange[0]\n\n      if (animationClockTime > this.timeRange[1]) {\n        this.startTime = Date.now()\n        this.animationElapsedTime = 0 // this.timeRange[0]\n      }\n\n      const span = this.timeFilter[1] - this.timeFilter[0]\n      this.timeFilter = [animationClockTime, animationClockTime + span]\n\n      this.animator = window.requestAnimationFrame(this.animate)\n    },\n\n    toggleAnimation() {\n      this.isAnimating = !this.isAnimating\n      if (this.isAnimating) {\n        this.animationElapsedTime = this.timeFilter[0] - this.timeRange[0]\n        this.startTime = Date.now() - this.animationElapsedTime / this.ANIMATE_SPEED\n        this.animate()\n      }\n    },\n\n    setColors() {\n      const EXPONENT = this.guiConfig.exponent // powerFunction // 4 // log-e? not steep enough\n\n      let colors256 = colormap({\n        colormap: this.guiConfig['color ramp'],\n        nshades: 256,\n        format: 'rba',\n        alpha: 1,\n      }).map((c: number[]) => [c[0], c[1], c[2]])\n\n      if (this.guiConfig.flip) colors256 = colors256.reverse()\n\n      const step = 256 / (this.guiConfig.buckets - 1)\n      const colors = []\n      for (let i = 0; i < this.guiConfig.buckets - 1; i++) {\n        colors.push(colors256[Math.round(step * i)])\n      }\n      colors.push(colors256[255])\n\n      this.colors = colors\n\n      // figure out min and max\n      const max1 = Math.pow(this.range[1], 1 / EXPONENT)\n      const max2 = (max1 * this.guiConfig['clip max']) / 100.0\n      // const clippedMin = (this.range[1] * this.clipData[0]) / 100.0\n      // console.log({ max1, max2 })\n\n      // Generate breakpoints only if there are not already set\n      if (!this.vizDetails.breakpoints) {\n        const breakpoints = [] as number[]\n        for (let i = 1; i < this.guiConfig.buckets; i++) {\n          const raw = (max2 * i) / this.guiConfig.buckets\n          const breakpoint = Math.pow(raw, EXPONENT)\n          breakpoints.push(breakpoint)\n        }\n\n        this.breakpoints = breakpoints\n      }\n\n      // only update legend if we have the full dataset already\n      if (this.isLoaded) this.setLegend(colors, this.breakpoints)\n    },\n\n    setLegend(colors: any[], breakpoints: number[]) {\n      // hide the legend if there is no data to show.\n      if (this.range[1] - this.range[0] === 0) return\n\n      this.legendStore = new LegendStore()\n      this.legendStore.setLegendSection({\n        section: 'Legend',\n        column: 'Legend',\n        values: colors.map((rgb, index) => {\n          const breakpoint = breakpoints[index == 0 ? index : index - 1]\n          let label = '' + Math.round(1e6 * breakpoint) / 1e6\n          if (index == 0) label = '< ' + label\n          if (index == colors.length - 1) label = '> ' + label\n          return { label, value: rgb }\n        }),\n      })\n      this.breakpoints = breakpoints\n    },\n\n    async loadFiles() {\n      await this.fileApi.getChromePermission(this.fileSystem.handle)\n\n      try {\n        let filename = `${this.myState.subfolder}/${this.vizDetails.file}`\n        await this.parseCSVFile(filename)\n        this.$emit('isLoaded')\n      } catch (e) {\n        console.error(e)\n        this.myState.statusMessage = '' + e\n        this.$emit('error', {\n          type: Status.ERROR,\n          msg: `Loading/Parsing Error`,\n          desc: 'Error loading/parsing: ${this.myState.subfolder}/${this.vizDetails.file}',\n        })\n      }\n    },\n\n    convertSecondsToClockTimeMinutes(index: number) {\n      const h = Math.floor(index / 3600)\n      const m = Math.floor((index - h * 3600) / 60)\n      const s = index - h * 3600 - m * 60\n\n      const hms = { h: `${h}`, m: `${m}`.padStart(2, '0'), s: `${s}`.padStart(2, '0') }\n\n      return `${hms.h}:${hms.m}`\n    },\n  },\n})\n\nexport default MyComponent\n</script>\n\n<style scoped lang=\"scss\">\n@import '@/styles.scss';\n\n.viz-plugin {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  display: flex;\n  flex-direction: column;\n  min-height: $thumbnailHeight;\n  background: url('assets/thumbnail.jpg') center / cover no-repeat;\n  z-index: -1;\n}\n\n.viz-plugin.hide-thumbnail {\n  background: none;\n  z-index: 0;\n}\n\n.message {\n  z-index: 5;\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  box-shadow: 0px 2px 10px #22222222;\n  display: flex;\n  flex-direction: row;\n  margin: auto auto 0 0;\n  background-color: var(--bgPanel);\n  padding: 0.5rem 1.5rem;\n\n  a {\n    color: white;\n    text-decoration: none;\n\n    &.router-link-exact-active {\n      color: white;\n    }\n  }\n\n  p {\n    color: var(--textFancy);\n    font-size: 1.2rem;\n    font-weight: normal;\n    line-height: 1.75rem;\n    margin: auto 0.5rem auto 0;\n    padding: 0 0;\n  }\n}\n\n.map-layer {\n  pointer-events: auto;\n}\n\n.drawing-tool {\n  position: absolute;\n  top: 0;\n  right: 0;\n  pointer-events: none;\n}\n\n.bottom-right {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  margin: auto 7px 15rem auto;\n  box-shadow: 0px 0px 5px 3px rgba(128, 128, 128, 0.1);\n}\n\n.legend-area {\n  background-color: var(--bgPanel);\n  border: 1px solid var(--bgPanel2);\n}\n\n.time-slider-area {\n  position: absolute;\n  bottom: 2.5rem;\n  left: 0;\n  right: 0;\n  margin: 0 8rem 0 0.5rem;\n  filter: $filterShadow;\n}\n\n.buckets {\n  color: var(--text);\n  padding: 4px 4px 4px 4px;\n  display: flex;\n}\n\n.ramp-selector {\n  background-color: var(--bgBold);\n}\n\n.configurator {\n  user-select: none;\n  background-color: var(--bgPanel);\n  margin-top: 2rem;\n}\n\n.clip-slider {\n  margin: 0 0.5rem;\n}\n\n.top-right {\n  background-color: var(--bgPanel2);\n  color: white;\n  position: absolute;\n  top: 0;\n  right: 0;\n  z-index: 5;\n  border-left: 1px solid #66669940;\n  border-bottom: 1px solid #66669940;\n  box-shadow: 0px 0px 5px 3px rgba(128, 128, 128, 0.1);\n}\n\n* > .number {\n  background-color: yellow;\n}\n\n@media only screen and (max-width: 640px) {\n  .message {\n    padding: 0.5rem 0.5rem;\n  }\n}\n</style>\n"],"names":["ScatterplotColorBinsLayer","ScatterplotLayer","__publicField","context","uniforms","colors","breakpoints","c","i","combinedUniforms","dataFilter","DataFilterExtension","convertSecondsToClockTimeMinutes","index","seconds","hms","timeConvert","minutes","Component","viewId","pointLayers","timeFilter","dark","radius","mapIsIndependent","viewState","setViewState","useState","globalStore","REACT_VIEW_HANDLES","handleViewState","view","getTooltip","element","click","layerId","_a","time","humanTime","value","layers","points","layerIndex","outOfRange","React","DeckGL","e","StaticMap","MAPBOX_TOKEN","MyComponent","defineComponent","array","hex","hexColor","red","green","blue","number","decimalPlaces","factor","prevColor","nextColor","prevValue","nextValue","averageColor","averageValue","color1","color2","event","color","maxValue","returnValue","i18n","CollapsiblePanel","DrawingTool","LegendBox","TimeSlider","ZoomButtons","XyTimeDeckMap","ModalDialogCustomColorbreakpoint","HTTPFileSystem","svnProject","a","timeValues","deckmap","logo","right","GUI","config","text","YAML","Status","projection","filename","hasYaml","configuration","key","t","buffer","base64","util","totalRows","XytDataParser","userCRS","rows","coordinates","data","animationClockTime","span","EXPONENT","colors256","colormap","step","max2","raw","breakpoint","LegendStore","rgb","label","h","m"],"mappings":"wkCAEA,MAAqBA,UAAkCC,CAAiB,CAAxE,kCAmDUC,EAAA,kBAAa,IACbA,EAAA,qBAAgB,IAAI,MAAM,KAAK,WAAa,CAAC,GAC7CA,EAAA,0BAAqB,IAAI,MAAM,KAAK,WAAa,CAAC,GApDnD,gBAAgBC,EAAc,CACnC,MAAM,gBAAgBA,CAAO,EAExB,KAAA,sBAAsB,aAAa,CACtC,cAAe,CACb,SAAU,WACV,KAAM,EACN,aAAc,EACd,WAAY,EACd,CAAA,CACD,CACH,CAEO,YAAa,CACX,MAAA,CACL,GAAG,MAAM,WAAW,EACpB,OAAQ,CACN,WAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAQZ,yBAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAmB5B,CAAA,CAEJ,CAQA,KAAK,CAAE,SAAAC,GAAiB,CACtB,KAAM,CAAE,OAAAC,EAAQ,YAAAC,GAAgB,KAAK,MAE9BD,EAAA,IAAI,CAACE,EAAaC,IAAc,CACrC,KAAK,cAAcA,EAAI,CAAC,EAAID,EAAE,CAAC,EAAI,IACnC,KAAK,cAAcC,EAAI,EAAI,CAAC,EAAID,EAAE,CAAC,EAAI,IACvC,KAAK,cAAcC,EAAI,EAAI,CAAC,EAAID,EAAE,CAAC,EAAI,GAAA,CACxC,EAEWD,EAAA,IAAI,CAACC,EAAWC,IAAc,CACnC,KAAA,mBAAmBA,CAAC,EAAID,CAAA,CAC9B,EAED,MAAME,EAAmB,CACvB,GAAGL,EACH,OAAQ,KAAK,cACb,YAAa,KAAK,mBAClB,eAAgBE,EAAY,MAAA,EAG9B,MAAM,KAAK,CACT,SAAUG,CAAA,CACX,CACH,CACF,CAEAT,EAA0B,UAAY,4BACtCA,EAA0B,aAAe,CACvC,OAAQ,CACN,CAAC,IAAK,IAAK,GAAG,EACd,CAAC,IAAK,IAAK,GAAG,CAChB,EACA,YAAa,CAAC,CAAG,CACnB,EChFA,MAAMU,EAAa,IAAIC,EAAoB,CAAE,WAAY,CAAG,CAAA,EAE5D,SAASC,EAAiCC,EAAe,CACvD,MAAMC,EAAUD,EAEZ,GAAA,CACI,MAAAE,EAAMC,EAAYF,CAAO,EACzBG,GAAW,KAAOF,EAAI,SAAS,MAAM,EAAE,EAC7C,MAAO,GAAGA,EAAI,KAAK,IAAIE,CAAO,QACpB,CACH,MAAA,OACT,CACF,CAGA,SAAwBC,EAAU,CAChC,OAAAC,EAAS,EACT,YAAAC,EAAc,CAAC,EAOf,WAAAC,EAAa,CAAC,EACd,KAAAC,EAAO,GACP,OAAAjB,EAAS,CACP,CAAC,EAAG,EAAG,CAAC,EACR,CAAC,IAAM,IAAM,CAAC,CAChB,EACA,YAAAC,EAAc,CAAC,CAAG,EAClB,OAAAiB,EAAS,EACT,iBAAAC,EAAmB,EACrB,EAAG,CAED,KAAM,CAACC,EAAWC,CAAY,EAAIC,EAAS,SAAAC,EAAY,MAAM,SAAS,EAEnDC,EAAAV,CAAM,EAAI,IAAM,CACpBO,EAAAE,EAAY,MAAM,SAAS,CAAA,EAG1C,SAASE,EAAgBC,EAAW,CAC7BA,EAAK,WAELA,EAAK,SAAaA,EAAA,OAAS,CAAC,EAAG,CAAC,GAChCA,EAAA,OAAO,CAAC,EAAIA,EAAK,UACjBA,EAAA,OAAO,CAAC,EAAIA,EAAK,SACtBL,EAAaK,CAAI,EAEZP,GAA8BI,EAAA,OAAO,eAAgBG,CAAI,EAChE,CAES,SAAAC,EAAWC,EAAcC,EAAgB,OAChD,GAAID,EAAQ,MAAQ,EAAU,OAAA,KAExB,MAAAE,GAAUC,EAAAH,GAAA,YAAAA,EAAS,QAAT,YAAAG,EAAgB,GAChC,GAAID,IAAY,OAAkB,OAAA,KAElC,MAAME,EAAOjB,EAAYe,CAAO,EAAE,KAAKF,EAAQ,KAAK,EAC9CK,EAAY1B,EAAiCyB,CAAI,EAEjDE,EAAQnB,EAAYe,CAAO,EAAE,MAAMF,EAAQ,KAAK,EAE/C,MAAA,CACL,KAAM;AAAA;AAAA;AAAA,iDAFW,KAAK,MAAM,IAAMM,CAAK,EAAI,GAMU;AAAA;AAAA;AAAA,iDAGVD,CAAS;AAAA;AAAA;AAAA,QAIpD,MAAOhB,EACH,CAAE,MAAO,OAAQ,gBAAiB,SAAU,EAC5C,CAAE,MAAO,OAAQ,gBAAiB,OAAQ,CAAA,CAElD,CAGA,MAAMkB,EAASpB,EAAY,IAAI,CAACqB,EAAQC,IAAe,CAGrD,MAAMC,EAAaF,EAAO,UAAU,CAAC,EAAIpB,EAAW,CAAC,GAAKoB,EAAO,UAAU,CAAC,EAAIpB,EAAW,CAAC,EAG5F,OAAO,IAAIrB,EAA0B,CACnC,KAAM,CACJ,OAAQyC,EAAO,KAAK,OACpB,WAAY,CACV,YAAa,CAAE,MAAOA,EAAO,YAAa,KAAM,CAAE,EAClD,eAAgB,CAAE,MAAOA,EAAO,KAAM,KAAM,CAAE,EAC9C,SAAU,CAAE,MAAOA,EAAO,MAAO,KAAM,CAAE,CAC3C,CACF,EACA,cAAe,GACf,YAAAnC,EACA,OAAAD,EACA,WAAY,CAACK,CAAU,EACvB,GAAIgC,EACJ,OAAQ,GACR,YAAarB,EAAW,OAASA,EAAa,KAC9C,UAAWE,EAEX,eAAgB,CAAC,IAAK,EAAG,GAAG,EAC5B,QAAS,EACT,WAAY,CAAE,UAAW,EAAM,EAC/B,SAAU,GACV,YAAa,EACb,QAAS,GACT,eAAgB,CACd,YAAaH,EACb,aAAcA,EACd,eAAgBC,CAClB,EAQA,QAAS,CAACsB,CAAA,CACX,CAAA,CACF,EAIC,OAAAC,EAAA,cAACC,EAAA,CACC,OAAAL,EACA,WAAY,GACZ,gBAAiB,GACjB,UAAAf,EACA,kBAAoBqB,GAAWhB,EAAgBgB,EAAE,SAAS,EAC1D,cAAe,EACf,QAASd,EACT,WAAAA,CAAA,EAKEY,EAAA,cAACG,EAAA,CACC,SAAUnB,EAAY,QAAQ,SAC9B,oBAAqB,GACrB,qBAAsBoB,CAAA,CACxB,CAAA,CAIR,4ECrGA,MAAAC,EAAAC,EAAA,CACA,KAAA,mCACA,MAAA,CACA,gBAAA,CAAA,KAAA,MAAA,SAAA,EAAA,EACA,WAAA,CAAA,KAAA,MAAA,SAAA,EAAA,CACA,EACA,MAAA,CACA,MAAA,CAEA,YAAA,CAAA,EACA,qBAAA,CAAA,EACA,OAAA,CAAA,CAAA,CAEA,EACA,SAAA,CACA,KAAA,OAAA,KAAA,WACA,KAAA,YAAA,KAAA,gBACA,KAAA,6BAAA,CACA,EACA,MAAA,CACA,iBAAA,CACA,KAAA,YAAA,KAAA,gBACA,QAAA1C,EAAA,EAAAA,EAAA,KAAA,gBAAA,OAAAA,IACA,KAAA,YAAAA,CAAA,EAAA,KAAA,qBAAA,KAAA,YAAAA,CAAA,EAAA,CAAA,EACA,KAAA,gBAAAA,CAAA,EAAA,KAAA,qBAAA,KAAA,gBAAAA,CAAA,EAAA,CAAA,CAEA,EACA,YAAA,CACA,KAAA,OAAA,KAAA,UACA,CACA,EACA,QAAA,CAIA,UAAA,CAEA,KAAA,gBAAA,KAAA,KAAA,gBAAA,KAAA,gBAAA,OAAA,CAAA,CAAA,EACA,KAAA,WAAA,KAAA,KAAA,WAAA,KAAA,WAAA,OAAA,CAAA,CAAA,EACA,KAAA,MAAA,wBAAA,KAAA,OAAA,KAAA,WAAA,CACA,EAQA,mBAAA2C,EAAA,CAEA,GAAAA,EAAA,SAAA,EACA,MAAA,IAAA,MAAA,4CAAA,EAYA,MAFA,IANAA,EAAA,IAAAZ,GAAA,CACA,MAAAa,EAAAb,EAAA,SAAA,EAAA,EACA,OAAAa,EAAA,SAAA,EAAA,IAAAA,EAAAA,CAAA,CACA,EAGA,KAAA,EAAA,CAAA,EAGA,EAQA,mBAAAC,EAAA,CAKA,GAHAA,EAAAA,EAAA,QAAA,KAAA,EAAA,EAGAA,EAAA,SAAA,EACA,MAAA,IAAA,MAAA,iDAAA,EAIA,MAAAC,EAAA,SAAAD,EAAA,MAAA,EAAA,CAAA,EAAA,EAAA,EACAE,EAAA,SAAAF,EAAA,MAAA,EAAA,CAAA,EAAA,EAAA,EACAG,EAAA,SAAAH,EAAA,MAAA,EAAA,CAAA,EAAA,EAAA,EAEA,MAAA,CAAAC,EAAAC,EAAAC,CAAA,CACA,EASA,qBAAAC,EAAAC,EAAA,CACA,GAAAA,EAAA,EACA,MAAA,IAAA,MAAA,kDAAA,EAGA,MAAAC,EAAA,KAAA,IAAA,GAAAD,CAAA,EACA,OAAA,KAAA,MAAAD,EAAAE,CAAA,EAAAA,CACA,EAOA,cAAA9C,EAAA,CACA,GAAAA,GAAA,EAAA,OACA,MAAA+C,EAAA,KAAA,WAAA/C,CAAA,EACAgD,EAAA,KAAA,WAAAhD,EAAA,CAAA,EAEAiD,EAAA,KAAA,YAAAjD,EAAA,CAAA,EACAkD,EAAA,KAAA,YAAAlD,CAAA,EAEAmD,EAAA,KAAA,sBAAAJ,EAAAC,CAAA,EACAI,GAAAH,EAAAC,GAAA,EAEA,KAAA,WAAA,OAAAlD,EAAA,EAAA,EAAAmD,CAAA,EACA,KAAA,YAAA,OAAAnD,EAAA,EAAAoD,CAAA,EAEA,KAAA,MAAA,wBAAA,KAAA,OAAA,KAAA,WAAA,CACA,EAUA,sBAAAC,EAAAC,EAAA,CAEA,GAAAD,EAAA,SAAA,GAAAC,EAAA,SAAA,EACA,MAAA,IAAA,MAAA,wCAAA,EAUA,MANA,CACA,KAAA,OAAAD,EAAA,CAAA,EAAAC,EAAA,CAAA,GAAA,CAAA,EACA,KAAA,OAAAD,EAAA,CAAA,EAAAC,EAAA,CAAA,GAAA,CAAA,EACA,KAAA,OAAAD,EAAA,CAAA,EAAAC,EAAA,CAAA,GAAA,CAAA,CAAA,CAIA,EAMA,iBAAAtD,EAAA,CAEA,KAAA,gBAAA,OAAAA,EAAA,EAAA,CAAA,EACA,KAAA,WAAA,OAAAA,EAAA,CAAA,EACA,KAAA,MAAA,wBAAA,KAAA,OAAA,KAAA,WAAA,EACA,KAAA,6BAAA,CACA,EAKA,kBAAA,CACA,KAAA,MAAA,OAAA,CACA,EAOA,YAAAuD,EAAAvD,EAAA,CAEA,MAAAwD,EAAA,KAAA,mBAAAD,EAAA,OAAA,KAAA,EACA,KAAA,OAAAvD,CAAA,EAAAwD,EACA,KAAA,MAAA,cAAA,KAAA,MAAA,CACA,EAQA,iBAAAD,EAAAvD,EAAA,CACA,KAAA,YAAAA,CAAA,EAAAuD,EAAA,OAAA,MACA,QAAA,EAAA,EAAA,EAAA,KAAA,gBAAA,OAAA,IACA,KAAA,YAAA,CAAA,IAAA,SACA,KAAA,YAAA,CAAA,EAAA,KAAA,qBAAA,KAAA,gBAAA,CAAA,EAAA,CAAA,GAGA,KAAA,MAAA,mBAAA,KAAA,WAAA,EACA,KAAA,6BAAA,CACA,EAMA,8BAAA,CACA,IAAAE,EAAA,OAAA,kBACA,KAAA,qBAAA,GACA,IAAAC,EAAA,GACA,QAAA,EAAA,EAAA,EAAA,KAAA,YAAA,OAAA,IACA,KAAA,qBAAA,CAAA,EAAA,GACAD,EAAA,KAAA,YAAA,CAAA,EAAAA,EAAA,KAAA,YAAA,CAAA,EAAAA,EAEA,KAAA,YAAA,CAAA,EAAAA,IACA,KAAA,qBAAA,CAAA,EAAA,GACAC,EAAA,IAGA,OAAAA,CACA,CACA,CACA,CAAA,+tDCvOAC,GAAA,CACA,SAAA,CACA,GAAA,CACA,QAAA,kBACA,QAAA,uBACA,UAAA,UACA,UAAA,YACA,YAAA,eACA,UAAA,YACA,MAAA,QACA,MAAA,QACA,UAAA;AAAA;AAAA,wIACA,EACA,GAAA,CACA,QAAA,mBACA,QAAA,eACA,UAAA,QACA,UAAA,WACA,YAAA,mBACA,UAAA,aACA,MAAA,OACA,MAAA,QACA,CACA,CACA,EAwDAvB,GAAAC,EAAA,CACA,KAAA,SACA,KAAAsB,GACA,WAAA,CACA,iBAAAC,EACA,YAAAC,EACA,UAAAC,EACA,WAAAC,EACA,YAAAC,EAAA,cACAC,EACA,iCAAAC,EACA,EACA,MAAA,CACA,KAAA,CAAA,KAAA,OAAA,SAAA,EAAA,EACA,UAAA,CAAA,KAAA,OAAA,SAAA,EAAA,EACA,WAAA,OACA,OAAA,OACA,UAAA,OACA,EACA,MAAA,CACA,MAAA,CACA,UAAA,CACA,QAAA,EACA,SAAA,EACA,OAAA,EACA,WAAA,IACA,aAAA,UACA,WAAA,CAAA,aAAA,WAAA,UAAA,MAAA,QAAA,MAAA,SAAA,EACA,KAAA,GAEA,wBAAA,KAAA,kBACA,gBAAA,EACA,EACA,UAAA,EACA,UAAA,IACA,sBAAA,GACA,OAAA,UAAA,KAAA,MAAA,KAAA,KAAA,OAAA,CAAA,CAAA,GACA,SAAA,cAAA,KAAA,MAAA,KAAA,KAAA,OAAA,CAAA,CAAA,GACA,WAAA,CAAA,EAAA,CAAA,EACA,UAAA,EACA,YAAA,GACA,WAAA,CAAA,EAAA,IAAA,EACA,OAAA,CACA,CAAA,IAAA,IAAA,GAAA,EACA,CAAA,IAAA,IAAA,GAAA,CACA,EACA,YAAA,CAAA,CAAA,EACA,MAAA,CAAA,IAAA,IAAA,EACA,UAAA,CAAA,IAAA,IAAA,EACA,YAAA,KACA,qBAAA,CACA,MAAA,GACA,YAAA,GACA,KAAA,GACA,WAAA,GACA,UAAA,GACA,OAAA,IACA,UAAA,EACA,OAAA,KACA,KAAA,CACA,EACA,mBAAA,CAAA,KAAA,EAAA,EACA,aAAA,CAAA,EACA,WAAA,KACA,WAAA,CACA,MAAA,GACA,YAAA,GACA,KAAA,GACA,WAAA,GACA,UAAA,GACA,OAAA,KACA,KAAA,EAEA,QAAA,EACA,SAAA,EACA,QAAA,IACA,OAAA,EACA,UAAA,UACA,KAAA,GACA,YAAA,IACA,EACA,QAAA,CACA,cAAA,GACA,UAAA,GACA,WAAA,GACA,UAAA,EACA,EACA,YAAA,CAAA,EACA,SAAA,GACA,SAAA,KACA,cAAA,KACA,QAAA,KACA,aAAA,yCACA,cAAA,EACA,qBAAA,CAAA,CAEA,EACA,MAAA,SAAA,CACA,KAAA,OAAA,OAAA,gBAAA,CAAA,KAAA,SAAA,EACA,KAAA,QAAA,UAAA,KAAA,UACA,KAAA,QAAA,WAAA,KAAA,YAAA,GACA,KAAA,QAAA,UAAA,KAAA,UAEA,MAAA,KAAA,gBACA,MAAA,KAAA,iBAEA,MAAA,YAEA,KAAA,eAAA,EAGA,KAAA,SAAA,EACA,KAAA,QAAA,cAAA,GAAA,KAAA,MAAA,EAAA,SAAA,CAAA,GAEA,KAAA,UAAA,MAAA,KAAA,YACA,EACA,eAAA,CAEAlD,EAAA,KAAA,MAAA,EAAA,OACA,OAAAA,EAAA,KAAA,MAAA,EAEA,GAAA,CACA,KAAA,aACA,KAAA,WAAA,YAAA,CAAA,UAAA,EAAA,CAAA,EACA,KAAA,WAAA,aAEA,KAAA,eAAA,KAAA,cAAA,gBACA,EAAA,CACA,QAAA,KAAA,CAAA,CACA,CAEA,KAAA,UAAA,OAAA,qBAAA,KAAA,QAAA,EAEA,KAAA,OAAA,OAAA,gBAAA,EAAA,CACA,EAEA,SAAA,CACA,SAAA,CACA,OAAA,IAAAmD,EAAA,KAAA,WAAApD,CAAA,CACA,EACA,YAAA,CACA,MAAAqD,EAAA,KAAA,OAAA,MAAA,YAAA,OACAC,GAAAA,EAAA,OAAA,KAAA,IAAA,EAEA,GAAAD,EAAA,SAAA,EACA,cAAA,IAAA,iBAAA,EACA,MAEA,OAAAA,EAAA,CAAA,CACA,EAEA,cAAA,CACA,OAAA,KAAA,YACA,CACA,EACA,MAAA,CACA,0BAAA,CACApD,EAAA,KAAA,MAAA,GAAAA,EAAA,KAAA,MAAA,GACA,CACA,EACA,QAAA,CACA,mBAAA,CACA,KAAA,sBAAA,CAAA,KAAA,qBACA,EACA,uBAAAsD,EAAA,CACA,KAAA,qBAAAA,EAAA,CAAA,EACA,KAAA,WAAAA,EACA,KAAA,WAAA,CACA,KAAA,iCAAAA,EAAA,CAAA,CAAA,EACA,KAAA,iCAAAA,EAAA,CAAA,CAAA,CAAA,CAEA,EAEA,gBAAA,CACA,KAAA,QAAA,IAAA,eAAA,KAAA,QAAA,EACA,MAAAC,EAAA,SAAA,eAAA,MAAA,KAAA,MAAA,EAAA,EACA,KAAA,QAAA,QAAAA,CAAA,CACA,EAEA,UAAA,CACA,MAAAA,EAAA,SAAA,eAAA,GAAA,KAAA,MAAA,EAAA,EACAC,EAAAD,GAAA,YAAAA,EAAA,cAAA,8BACA,GAAAC,EAAA,CACA,MAAAC,EAAAF,EAAA,YAAA,IAAA,QAAA,OACAC,EAAA,MAAA,MAAAC,CACA,CACA,EAEA,UAAA,CACA,KAAA,cAAA,IAAAC,EAAA,CACA,MAAA,WACA,aAAA,GACA,MAAA,IACA,UAAA,SAAA,eAAA,KAAA,QAAA,GAAA,MAAA,CACA,EAEA,MAAAC,EAAA,KAAA,cACAA,EAAA,IAAA,KAAA,UAAA,SAAA,KAAA,UAAA,KAAA,UAAA,CAAA,EAEA,MAAAnF,EAAAmF,EAAA,UAAA,QAAA,EACAnF,EAAA,IAAA,KAAA,UAAA,aAAA,KAAA,UAAA,UAAA,EAAA,SAAA,KAAA,SAAA,EACAA,EAAA,IAAA,KAAA,UAAA,MAAA,EAAA,SAAA,KAAA,SAAA,EAEA,MAAAC,EAAAkF,EAAA,UAAA,aAAA,EACAlF,EAAA,IAAA,KAAA,UAAA,UAAA,EAAA,GAAA,CAAA,EAAA,SAAA,KAAA,SAAA,EACAA,EAAA,IAAA,KAAA,UAAA,WAAA,EAAA,IAAA,CAAA,EAAA,SAAA,KAAA,SAAA,EACAA,EAAA,IAAA,KAAA,UAAA,WAAA,EAAA,GAAA,CAAA,EAAA,SAAA,KAAA,SAAA,EACAA,EAAA,IAAA,KAAA,UAAA,wBAAA,EAAA,IAAA,CAAA,CACA,EACA,MAAA,iBAAA,CACA,GAAA,MAAA,UAEA,SAAA,IAAA,kBAAA,EAEA,GAAA,CACA,MAAAmF,EAAA,MAAA,KAAA,QAAA,YACA,KAAA,QAAA,UAAA,IAAA,KAAA,QAAA,UAAA,EAEA,KAAA,WAAAC,EAAA,MAAAD,CAAA,QACA,EAAA,CACA,QAAA,MAAA,CAAA,CACA,EACA,EAEA,MAAA,eAAA,CACA,GAAA,KAAA,OAAA,CACA,KAAA,aAAA,EACA,KAAA,WAAA,OAAA,OAAA,CAAA,EAAA,KAAA,MAAA,EACA,KAAA,mBAAA,EACA,MACA,CAEA,IAAA,OAAA,eAAA,EAAA,KAAA,KAAA,QAAA,UAAA,EAGA,MAAA,KAAA,2BAGA,KAAA,mBAAA,CAEA,EAEA,oBAAA,CACA,KAAA,SAGA,KAAA,OAAA,QAAA,KAAA,WAAA,KAAA,OAAA,QAAA,KAAA,YACA,KAAA,UAAA,OAAA,KAAA,OAAA,QAEA,OAAA,UAAA,SAAA,KAAA,KAAA,OAAA,WAAA,IAAA,iBAEA,KAAA,qBAAA,KAAA,OAAA,WAAA,EAGA,KAAA,OAAA,cACA,KAAA,OAAA,YAAA,OAAA,OAAA,GAAA,KAAA,OAAA,YAAA,OAAA,OACA,KAAA,MAAA,QAAA,CACA,KAAAE,EAAA,MACA,IAAA,yDACA,KAAA,qBAAA,KAAA,OAAA,YAAA,OAAA,MAAA,uBAAA,KAAA,OAAA,YAAA,OAAA,MAAA,6DAAA,CACA,GAEA,KAAA,UAAA,QAAA,KAAA,OAAA,YAAA,OAAA,OACA,KAAA,YAAA,KAAA,OAAA,YAAA,OACA,KAAA,OAAA,KAAA,OAAA,YAAA,SAIA,EAEA,qBAAArF,EAAA,CACA,KAAA,YAAAA,EACA,KAAA,UAAA,QAAA,EAAAA,EAAA,MACA,EAEA,oBAAA,CACA,IAAAsF,EAAA,YAGA,KAAA,WAAA,OAAA,OAAA,KAAA,WAAA,CACA,MAAA,eAAA,KAAA,QAAA,WACA,YAAA,KAAA,QAAA,WACA,KAAA,KAAA,QAAA,WACA,WAAAA,EACA,OAAA,KAAA,WAAA,OACA,KAAA,KAAA,WAAA,IAAA,CACA,EAEA,KAAA,MAAA,QAAA,KAAA,WAAA,OAAA,KAAA,WAAA,IAAA,CAEA,EAEA,MAAA,0BAAA,CACA,GAAA,CAEA,MAAAC,EACA,KAAA,QAAA,WAAA,QAAA,GAAA,EAAA,GACA,KAAA,QAAA,WACA,KAAA,QAAA,UAAA,IAAA,KAAA,QAAA,WAEAJ,EAAA,MAAA,KAAA,QAAA,YAAAI,CAAA,EACA,KAAA,qBAAA,OAAA,OAAA,GAAAH,EAAA,MAAAD,CAAA,CAAA,EACA,KAAA,aAAA,EACA,KAAA,cAAA,OACA,CAEA,QAAA,IAAA,QAAA,EAEA,KAAA,MAAA,QAAA,CACA,KAAAE,EAAA,MACA,IAAA,iBACA,KAAA,mBAAA,KAAA,QAAA,SAAA,IAAA,KAAA,QAAA,UAAA,EAAA,CACA,CACA,CACA,EAEA,cAAA,CACA,MAAAG,EAAA,IAAA,OAAA,eAAA,EAAA,KAAA,KAAA,QAAA,UAAA,EACA,IAAAC,EAAA,CAAA,EAEAD,GACA,QAAA,IAAA,UAAA,EACAC,EAAA,KAAA,uBAEA,QAAA,IAAA,SAAA,EACAA,EAAA,KAAA,QAGA,UAAAC,KAAA,KAAA,mBACAA,KAAAD,GACA,KAAA,MAAA,QAAA,CACA,KAAAJ,EAAA,MACA,IAAA,gCAAAK,CAAA,GACA,KAAA,yBAAA,OAAA,KAAA,KAAA,kBAAA,CAAA,EAAA,CACA,EAIAD,EAAA,QAAA,GACA,KAAA,MAAA,QAAA,CACA,KAAAJ,EAAA,QACA,IAAA,qBACA,KAAA,qDAAA,CACA,GAGAI,EAAA,KAAA,GAAAA,EAAA,KAAA,KACA,KAAA,MAAA,QAAA,CACA,KAAAJ,EAAA,QACA,IAAA,wCACA,KAAA,0CAAA,CACA,CAEA,EAEA,eAAA,CACA,KAAA,WAAA,OAAA,OAAA,CAAA,EAAA,KAAA,WAAA,KAAA,oBAAA,EAEA,MAAAM,EAAA,KAAA,WAAA,MACA,KAAA,WAAA,MACA,eAAA,KAAA,WAAA,KACA,KAAA,MAAA,QAAAA,CAAA,EAEA,KAAA,WAAA,UAAA,KAAA,UAAA,QAAA,KAAA,WAAA,SACA,KAAA,WAAA,WAAA,KAAA,UAAA,SAAA,KAAA,WAAA,UACA,KAAA,WAAA,SAAA,KAAA,UAAA,OAAA,KAAA,WAAA,QACA,KAAA,WAAA,UAAA,KAAA,UAAA,UAAA,EAAA,KAAA,WAAA,SACA,KAAA,WAAA,YAAA,KAAA,UAAA,YAAA,EAAA,KAAA,WAAA,UACA,EAEA,MAAA,gBAAA,CACA,GAAA,KAAA,WAAA,KAAA,WAAA,UACA,GAAA,CAIA,MAAAC,EAAA,MAHA,MAAA,KAAA,QAAA,YACA,KAAA,QAAA,UAAA,IAAA,KAAA,WAAA,SAAA,GAEA,cACAC,EAAAC,EAAA,oBAAAF,CAAA,EACAC,IACA,KAAA,aAAA,sDAAAA,CAAA,WACA,EAAA,CACA,QAAA,MAAA,CAAA,CACA,CAEA,EAEA,MAAA,aAAAN,EAAA,CACA,KAAA,QAAA,cAAA,kBAEA,IAAAQ,EAAA,EAEA,KAAA,WAAA,IAAAC,EAEA,KAAA,WAAA,UAAA,MAAAlC,GAAA,CACA,GAAAA,EAAA,KAAA,OACA,KAAA,QAAA,cAAAA,EAAA,KAAA,eACAA,EAAA,KAAA,MACA,KAAA,QAAA,cAAAA,EAAA,KAAA,MACA,KAAA,MAAA,QAAA,CACA,KAAAuB,EAAA,MACA,IAAA,oBACA,KAAA,kBAAA,KAAA,QAAA,SAAA,IAAA,KAAA,WAAA,IAAA,EAAA,CACA,UACAvB,EAAA,KAAA,SACA,KAAA,oBAAAiC,EAAAjC,EAAA,IAAA,UACAA,EAAA,KAAA,QAAA,CACA,KAAA,YAAA,KAAA,WAAA,YACA,IAAAmC,EAAA,OAAA,GAAA,KAAA,GAAA,WAAA,CAAA,GAAA,aACA,OAAA,SAAA,SAAAA,CAAA,CAAA,IAAAA,EAAA,QAAAA,CAAA,IACA,KAAA,WAAA,WAAAA,EAAA,YAAA,EACA,KAAA,aAAAV,CAAA,CAAA,KACA,CACA,MAAAW,EAAApC,EAAA,KAAA,KAAA,OAEAiC,GAAA,KAAA,aAAAjC,EAAA,KAAA,YAAAoC,CAAA,EAEAH,GAAAG,EACA,KAAA,UAAA,CAAA,EAAA,KAAA,EAIA,KAAA,YAAA,KAAApC,EAAA,IAAA,CACA,CAAA,EAGA,KAAA,WAAA,YAAA,CACA,SAAAyB,EACA,WAAA,KAAA,WACA,WAAA,KAAA,WAAA,UAAA,CACA,CACA,EAEA,aAAAY,EAAAD,EAAA,CACA,IAAAC,EAAA,CAAA,EAAAA,EAAAD,EAAA,EAAA,CAAA,GACA,IAAAC,EAAA,CAAA,EAAAA,EAAAD,EAAA,EAAA,CAAA,EAQA,EAEA,oBAAAH,EAAAK,EAAA,CACA,QAAA,IAAA,WAAA,CAAA,UAAAL,EAAA,KAAAK,EAAA,MAAA,KAAA,KAAA,SAAA,CAAA,EACA,KAAA,QAAA,cAAA,GACA,KAAA,WAAA,CAAA,KAAA,UAAA,CAAA,EAAA,KAAA,UAAA,CAAA,EAAA,IAAA,EACA,KAAA,SAAA,GACA,KAAA,MAAAA,EAAA,MAEA,KAAA,YAAA,KAAA,WAAA,YAEA,KAAA,UAAA,EACA,KAAA,SAAA,CACA,EAEA,SAAA,CACA,GAAA,CAAA,KAAA,YAAA,OAEA,KAAA,qBAAA,KAAA,eAAA,KAAA,MAAA,KAAA,WACA,MAAAC,EAAA,KAAA,qBAAA,KAAA,UAAA,CAAA,EAEAA,EAAA,KAAA,UAAA,CAAA,IACA,KAAA,UAAA,KAAA,MACA,KAAA,qBAAA,GAGA,MAAAC,EAAA,KAAA,WAAA,CAAA,EAAA,KAAA,WAAA,CAAA,EACA,KAAA,WAAA,CAAAD,EAAAA,EAAAC,CAAA,EAEA,KAAA,SAAA,OAAA,sBAAA,KAAA,OAAA,CACA,EAEA,iBAAA,CACA,KAAA,YAAA,CAAA,KAAA,YACA,KAAA,cACA,KAAA,qBAAA,KAAA,WAAA,CAAA,EAAA,KAAA,UAAA,CAAA,EACA,KAAA,UAAA,KAAA,IAAA,EAAA,KAAA,qBAAA,KAAA,cACA,KAAA,QAAA,EAEA,EAEA,WAAA,CACA,MAAAC,EAAA,KAAA,UAAA,SAEA,IAAAC,EAAAC,EAAA,CACA,SAAA,KAAA,UAAA,YAAA,EACA,QAAA,IACA,OAAA,MACA,MAAA,CACA,CAAA,EAAA,IAAAxG,GAAA,CAAAA,EAAA,CAAA,EAAAA,EAAA,CAAA,EAAAA,EAAA,CAAA,CAAA,CAAA,EAEA,KAAA,UAAA,OAAAuG,EAAAA,EAAA,WAEA,MAAAE,EAAA,KAAA,KAAA,UAAA,QAAA,GACA3G,EAAA,CAAA,EACA,QAAAG,EAAA,EAAAA,EAAA,KAAA,UAAA,QAAA,EAAAA,IACAH,EAAA,KAAAyG,EAAA,KAAA,MAAAE,EAAAxG,CAAA,CAAA,CAAA,EAEAH,EAAA,KAAAyG,EAAA,GAAA,CAAA,EAEA,KAAA,OAAAzG,EAIA,MAAA4G,EADA,KAAA,IAAA,KAAA,MAAA,CAAA,EAAA,EAAAJ,CAAA,EACA,KAAA,UAAA,UAAA,EAAA,IAKA,GAAA,CAAA,KAAA,WAAA,YAAA,CACA,MAAAvG,EAAA,CAAA,EACA,QAAAE,EAAA,EAAAA,EAAA,KAAA,UAAA,QAAAA,IAAA,CACA,MAAA0G,EAAAD,EAAAzG,EAAA,KAAA,UAAA,QACA2G,EAAA,KAAA,IAAAD,EAAAL,CAAA,EACAvG,EAAA,KAAA6G,CAAA,CACA,CAEA,KAAA,YAAA7G,CACA,CAGA,KAAA,UAAA,KAAA,UAAAD,EAAA,KAAA,WAAA,CACA,EAEA,UAAAA,EAAAC,EAAA,CAEA,KAAA,MAAA,CAAA,EAAA,KAAA,MAAA,CAAA,IAAA,IAEA,KAAA,YAAA,IAAA8G,EACA,KAAA,YAAA,iBAAA,CACA,QAAA,SACA,OAAA,SACA,OAAA/G,EAAA,IAAA,CAAAgH,EAAAxG,IAAA,CACA,MAAAsG,EAAA7G,EAAAO,GAAA,EAAAA,EAAAA,EAAA,CAAA,EACA,IAAAyG,EAAA,GAAA,KAAA,MAAA,IAAAH,CAAA,EAAA,IACA,OAAAtG,GAAA,IAAAyG,EAAA,KAAAA,GACAzG,GAAAR,EAAA,OAAA,IAAAiH,EAAA,KAAAA,GACA,CAAA,MAAAA,EAAA,MAAAD,EAAA,CACA,CAAA,CACA,EACA,KAAA,YAAA/G,EACA,EAEA,MAAA,WAAA,CACA,MAAA,KAAA,QAAA,oBAAA,KAAA,WAAA,MAAA,EAEA,GAAA,CACA,IAAAuF,EAAA,GAAA,KAAA,QAAA,SAAA,IAAA,KAAA,WAAA,IAAA,GACA,MAAA,KAAA,aAAAA,CAAA,EACA,KAAA,MAAA,UAAA,QACA,EAAA,CACA,QAAA,MAAA,CAAA,EACA,KAAA,QAAA,cAAA,GAAA,EACA,KAAA,MAAA,QAAA,CACA,KAAAF,EAAA,MACA,IAAA,wBACA,KAAA,0EAAA,CACA,CACA,CACA,EAEA,iCAAA9E,EAAA,CACA,MAAA0G,EAAA,KAAA,MAAA1G,EAAA,IAAA,EACA2G,EAAA,KAAA,OAAA3G,EAAA0G,EAAA,MAAA,EAAA,EACA,EAAA1G,EAAA0G,EAAA,KAAAC,EAAA,GAEAzG,EAAA,CAAA,EAAA,GAAAwG,CAAA,GAAA,EAAA,GAAAC,CAAA,GAAA,SAAA,EAAA,GAAA,EAAA,EAAA,GAAA,CAAA,GAAA,SAAA,EAAA,GAAA,GAEA,MAAA,GAAAzG,EAAA,CAAA,IAAAA,EAAA,CAAA,EACA,CACA,CACA,CAAA"}