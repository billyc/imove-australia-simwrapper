{"version":3,"file":"ColorsAndWidths-c85c3e08.js","sources":["../../node_modules/d3-scale-chromatic/src/colors.js","../../node_modules/d3-scale-chromatic/src/categorical/category10.js","../../node_modules/d3-scale-chromatic/src/categorical/Accent.js","../../node_modules/d3-scale-chromatic/src/categorical/Dark2.js","../../node_modules/d3-scale-chromatic/src/categorical/Paired.js","../../node_modules/d3-scale-chromatic/src/categorical/Pastel1.js","../../node_modules/d3-scale-chromatic/src/categorical/Pastel2.js","../../node_modules/d3-scale-chromatic/src/categorical/Set1.js","../../node_modules/d3-scale-chromatic/src/categorical/Set2.js","../../node_modules/d3-scale-chromatic/src/categorical/Set3.js","../../node_modules/d3-scale-chromatic/src/categorical/Tableau10.js","../../node_modules/d3-scale-chromatic/src/ramp.js","../../node_modules/d3-scale-chromatic/src/diverging/BrBG.js","../../node_modules/d3-scale-chromatic/src/diverging/PRGn.js","../../node_modules/d3-scale-chromatic/src/diverging/PiYG.js","../../node_modules/d3-scale-chromatic/src/diverging/PuOr.js","../../node_modules/d3-scale-chromatic/src/diverging/RdBu.js","../../node_modules/d3-scale-chromatic/src/diverging/RdGy.js","../../node_modules/d3-scale-chromatic/src/diverging/RdYlBu.js","../../node_modules/d3-scale-chromatic/src/diverging/RdYlGn.js","../../node_modules/d3-scale-chromatic/src/diverging/Spectral.js","../../node_modules/d3-scale-chromatic/src/sequential-multi/BuGn.js","../../node_modules/d3-scale-chromatic/src/sequential-multi/BuPu.js","../../node_modules/d3-scale-chromatic/src/sequential-multi/GnBu.js","../../node_modules/d3-scale-chromatic/src/sequential-multi/OrRd.js","../../node_modules/d3-scale-chromatic/src/sequential-multi/PuBuGn.js","../../node_modules/d3-scale-chromatic/src/sequential-multi/PuBu.js","../../node_modules/d3-scale-chromatic/src/sequential-multi/PuRd.js","../../node_modules/d3-scale-chromatic/src/sequential-multi/RdPu.js","../../node_modules/d3-scale-chromatic/src/sequential-multi/YlGnBu.js","../../node_modules/d3-scale-chromatic/src/sequential-multi/YlGn.js","../../node_modules/d3-scale-chromatic/src/sequential-multi/YlOrBr.js","../../node_modules/d3-scale-chromatic/src/sequential-multi/YlOrRd.js","../../node_modules/d3-scale-chromatic/src/sequential-single/Blues.js","../../node_modules/d3-scale-chromatic/src/sequential-single/Greens.js","../../node_modules/d3-scale-chromatic/src/sequential-single/Greys.js","../../node_modules/d3-scale-chromatic/src/sequential-single/Purples.js","../../node_modules/d3-scale-chromatic/src/sequential-single/Reds.js","../../node_modules/d3-scale-chromatic/src/sequential-single/Oranges.js","../../node_modules/d3-scale-chromatic/src/sequential-multi/cividis.js","../../node_modules/d3-scale-chromatic/src/sequential-multi/cubehelix.js","../../node_modules/d3-scale-chromatic/src/sequential-multi/sinebow.js","../../node_modules/d3-scale-chromatic/src/sequential-multi/turbo.js","../../node_modules/d3-scale-chromatic/src/sequential-multi/viridis.js","../../src/js/customColors.ts","../../src/js/ColorsAndWidths.ts"],"sourcesContent":["export default function(specifier) {\n  var n = specifier.length / 6 | 0, colors = new Array(n), i = 0;\n  while (i < n) colors[i] = \"#\" + specifier.slice(i * 6, ++i * 6);\n  return colors;\n}\n","import colors from \"../colors.js\";\n\nexport default colors(\"1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf\");\n","import colors from \"../colors.js\";\n\nexport default colors(\"7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666\");\n","import colors from \"../colors.js\";\n\nexport default colors(\"1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666\");\n","import colors from \"../colors.js\";\n\nexport default colors(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\");\n","import colors from \"../colors.js\";\n\nexport default colors(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\");\n","import colors from \"../colors.js\";\n\nexport default colors(\"b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc\");\n","import colors from \"../colors.js\";\n\nexport default colors(\"e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999\");\n","import colors from \"../colors.js\";\n\nexport default colors(\"66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3\");\n","import colors from \"../colors.js\";\n\nexport default colors(\"8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f\");\n","import colors from \"../colors.js\";\n\nexport default colors(\"4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab\");\n","import {interpolateRgbBasis} from \"d3-interpolate\";\n\nexport default scheme => interpolateRgbBasis(scheme[scheme.length - 1]);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"d8b365f5f5f55ab4ac\",\n  \"a6611adfc27d80cdc1018571\",\n  \"a6611adfc27df5f5f580cdc1018571\",\n  \"8c510ad8b365f6e8c3c7eae55ab4ac01665e\",\n  \"8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e\",\n  \"8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e\",\n  \"8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e\",\n  \"5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30\",\n  \"5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"af8dc3f7f7f77fbf7b\",\n  \"7b3294c2a5cfa6dba0008837\",\n  \"7b3294c2a5cff7f7f7a6dba0008837\",\n  \"762a83af8dc3e7d4e8d9f0d37fbf7b1b7837\",\n  \"762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837\",\n  \"762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837\",\n  \"762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837\",\n  \"40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b\",\n  \"40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"e9a3c9f7f7f7a1d76a\",\n  \"d01c8bf1b6dab8e1864dac26\",\n  \"d01c8bf1b6daf7f7f7b8e1864dac26\",\n  \"c51b7de9a3c9fde0efe6f5d0a1d76a4d9221\",\n  \"c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221\",\n  \"c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221\",\n  \"c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221\",\n  \"8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419\",\n  \"8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"998ec3f7f7f7f1a340\",\n  \"5e3c99b2abd2fdb863e66101\",\n  \"5e3c99b2abd2f7f7f7fdb863e66101\",\n  \"542788998ec3d8daebfee0b6f1a340b35806\",\n  \"542788998ec3d8daebf7f7f7fee0b6f1a340b35806\",\n  \"5427888073acb2abd2d8daebfee0b6fdb863e08214b35806\",\n  \"5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806\",\n  \"2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08\",\n  \"2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"ef8a62f7f7f767a9cf\",\n  \"ca0020f4a58292c5de0571b0\",\n  \"ca0020f4a582f7f7f792c5de0571b0\",\n  \"b2182bef8a62fddbc7d1e5f067a9cf2166ac\",\n  \"b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac\",\n  \"b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac\",\n  \"b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac\",\n  \"67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061\",\n  \"67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"ef8a62ffffff999999\",\n  \"ca0020f4a582bababa404040\",\n  \"ca0020f4a582ffffffbababa404040\",\n  \"b2182bef8a62fddbc7e0e0e09999994d4d4d\",\n  \"b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d\",\n  \"b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d\",\n  \"b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d\",\n  \"67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a\",\n  \"67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"fc8d59ffffbf91bfdb\",\n  \"d7191cfdae61abd9e92c7bb6\",\n  \"d7191cfdae61ffffbfabd9e92c7bb6\",\n  \"d73027fc8d59fee090e0f3f891bfdb4575b4\",\n  \"d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4\",\n  \"d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4\",\n  \"d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4\",\n  \"a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695\",\n  \"a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"fc8d59ffffbf91cf60\",\n  \"d7191cfdae61a6d96a1a9641\",\n  \"d7191cfdae61ffffbfa6d96a1a9641\",\n  \"d73027fc8d59fee08bd9ef8b91cf601a9850\",\n  \"d73027fc8d59fee08bffffbfd9ef8b91cf601a9850\",\n  \"d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850\",\n  \"d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850\",\n  \"a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837\",\n  \"a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"fc8d59ffffbf99d594\",\n  \"d7191cfdae61abdda42b83ba\",\n  \"d7191cfdae61ffffbfabdda42b83ba\",\n  \"d53e4ffc8d59fee08be6f59899d5943288bd\",\n  \"d53e4ffc8d59fee08bffffbfe6f59899d5943288bd\",\n  \"d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd\",\n  \"d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd\",\n  \"9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2\",\n  \"9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"e5f5f999d8c92ca25f\",\n  \"edf8fbb2e2e266c2a4238b45\",\n  \"edf8fbb2e2e266c2a42ca25f006d2c\",\n  \"edf8fbccece699d8c966c2a42ca25f006d2c\",\n  \"edf8fbccece699d8c966c2a441ae76238b45005824\",\n  \"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824\",\n  \"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"e0ecf49ebcda8856a7\",\n  \"edf8fbb3cde38c96c688419d\",\n  \"edf8fbb3cde38c96c68856a7810f7c\",\n  \"edf8fbbfd3e69ebcda8c96c68856a7810f7c\",\n  \"edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b\",\n  \"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b\",\n  \"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"e0f3dba8ddb543a2ca\",\n  \"f0f9e8bae4bc7bccc42b8cbe\",\n  \"f0f9e8bae4bc7bccc443a2ca0868ac\",\n  \"f0f9e8ccebc5a8ddb57bccc443a2ca0868ac\",\n  \"f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\n  \"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\n  \"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"fee8c8fdbb84e34a33\",\n  \"fef0d9fdcc8afc8d59d7301f\",\n  \"fef0d9fdcc8afc8d59e34a33b30000\",\n  \"fef0d9fdd49efdbb84fc8d59e34a33b30000\",\n  \"fef0d9fdd49efdbb84fc8d59ef6548d7301f990000\",\n  \"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000\",\n  \"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"ece2f0a6bddb1c9099\",\n  \"f6eff7bdc9e167a9cf02818a\",\n  \"f6eff7bdc9e167a9cf1c9099016c59\",\n  \"f6eff7d0d1e6a6bddb67a9cf1c9099016c59\",\n  \"f6eff7d0d1e6a6bddb67a9cf3690c002818a016450\",\n  \"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450\",\n  \"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"ece7f2a6bddb2b8cbe\",\n  \"f1eef6bdc9e174a9cf0570b0\",\n  \"f1eef6bdc9e174a9cf2b8cbe045a8d\",\n  \"f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d\",\n  \"f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\n  \"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\n  \"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"e7e1efc994c7dd1c77\",\n  \"f1eef6d7b5d8df65b0ce1256\",\n  \"f1eef6d7b5d8df65b0dd1c77980043\",\n  \"f1eef6d4b9dac994c7df65b0dd1c77980043\",\n  \"f1eef6d4b9dac994c7df65b0e7298ace125691003f\",\n  \"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f\",\n  \"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"fde0ddfa9fb5c51b8a\",\n  \"feebe2fbb4b9f768a1ae017e\",\n  \"feebe2fbb4b9f768a1c51b8a7a0177\",\n  \"feebe2fcc5c0fa9fb5f768a1c51b8a7a0177\",\n  \"feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\n  \"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\n  \"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"edf8b17fcdbb2c7fb8\",\n  \"ffffcca1dab441b6c4225ea8\",\n  \"ffffcca1dab441b6c42c7fb8253494\",\n  \"ffffccc7e9b47fcdbb41b6c42c7fb8253494\",\n  \"ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\n  \"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\n  \"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"f7fcb9addd8e31a354\",\n  \"ffffccc2e69978c679238443\",\n  \"ffffccc2e69978c67931a354006837\",\n  \"ffffccd9f0a3addd8e78c67931a354006837\",\n  \"ffffccd9f0a3addd8e78c67941ab5d238443005a32\",\n  \"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32\",\n  \"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"fff7bcfec44fd95f0e\",\n  \"ffffd4fed98efe9929cc4c02\",\n  \"ffffd4fed98efe9929d95f0e993404\",\n  \"ffffd4fee391fec44ffe9929d95f0e993404\",\n  \"ffffd4fee391fec44ffe9929ec7014cc4c028c2d04\",\n  \"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04\",\n  \"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"ffeda0feb24cf03b20\",\n  \"ffffb2fecc5cfd8d3ce31a1c\",\n  \"ffffb2fecc5cfd8d3cf03b20bd0026\",\n  \"ffffb2fed976feb24cfd8d3cf03b20bd0026\",\n  \"ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\n  \"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\n  \"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"deebf79ecae13182bd\",\n  \"eff3ffbdd7e76baed62171b5\",\n  \"eff3ffbdd7e76baed63182bd08519c\",\n  \"eff3ffc6dbef9ecae16baed63182bd08519c\",\n  \"eff3ffc6dbef9ecae16baed64292c62171b5084594\",\n  \"f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594\",\n  \"f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"e5f5e0a1d99b31a354\",\n  \"edf8e9bae4b374c476238b45\",\n  \"edf8e9bae4b374c47631a354006d2c\",\n  \"edf8e9c7e9c0a1d99b74c47631a354006d2c\",\n  \"edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32\",\n  \"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32\",\n  \"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"f0f0f0bdbdbd636363\",\n  \"f7f7f7cccccc969696525252\",\n  \"f7f7f7cccccc969696636363252525\",\n  \"f7f7f7d9d9d9bdbdbd969696636363252525\",\n  \"f7f7f7d9d9d9bdbdbd969696737373525252252525\",\n  \"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525\",\n  \"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"efedf5bcbddc756bb1\",\n  \"f2f0f7cbc9e29e9ac86a51a3\",\n  \"f2f0f7cbc9e29e9ac8756bb154278f\",\n  \"f2f0f7dadaebbcbddc9e9ac8756bb154278f\",\n  \"f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486\",\n  \"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486\",\n  \"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"fee0d2fc9272de2d26\",\n  \"fee5d9fcae91fb6a4acb181d\",\n  \"fee5d9fcae91fb6a4ade2d26a50f15\",\n  \"fee5d9fcbba1fc9272fb6a4ade2d26a50f15\",\n  \"fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\n  \"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\n  \"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"fee6cefdae6be6550d\",\n  \"feeddefdbe85fd8d3cd94701\",\n  \"feeddefdbe85fd8d3ce6550da63603\",\n  \"feeddefdd0a2fdae6bfd8d3ce6550da63603\",\n  \"feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\n  \"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\n  \"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704\"\n).map(colors);\n\nexport default ramp(scheme);\n","export default function(t) {\n  t = Math.max(0, Math.min(1, t));\n  return \"rgb(\"\n      + Math.max(0, Math.min(255, Math.round(-4.54 - t * (35.34 - t * (2381.73 - t * (6402.7 - t * (7024.72 - t * 2710.57))))))) + \", \"\n      + Math.max(0, Math.min(255, Math.round(32.49 + t * (170.73 + t * (52.82 - t * (131.46 - t * (176.58 - t * 67.37))))))) + \", \"\n      + Math.max(0, Math.min(255, Math.round(81.24 + t * (442.36 - t * (2482.43 - t * (6167.24 - t * (6614.94 - t * 2475.67)))))))\n      + \")\";\n}\n","import {cubehelix} from \"d3-color\";\nimport {interpolateCubehelixLong} from \"d3-interpolate\";\n\nexport default interpolateCubehelixLong(cubehelix(300, 0.5, 0.0), cubehelix(-240, 0.5, 1.0));\n","import {rgb} from \"d3-color\";\n\nvar c = rgb(),\n    pi_1_3 = Math.PI / 3,\n    pi_2_3 = Math.PI * 2 / 3;\n\nexport default function(t) {\n  var x;\n  t = (0.5 - t) * Math.PI;\n  c.r = 255 * (x = Math.sin(t)) * x;\n  c.g = 255 * (x = Math.sin(t + pi_1_3)) * x;\n  c.b = 255 * (x = Math.sin(t + pi_2_3)) * x;\n  return c + \"\";\n}\n","export default function(t) {\n  t = Math.max(0, Math.min(1, t));\n  return \"rgb(\"\n      + Math.max(0, Math.min(255, Math.round(34.61 + t * (1172.33 - t * (10793.56 - t * (33300.12 - t * (38394.49 - t * 14825.05))))))) + \", \"\n      + Math.max(0, Math.min(255, Math.round(23.31 + t * (557.33 + t * (1225.33 - t * (3574.96 - t * (1073.77 + t * 707.56))))))) + \", \"\n      + Math.max(0, Math.min(255, Math.round(27.2 + t * (3211.1 - t * (15327.97 - t * (27814 - t * (22569.18 - t * 6838.66)))))))\n      + \")\";\n}\n","import colors from \"../colors.js\";\n\nfunction ramp(range) {\n  var n = range.length;\n  return function(t) {\n    return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];\n  };\n}\n\nexport default ramp(colors(\"44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725\"));\n\nexport var magma = ramp(colors(\"00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf\"));\n\nexport var inferno = ramp(colors(\"00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4\"));\n\nexport var plasma = ramp(colors(\"0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921\"));\n","const customColors: { [key: string]: string[] } = {\n  greenRed: ['#a6d96a', '#d9ef8b', '#ffffbf', '#fee08b', '#fdae61', '#f46d43', '#d73027'],\n}\n\nexport { customColors }\n","// Helper functions to get colors from a column of data, using D3\nimport { scaleLinear, scaleThreshold, scaleOrdinal } from 'd3-scale'\nimport { rgb } from 'd3-color'\n\nimport * as d3sc from 'd3-scale-chromatic'\nimport * as d3color from 'd3-color'\nconst d3 = { ...d3sc, ...d3color }\nimport { customColors } from './customColors'\n\nimport { DataTableColumn, DataType, Status } from '@/Globals'\n\nimport store from '@/store'\n\nexport enum Style {\n  categorical,\n  diverging,\n  sequential,\n}\n\nexport interface Ramp {\n  ramp: string\n  style: Style\n  reverse?: boolean\n  steps?: number\n  breakpoints?: string\n}\n\nfunction generateColorArray(colors: string[], numberOfSteps: number): string[] {\n  if (colors.length < 2) {\n    throw new Error('At least two colors are required for interpolation.')\n  }\n\n  const colorArray: string[] = []\n\n  for (let i = 0; i < colors.length - 1; i++) {\n    const startRGB = hexToRgb(colors[i])\n    const endRGB = hexToRgb(colors[i + 1])\n\n    for (let step = 0; step < numberOfSteps; step++) {\n      const interpolatedColor = interpolateColor(startRGB, endRGB, numberOfSteps, step)\n      colorArray.push(rgbToHex(interpolatedColor))\n    }\n  }\n\n  return colorArray\n}\n\nfunction hexToRgb(hex: string): [number, number, number] {\n  const bigint = parseInt(hex.slice(1), 16)\n  const r = (bigint >> 16) & 255\n  const g = (bigint >> 8) & 255\n  const b = bigint & 255\n  return [r, g, b]\n}\n\nfunction interpolateColor(\n  startRGB: [number, number, number],\n  endRGB: [number, number, number],\n  steps: number,\n  step: number\n): [number, number, number] {\n  const [startR, startG, startB] = startRGB\n  const [endR, endG, endB] = endRGB\n\n  const r = Math.round(startR + ((endR - startR) * step) / steps)\n  const g = Math.round(startG + ((endG - startG) * step) / steps)\n  const b = Math.round(startB + ((endB - startB) * step) / steps)\n\n  return [r, g, b]\n}\n\nfunction rgbToHex(rgb: [number, number, number]): string {\n  const [r, g, b] = rgb\n  return `#${((1 << 24) | (r << 16) | (g << 8) | b).toString(16).slice(1)}`\n}\n\nexport function colorRamp(scale: Ramp, n: number): string[] {\n  let colors\n\n  console.log(d3)\n\n  if (Object.keys(customColors).includes(scale.ramp))\n    return generateColorArray(customColors[scale.ramp], n)\n\n  // categorical\n  if (scale.style === Style.categorical) {\n    const categories = d3[`scheme${scale.ramp}`]\n    return categories.slice(0, n)\n  }\n\n  // sequential and diverging\n  const scheme = `scheme${scale.ramp}`\n  if (n > 3 && d3[scheme] && d3[scheme][n]) {\n    colors = d3[`scheme${scale.ramp}`][n]\n  } else {\n    try {\n      const interpolate = d3[`interpolate${scale.ramp}`]\n      colors = []\n      for (let i = 0; i < n; ++i) {\n        // shave off the very dark edges of each band at low \"n\"\n        const fraction = n <= 3 ? (0.7 * i) / (n - 1) + 0.15 : i / (n - 1)\n        const rgb = interpolate(fraction)\n        const hex = d3.rgb(rgb).hex()\n        colors.push(hex)\n      }\n    } catch (e) {\n      // some ramps cannot be interpolated, give the highest one instead.\n      return colorRamp(scale, n - 1)\n    }\n  }\n\n  // fix center color if diverging: pale grey\n  if (scale.style === Style.diverging && n % 2 === 1) {\n    colors[Math.floor(n / 2)] = store.state.isDarkMode ? '#282828' : '#e4e4e4'\n  }\n\n  return colors\n}\n\nfunction getColorsForDataColumn(props: {\n  numFeatures: number\n  data: DataTableColumn\n  data2?: DataTableColumn\n  lookup: DataTableColumn\n  lookup2?: DataTableColumn\n  normalize?: DataTableColumn\n  normalLookup?: DataTableColumn\n  filter: Float32Array\n  options: any\n  relative?: boolean\n  join?: string\n}) {\n  // First: if there is no dataColumn yet, return empty everything\n  if (!props.data)\n    return {\n      array: null,\n      legend: [],\n      calculatedValues: null,\n      normalizedValues: null,\n    }\n\n  // Figure out what kind of thing the user wants\n  if (props.data.type === DataType.STRING || props.options.colorRamp.style == Style.categorical) {\n    return buildColorsBasedOnCategories(props)\n  } else if (props.data2) {\n    return buildDiffColorsBasedOnNumericValues(props)\n  } else {\n    return buildColorsBasedOnNumericValues(props)\n  }\n}\n\nfunction getWidthsForDataColumn(props: {\n  numFeatures: number\n  data: DataTableColumn\n  data2?: DataTableColumn\n  lookup: DataTableColumn\n  lookup2?: DataTableColumn\n  normalize?: DataTableColumn\n  join?: string\n  options: any\n}) {\n  // Figure out what kind of thing the user wants\n  if (props.data.type === DataType.STRING) {\n    return buildWidthsBasedOnCategories(props)\n  } else if (props.data2) {\n    return buildDiffWidthsBasedOnNumericValues(props)\n  } else {\n    return buildWidthsBasedOnNumericValues(props)\n  }\n}\n\nfunction buildWidthsBasedOnCategories(props: {\n  numFeatures: number\n  data: DataTableColumn\n  lookup: DataTableColumn\n  normalize?: DataTableColumn\n  options: any\n}) {\n  const { columnName, dataset, scaleFactor } = props.options\n\n  return { array: new Float32Array(), legend: [], calculatedValues: null }\n\n  // const keys = setColorBasedOnCategory.domain() as any[]\n  // const colors = setColorBasedOnCategory.range() as any[]\n  // console.log(keys, colors)\n  // keys.forEach((key, index) => (legend[key] = colors[index]))\n  // console.log({ legend })\n\n  // return rgbArray\n}\n\nfunction buildDiffWidthsBasedOnNumericValues(props: {\n  numFeatures: number\n  data: DataTableColumn\n  data2?: DataTableColumn\n  lookup: DataTableColumn\n  lookup2?: DataTableColumn\n  normalize?: DataTableColumn\n  join?: string\n  options: any\n}) {\n  const { numFeatures, data, data2, lookup, lookup2, normalize, join, options } = props\n  const { columnName, dataset, scaleFactor, relative } = options\n\n  if (isNaN(scaleFactor)) return { array: null, legend: [], calculatedValues: null }\n\n  const widths = new Float32Array(numFeatures)\n\n  // Calculate the raw values for each feature\n  const rawValues1 = new Float32Array(numFeatures)\n  const rawValues2 = new Float32Array(numFeatures)\n\n  if (data2 && lookup2) {\n    data.values.forEach((value, index) => {\n      rawValues1[lookup.values[index]] += value\n    })\n\n    data2.values.forEach((value, index) => {\n      rawValues2[lookup2.values[index]] += value\n    })\n  }\n\n  // Calc the differences\n  const diffValues = new Float32Array(numFeatures)\n  let pctDiffValues = new Float32Array(0)\n  if (relative) pctDiffValues = new Float32Array(numFeatures)\n\n  for (let i = 0; i < numFeatures; i++) {\n    diffValues[i] = rawValues1[i] - rawValues2[i]\n    if (relative) pctDiffValues[i] = 100 * (diffValues[i] / rawValues2[i])\n  }\n\n  const displayTheseDiffs = relative ? pctDiffValues : diffValues\n\n  if (scaleFactor) {\n    for (let i = 0; i < numFeatures; i++) {\n      widths[i] = Math.abs(displayTheseDiffs[i] / scaleFactor)\n    }\n  }\n\n  // console.log({ widths, displayTheseDiffs })\n\n  // For legend, let's show 1-2-4-8-16-32-64 pixels?\n  const legend = [] as any[]\n  for (const thickness of [1, 5, 10, 17, 25, 50]) {\n    legend.push({ label: scaleFactor * thickness, value: thickness })\n  }\n\n  legend[0].label = '<' + legend[0].label\n  legend[legend.length - 1].label = legend[legend.length - 1].label + '+'\n\n  return { array: widths, legend, calculatedValues: displayTheseDiffs }\n}\n\nfunction buildWidthsBasedOnNumericValues(props: {\n  numFeatures: number\n  data: DataTableColumn\n  lookup: DataTableColumn\n  normalize?: DataTableColumn\n  options: any\n}) {\n  const { numFeatures, data, lookup, normalize, options } = props\n  const { columnName, dataset, scaleFactor } = options\n\n  if (Number.isNaN(scaleFactor)) return { array: null, legend: [], calculatedValues: null }\n\n  const widths = new Float32Array(numFeatures)\n  const calculatedValues = new Float32Array(numFeatures)\n\n  if (scaleFactor) {\n    for (let i = 0; i < data.values.length; i++) {\n      const offset = lookup ? lookup.values[i] : i\n      widths[offset] = data.values[i] / scaleFactor\n      calculatedValues[offset] = data.values[i]\n    }\n  }\n\n  // For legend, let's show 1-2-4-8-16-32-64 pixels?\n  const legend = [] as any[]\n  for (const thickness of [1, 5, 10, 17, 25, 50]) {\n    legend.push({ label: scaleFactor * thickness, value: thickness })\n  }\n\n  legend[0].label = '<' + legend[0].label\n  legend[legend.length - 1].label = legend[legend.length - 1].label + '+'\n\n  return { array: widths, legend, calculatedValues }\n}\n\nfunction getHeightsBasedOnNumericValues(props: {\n  length: number\n  data: DataTableColumn\n  lookup: DataTableColumn\n  normalize?: DataTableColumn\n  join?: string\n  options: any\n}) {\n  const { length, data, lookup, normalize, join, options } = props\n  const { columnName, dataset, scaleFactor } = options\n\n  if (typeof scaleFactor !== 'number') return { heights: 0, calculatedValues: null }\n\n  const heights = new Float32Array(length)\n  const calculatedValues = new Float32Array(length)\n\n  if (join === '@count') {\n    // *** COUNT rows that have this lookup\n    for (let i = 0; i < data.values.length; i++) {\n      const offset = lookup ? lookup.values[i] : i\n      calculatedValues[offset] += 1\n    }\n  } else {\n    // *** SUM values in rows\n    for (let i = 0; i < data.values.length; i++) {\n      const offset = lookup ? lookup.values[i] : i\n      // always SUM, for now\n      calculatedValues[offset] += data.values[i]\n    }\n  }\n\n  let normalizedValues = data.values\n  let normalizedMax = data.max || -Infinity\n\n  // Normalize data\n  if (normalize) {\n    // console.log('NORMALIZING')\n    normalizedValues = new Float32Array(data.values.length)\n    normalizedMax = -Infinity\n    for (let i = 0; i < data.values.length; i++) {\n      normalizedValues[i] = normalize.values[i] ? data.values[i] / normalize.values[i] : NaN\n      if (normalizedValues[i] > normalizedMax) normalizedMax = normalizedValues[i]\n    }\n  }\n\n  if (scaleFactor) {\n    for (let i = 0; i < data.values.length; i++) {\n      const offset = lookup ? lookup.values[i] : i\n      calculatedValues[offset] = normalizedValues[i]\n      heights[offset] = normalizedValues[i] / scaleFactor\n    }\n  }\n  return { heights, calculatedValues, normalizedValues: null }\n}\n\nfunction getRadiusForDataColumn(props: {\n  length: number\n  data: DataTableColumn\n  lookup: DataTableColumn\n  normalize?: DataTableColumn\n  options: any\n  join?: string\n}) {\n  const { length, data, lookup, normalize, join, options } = props\n  const { columnName, dataset, scaleFactor } = options\n  // console.log(data, options)\n\n  if (typeof scaleFactor !== 'number') return { radius: 0, calculatedValues: null }\n\n  const radius = new Float32Array(length)\n  const calculatedValues = new Float32Array(length)\n\n  if (!scaleFactor) return { radius, calculatedValues }\n\n  if (join === '@count') {\n    // *** COUNT rows that have this lookup\n    for (let i = 0; i < data.values.length; i++) {\n      const offset = lookup ? lookup.values[i] : i\n      calculatedValues[offset] += 1\n    }\n  } else {\n    // *** SUM values in rows\n    for (let i = 0; i < data.values.length; i++) {\n      const offset = lookup ? lookup.values[i] : i\n      calculatedValues[offset] += data.values[i]\n    }\n  }\n\n  for (let i = 0; i < length; i++) {\n    radius[i] = Math.sqrt(calculatedValues[i] / scaleFactor)\n  }\n\n  return { radius, calculatedValues }\n}\n\nfunction buildColorsBasedOnCategories(props: {\n  data: DataTableColumn\n  filter: Float32Array\n  join?: string\n  lookup: DataTableColumn\n  normalize?: DataTableColumn\n  numFeatures: number\n  options: any\n}) {\n  const { numFeatures, data, lookup, normalize, join, options } = props\n  const { colorRamp, columnName, dataset, fixedColors } = options\n\n  const colorsAsRGB = buildRGBfromHexCodes(fixedColors)\n\n  // *scaleOrdinal* is the d3 function that maps categorical variables to colors.\n  // *range* is the list of colors which we received;\n  // *domain* is is auto-created by d3 from data for categorical.\n\n  const setColorBasedOnCategory = scaleOrdinal().range(colorsAsRGB)\n\n  const gray = store.state.isDarkMode ? 48 : 228\n  const rgbArray = new Uint8Array(numFeatures * 3).fill(gray)\n\n  const calculatedValues = []\n\n  for (let i = 0; i < data.values.length; i++) {\n    const offset = lookup ? lookup.values[i] : i\n    calculatedValues[offset] = data.values[i]\n  }\n\n  for (let i = 0; i < numFeatures; i++) {\n    if (props.filter[i] === -1) continue\n    if (calculatedValues[i] == undefined) continue\n\n    const color: any = setColorBasedOnCategory(calculatedValues[i])\n\n    const offset = i * 3\n    rgbArray[offset + 0] = color[0]\n    rgbArray[offset + 1] = color[1]\n    rgbArray[offset + 2] = color[2]\n  }\n\n  const legend = [] as any[]\n  const keys = setColorBasedOnCategory.domain() as any[]\n  const colors = setColorBasedOnCategory.range() as any[]\n\n  keys.forEach((key, index) => legend.push({ label: key, value: colors[index % colors.length] }))\n  legend.sort((a, b) => (a.label < b.label ? -1 : 1))\n\n  // console.log({ legend })\n\n  // build the hasCategory thing\n  const hasCategory = calculatedValues.map(v => !!v)\n  return { array: rgbArray, legend, calculatedValues: null, normalizedValues: null, hasCategory }\n}\n\nfunction buildDiffDomainBreakpoints(props: {\n  colorRamp: Ramp\n  fixedColors?: any[]\n  minDiff: number\n  maxDiff: number\n}) {\n  let { colorRamp, fixedColors, minDiff, maxDiff } = props\n  const steps = colorRamp.steps ?? fixedColors?.length ?? 5\n\n  // MANUAL BREAKPOINTS\n  if (colorRamp.breakpoints) {\n    const breakpoints = colorRamp.breakpoints.split(',').map((v: string) => parseFloat(v.trim()))\n\n    if (colorRamp.steps !== breakpoints.length + 1) {\n      throw Error('Color ramp \"steps\" must be one larger than number of breakpoints')\n    }\n\n    // must be increasing\n    let min = -Infinity\n    for (const breakpoint of breakpoints) {\n      if (breakpoint < min) throw Error('Breakpoints must be in lowest to highest order')\n      min = breakpoint\n    }\n\n    return breakpoints\n  }\n\n  // GUESS BREAKPOINTS OURSELVES\n  if (steps == 2) return [0]\n  if (steps == 3) return [-1, 1]\n\n  const biggest = maxDiff > Math.abs(minDiff) ? maxDiff : -1 * minDiff\n  const numBreaks = Math.floor(steps / 2) - 1\n  const divisor = numBreaks + 1\n\n  if (steps % 2 == 1) {\n    // ODD number of cells\n    const guessBreaks = [1]\n\n    for (let i = 1; i <= numBreaks; i++) {\n      guessBreaks.push((i * biggest) / divisor)\n    }\n\n    const breakpoints = guessBreaks\n      .slice()\n      .reverse()\n      .map(v => -1 * v)\n    breakpoints.push(...guessBreaks)\n    return breakpoints\n  } else {\n    // EVEN number of cells: split at zero\n    const guessBreaks = [0]\n\n    for (let i = 1; i <= numBreaks; i++) guessBreaks.push((i * biggest) / divisor)\n    const breakpoints = guessBreaks\n      .slice()\n      .reverse()\n      .map(v => -1 * v)\n\n    breakpoints.pop() // remove extra zero\n    breakpoints.push(...guessBreaks)\n\n    return breakpoints\n  }\n}\n\nfunction buildDiffColorsBasedOnNumericValues(props: {\n  numFeatures: number\n  data: DataTableColumn\n  data2?: DataTableColumn\n  lookup: DataTableColumn\n  lookup2?: DataTableColumn\n  normalize?: DataTableColumn\n  normalLookup?: DataTableColumn\n  relative?: boolean\n  options: any\n}) {\n  const { numFeatures, data, data2, lookup, lookup2, normalize, normalLookup, relative, options } =\n    props\n  const { colorRamp, columnName, dataset, fixedColors } = options\n\n  // Calculate the raw values for each feature\n  const rawValues1 = new Float32Array(numFeatures)\n  const rawValues2 = new Float32Array(numFeatures)\n\n  if (data2 && lookup2) {\n    data.values.forEach((value, index) => {\n      rawValues1[lookup.values[index]] += value\n    })\n\n    data2.values.forEach((value, index) => {\n      rawValues2[lookup2.values[index]] += value\n    })\n  }\n\n  if (normalize) {\n    // build denominator\n    const normalDenominator = new Float32Array(numFeatures)\n    normalize.values.forEach((value, index) => {\n      // use normal value directly if it comes from featureset; otherwise use normalLookup\n      const offset = normalLookup ? normalLookup.values[index] : index\n      normalDenominator[offset] = value\n    })\n\n    // scale by denominator\n    for (let i = 0; i < numFeatures; i++) {\n      rawValues1[i] /= normalDenominator[i]\n      rawValues2[i] /= normalDenominator[i]\n    }\n  }\n\n  // Calc the differences\n  const diffValues = new Float32Array(numFeatures)\n  let pctDiffValues = new Float32Array(0)\n  if (relative) pctDiffValues = new Float32Array(numFeatures)\n\n  for (let i = 0; i < numFeatures; i++) {\n    diffValues[i] = rawValues1[i] - rawValues2[i]\n    if (relative) pctDiffValues[i] = 100 * (diffValues[i] / rawValues2[i])\n  }\n\n  const displayTheseDiffs = relative ? pctDiffValues : diffValues\n\n  const minDiff = displayTheseDiffs.reduce(\n    (a, b) => (Number.isFinite(a) ? Math.min(a, b) : b),\n    Infinity\n  )\n  const maxDiff = displayTheseDiffs.reduce(\n    (a, b) => (Number.isFinite(a) ? Math.max(a, b) : b),\n    -Infinity\n  )\n\n  // *range* is the list of colors;\n  // *domain* is the list of breakpoints in the 0-1.0 continuum; it is auto-created from data for categorical.\n  // *scaleOrdinal* is the d3 function that maps categorical variables to colors.\n  // *scaleThreshold* is the d3 function that maps numerical values to the color buckets\n\n  let domain\n  if (minDiff < 0) {\n    // if min is NEGATIVE, do a diverging split no matter what\n    domain = buildDiffDomainBreakpoints({ colorRamp, fixedColors, minDiff, maxDiff })\n  } else {\n    // if min is POSITIVE, do a normal sequence\n    domain = buildBreakpointsForNumericValues({\n      colorRamp,\n      fixedColors,\n      min: minDiff,\n      max: maxDiff,\n    }).map(breakpoint => (colorRamp.style === Style.diverging ? breakpoint : breakpoint * maxDiff))\n  }\n\n  const colorsAsRGB = buildRGBfromHexCodes(fixedColors)\n  const setColorBasedOnValue: any = scaleThreshold().range(colorsAsRGB).domain(domain)\n\n  const gray = store.state.isDarkMode ? [48, 48, 48] : [212, 212, 212]\n\n  const rgbArray = new Uint8Array(numFeatures * 3)\n\n  displayTheseDiffs.forEach((value, index) => {\n    const color = Number.isFinite(value) ? setColorBasedOnValue(value) : gray\n    const offset = index * 3\n    rgbArray[offset + 0] = color[0]\n    rgbArray[offset + 1] = color[1]\n    rgbArray[offset + 2] = color[2]\n  })\n\n  const legend = [] as any[]\n  const keys = setColorBasedOnValue.domain() as any[]\n  const colors = setColorBasedOnValue.range() as any[]\n\n  // need to figure out RANGES, not just breakpoints:\n  let lowerBound = undefined\n  for (let i = 0; i < keys.length; i++) {\n    const upperBound = keys[i]\n    const lowerLabel = Math.round(lowerBound * 1)\n    const upperLabel = Math.round(upperBound * 1)\n    legend.push({\n      label: lowerBound !== undefined ? `${lowerLabel} — ${upperLabel}` : `< ${upperLabel}`,\n      value: colors[i],\n    })\n    lowerBound = upperBound\n  }\n  legend.push({\n    label: `> ${Math.round(lowerBound * 1)}`,\n    value: colors[keys.length],\n  })\n\n  return { array: rgbArray, legend, calculatedValues: displayTheseDiffs, normalizedValues: null }\n}\n\nfunction buildBreakpointsForNumericValues(props: {\n  colorRamp: Ramp\n  fixedColors: any[]\n  min: number\n  max: number\n}): number[] {\n  const { colorRamp, fixedColors, min, max } = props\n\n  // if using a diverging (zero-centered) scale, try to make a good guess as to what user wants\n  if (colorRamp.style === Style.diverging) {\n    return buildDiffDomainBreakpoints({ colorRamp, fixedColors, minDiff: min, maxDiff: max })\n  }\n\n  // Continuous (non-diverging) scale:\n  // Build breakpoints between 0.0 - 1.0 to match the number of color swatches\n  // e.g. If there are five colors, then we need 4 breakpoints: 0.2, 0.4, 0.6, 0.8.\n  // An exponent reduces visual dominance of very large values at the high end of the scale\n  const numColors = fixedColors.length\n  const exponent = 3.0\n  const domain = new Array(numColors - 1)\n    .fill(0)\n    .map((v, i) => Math.pow((1 / numColors) * (i + 1), exponent))\n\n  return domain\n}\n\nfunction buildColorsBasedOnNumericValues(props: {\n  numFeatures: number\n  data: DataTableColumn\n  lookup: DataTableColumn\n  normalize?: DataTableColumn\n  normalLookup?: DataTableColumn\n  options: { colorRamp: Ramp; fixedColors: any[] }\n  join?: string\n}) {\n  const { numFeatures, data, lookup, normalize, normalLookup, options, join } = props\n  const { colorRamp, fixedColors } = options\n\n  const isDivergingScale = colorRamp?.style === Style.diverging\n\n  // CALCULATE aggregated values. This might be a job for crossfilter2 later\n  const calculatedValues = new Float32Array(numFeatures)\n  if (join === '@count') {\n    // *** COUNT rows that have this lookup\n    for (let i = 0; i < data.values.length; i++) {\n      const offset = lookup ? lookup.values[i] : i\n      calculatedValues[offset] += 1\n    }\n  } else {\n    // *** SUM values in rows (always sum, for now)\n    for (let i = 0; i < data.values.length; i++) {\n      const offset = lookup ? lookup.values[i] : i\n      calculatedValues[offset] += data.values[i]\n    }\n  }\n\n  // Get max\n  let normalizedValues = calculatedValues\n  let normalizedMax = calculatedValues[0]\n  let nMaxLength = normalizedValues.length\n  for (let i = 1; i < nMaxLength; ++i) {\n    normalizedMax = Math.max(normalizedMax, calculatedValues[i])\n  }\n\n  normalizedMax = normalizedMax ?? -Infinity\n\n  // Normalize data -------------------------------------------------\n\n  if (normalize) {\n    normalizedValues = new Float32Array(numFeatures)\n    normalizedMax = -Infinity\n\n    // build denominator\n    const normalDenominator = new Float32Array(numFeatures)\n    normalize.values.forEach((value, index) => {\n      // use normal value directly if it comes from featureset; otherwise use normalLookup\n      const offset = normalLookup ? normalLookup.values[index] : index\n      normalDenominator[offset] = value\n    })\n\n    // scale by denominator\n    for (let i = 0; i < numFeatures; i++) {\n      normalizedValues[i] = calculatedValues[i] / normalDenominator[i]\n      normalizedMax = Math.max(normalizedValues[i], normalizedMax)\n    }\n  }\n\n  const minimum = normalizedValues.reduce(\n    (a, b) => (Number.isFinite(a) ? Math.min(a, b) : b),\n    Infinity\n  )\n\n  // warn user about negative numbers\n  if (!isDivergingScale && minimum < 0) {\n    throw Error(`Column \"${data.name}\" has negative values: use a diverging color scale`)\n    // 'Data containing negative numbers usually require a zero-centered (\"diverging\") color scale'\n  }\n\n  // // build breakpoints and colors\n  const colorsAsRGB = buildRGBfromHexCodes(fixedColors)\n  const breakpoints = buildBreakpointsForNumericValues({\n    colorRamp,\n    fixedColors,\n    min: minimum,\n    max: normalizedMax,\n  })\n\n  // *scaleThreshold* is the d3 function that maps numerical values from [0.0,1.0) to the color buckets\n  // *range* is the list of colors;\n  // *domain* is the list of breakpoints (usually 0.0-1.0 continuum or zero-centered)\n  const setColorBasedOnValue: any = scaleThreshold().range(colorsAsRGB).domain(breakpoints)\n\n  const rgbArray = new Uint8Array(numFeatures * 3)\n  const gray = store.state.isDarkMode ? [48, 48, 48] : [212, 212, 212]\n\n  for (let i = 0; i < numFeatures; i++) {\n    const value = isDivergingScale\n      ? normalizedValues[i]\n      : normalizedValues[i] / (normalizedMax || 1)\n\n    const color = Number.isNaN(value) ? gray : setColorBasedOnValue(value)\n    const colorOffset = i * 3\n    rgbArray[colorOffset + 0] = color[0]\n    rgbArray[colorOffset + 1] = color[1]\n    rgbArray[colorOffset + 2] = color[2]\n  }\n\n  // Generate LEGEND ranges ---------------------------------\n\n  const legend = [] as any[]\n  const domainBreakpoints = setColorBasedOnValue.domain() as any[]\n  const colors = setColorBasedOnValue.range() as any[]\n\n  let precision = normalizedMax >= 1000 ? 0 : 3\n\n  let lowerBound = minimum\n  for (let i = 0; i < domainBreakpoints.length; i++) {\n    let upperBound = domainBreakpoints[i]\n    // Scale the legend labels if we are in regular scale mode (non-divergent)\n    if (!isDivergingScale) {\n      // lowerBound *= normalizedMax\n      upperBound *= normalizedMax\n    }\n    const lowerLabel = truncateFractionalPart({ value: lowerBound, precision })\n    const upperLabel = truncateFractionalPart({ value: upperBound, precision })\n    legend.push({\n      label: `${lowerLabel} — ${upperLabel}`,\n      value: colors[i],\n    })\n    lowerBound = upperBound\n  }\n\n  // final bucket:\n  legend.push({\n    label: `${truncateFractionalPart({\n      value: lowerBound, // isDivergingScale ? lowerBound : lowerBound * normalizedMax,\n      precision,\n    })} — ${truncateFractionalPart({ value: normalizedMax, precision })}`,\n    value: colors[domainBreakpoints.length],\n  })\n\n  return {\n    array: rgbArray,\n    calculatedValues,\n    normalizedValues: normalize && normalizedValues,\n    legend,\n  }\n}\n\n// helpers ------------------------------------------------------------\n\n// deck.gl colors must be in rgb[] or rgba[] format\nfunction buildRGBfromHexCodes(hexcodes: string[]) {\n  const colorsAsRGB: any = hexcodes.map(hexcolor => {\n    const c = rgb(hexcolor)\n    return [c.r, c.g, c.b]\n  })\n  return colorsAsRGB\n}\n\n// this will only round a number if it is a plain old regular number with\n// a fractional part to the right of the decimal point.\nfunction truncateFractionalPart({ value, precision }: { value: any; precision?: number }) {\n  // default: 3 decimals\n  let usePrecision = precision ?? 3\n  if (usePrecision == 0) usePrecision = -1 // truncates the decimal point itself\n\n  if (typeof value !== 'number') return value\n\n  let printValue = '' + value\n  if (printValue.includes('.') && printValue.indexOf('.') === printValue.lastIndexOf('.')) {\n    if (/\\d$/.test(printValue)) {\n      const clipped = printValue.substring(0, 1 + usePrecision + printValue.lastIndexOf('.'))\n      // remove trailing zeroes\n      try {\n        if (parseInt(clipped.substring(1 + clipped.indexOf('.'))) === 0) {\n          return clipped.substring(0, clipped.indexOf('.'))\n        }\n      } catch (e) {\n        // can ignore this\n      }\n      return clipped\n    }\n  }\n\n  return value\n}\n\nexport default {\n  getHeightsBasedOnNumericValues,\n  getColorsForDataColumn,\n  getWidthsForDataColumn,\n  getRadiusForDataColumn,\n}\n"],"names":["colors","specifier","n","i","category10","Accent","Dark2","Paired","Pastel1","Pastel2","Set1","Set2","Set3","Tableau10","ramp$1","scheme","interpolateRgbBasis","ramp","cividis","t","interpolateCubehelixLong","cubehelix","c","rgb","pi_1_3","pi_2_3","sinebow","x","turbo","range","interpolateViridis","magma","inferno","plasma","customColors","d3","d3sc","d3color","Style","Style2","generateColorArray","numberOfSteps","colorArray","startRGB","hexToRgb","endRGB","step","interpolatedColor","interpolateColor","rgbToHex","hex","bigint","r","g","b","steps","startR","startG","startB","endR","endG","endB","colorRamp","scale","interpolate","fraction","store","getColorsForDataColumn","props","DataType","buildColorsBasedOnCategories","buildDiffColorsBasedOnNumericValues","buildColorsBasedOnNumericValues","getWidthsForDataColumn","buildWidthsBasedOnCategories","buildDiffWidthsBasedOnNumericValues","buildWidthsBasedOnNumericValues","numFeatures","data","data2","lookup","lookup2","normalize","join","options","columnName","dataset","scaleFactor","relative","widths","rawValues1","rawValues2","value","index","diffValues","pctDiffValues","displayTheseDiffs","legend","thickness","calculatedValues","offset","getHeightsBasedOnNumericValues","length","heights","normalizedValues","normalizedMax","getRadiusForDataColumn","radius","fixedColors","colorsAsRGB","buildRGBfromHexCodes","setColorBasedOnCategory","scaleOrdinal","gray","rgbArray","color","keys","key","a","hasCategory","v","buildDiffDomainBreakpoints","minDiff","maxDiff","breakpoints","min","breakpoint","biggest","numBreaks","divisor","guessBreaks","normalLookup","normalDenominator","domain","buildBreakpointsForNumericValues","setColorBasedOnValue","scaleThreshold","lowerBound","upperBound","lowerLabel","upperLabel","max","numColors","exponent","isDivergingScale","nMaxLength","minimum","colorOffset","domainBreakpoints","precision","truncateFractionalPart","hexcodes","hexcolor","usePrecision","printValue","clipped","ColorWidthSymbologizer"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43]}