{"version":3,"file":"bar-0c9aa11c.js","sources":["../../src/dash-panels/bar.vue"],"sourcesContent":["<template lang=\"pug\">\nVuePlotly.myplot(\n  :data=\"data\"\n  :layout=\"layout\"\n  :options=\"options\"\n  :id=\"id\"\n  :class=\"className\"\n)\n\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\nimport type { PropType } from 'vue'\n\nimport { FileSystemConfig, Status, BG_COLOR_DASHBOARD, UI_FONT } from '@/Globals'\nimport DashboardDataManager, { FilterDefinition } from '@/js/DashboardDataManager'\nimport VuePlotly from '@/components/VuePlotly.vue'\nimport { buildCleanTitle } from './_allPanels'\n\nimport globalStore from '@/store'\n\nexport default defineComponent({\n  name: 'BarChartPanel',\n  components: { VuePlotly },\n\n  props: {\n    fileSystemConfig: { type: Object as PropType<FileSystemConfig>, required: true },\n    subfolder: { type: String, required: true },\n    files: { type: Array, required: true },\n    config: { type: Object as any, required: true },\n    cardTitle: { type: String, required: true },\n    cardId: String,\n    datamanager: Object as PropType<DashboardDataManager>,\n  },\n\n  data: () => {\n    return {\n      globalState: globalStore.state,\n      id: 'bar-' + Math.floor(1e12 * Math.random()),\n      plotID: Math.floor(1e12 * Math.random()).toString(),\n      className: '',\n      // dataSet is either x,y or allRows[]\n      dataSet: {} as { x?: any[]; y?: any[]; allRows?: any },\n      YAMLrequirementsBar: { dataset: '', x: '' },\n      layout: {\n        barmode: 'overlay',\n        bargap: 0.08,\n        height: 300,\n        margin: { t: 8, b: 0, l: 0, r: 0, pad: 2 },\n        font: {\n          color: '#444444',\n          family: UI_FONT,\n        },\n        xaxis: {\n          automargin: true,\n          autorange: true,\n          title: { text: '', standoff: 12 },\n          animate: true,\n        },\n        yaxis: {\n          automargin: true,\n          autorange: true,\n          title: { text: '', standoff: 16 },\n          animate: true,\n        },\n        legend: {\n          orientation: 'v',\n          x: 1,\n          y: 1,\n        },\n      },\n\n      data: [] as any[],\n\n      options: {\n        responsive: true,\n        displaylogo: false,\n        modeBarButtonsToRemove: [\n          'pan2d',\n          'zoom2d',\n          'select2d',\n          'lasso2d',\n          'zoomIn2d',\n          'zoomOut2d',\n          'autoScale2d',\n          'hoverClosestCartesian',\n          'hoverCompareCartesian',\n          'resetScale2d',\n          'toggleSpikelines',\n          'resetViewMapbox',\n        ],\n        toImageButtonOptions: {\n          format: 'png', // one of png, svg, jpeg, webp\n          filename: 'bar-chart',\n          width: null,\n          height: null,\n        },\n      },\n    }\n  },\n  async mounted() {\n    this.updateLayout()\n    this.updateTheme()\n    this.dataSet = await this.loadData()\n    this.updateChart()\n\n    this.options.toImageButtonOptions.filename = buildCleanTitle(this.cardTitle, this.subfolder)\n\n    this.$emit('dimension-resizer', { id: this.cardId, resizer: this.changeDimensions })\n    this.$emit('isLoaded')\n\n    this.checkWarningsAndErrors()\n  },\n  beforeDestroy() {\n    this.datamanager?.removeFilterListener(this.config, this.handleFilterChanged)\n  },\n\n  watch: {\n    'globalState.isDarkMode'() {\n      this.updateTheme()\n    },\n  },\n\n  methods: {\n    changeDimensions(dimensions: { width: number; height: number }) {\n      this.layout = Object.assign({}, this.layout, dimensions)\n    },\n\n    checkWarningsAndErrors() {\n      // Check this plot for warnings and errors\n\n      var plotTitle = this.cardTitle\n      // warnings\n      // missing title\n      if (plotTitle.length == 0) {\n        this.$emit('error', {\n          type: Status.WARNING,\n          msg: `The plot title is missing!`,\n          desc: \"Please add a plot title in the .yaml-file (title: 'Example title')\",\n        })\n      }\n      // errors\n    },\n\n    updateTheme() {\n      const colors = {\n        paper_bgcolor: BG_COLOR_DASHBOARD[this.globalState.colorScheme],\n        plot_bgcolor: BG_COLOR_DASHBOARD[this.globalState.colorScheme],\n        font: { color: this.globalState.isDarkMode ? '#cccccc' : '#444444' },\n      }\n      this.layout = Object.assign({}, this.layout, colors)\n    },\n\n    updateLayout() {\n      this.layout.xaxis.title.text = this.config.xAxisTitle || this.config.xAxisName || ''\n      this.layout.yaxis.title.text = this.config.yAxisTitle || this.config.yAxisName || ''\n    },\n\n    async handlePlotlyClick(click: any) {\n      try {\n        const { x, y, data } = click.points[0]\n\n        const filter = this.config.groupBy\n        const value = x\n\n        // TODO this.datamanager.setFilter(this.config.dataset, filter, value)\n      } catch (e) {\n        console.error(e)\n      }\n    },\n\n    async handleFilterChanged() {\n      if (!this.datamanager) return\n      try {\n        const { filteredRows } = this.datamanager.getFilteredDataset(this.config) as any\n\n        // is filter UN-selected?\n        if (!filteredRows) {\n          this.data = [this.data[0]]\n          this.data[0].opacity = 1.0\n          return\n        }\n\n        const fullDataCopy = Object.assign({}, this.data[0])\n\n        fullDataCopy.x = filteredRows.x\n        fullDataCopy.y = filteredRows.y\n        fullDataCopy.opacity = 1.0\n        fullDataCopy.name = 'Filtered'\n        // let plotly manage bar colors EXCEPT the filter\n        fullDataCopy.marker = { color: '#ffaf00' } // 3c6' }\n\n        this.data = [this.data[0], fullDataCopy]\n        this.data[0].opacity = 0.3\n        this.data[0].name = 'All'\n      } catch (e) {\n        const message = '' + e\n        console.log(message)\n        this.dataSet = {}\n      }\n    },\n\n    async loadData() {\n      if (!this.datamanager) return {}\n\n      try {\n        this.validateYAML()\n        let dataset = await this.datamanager.getDataset(this.config)\n\n        // no filter? we are done:\n        if (!this.config.filters) return dataset\n\n        // filter data before returning:\n        this.datamanager.addFilterListener(this.config, this.handleFilterChanged)\n\n        for (const [column, value] of Object.entries(this.config.filters)) {\n          const filter: FilterDefinition = {\n            dataset: this.config.dataset,\n            column: column,\n            value: value,\n            range: Array.isArray(value),\n          }\n          this.datamanager.setFilter(filter)\n        }\n\n        // empty for now; filtered data will come back later via handleFilterChanged async.\n        return { allRows: {} }\n      } catch (e) {\n        console.error('' + e)\n      }\n      return { allRows: {} }\n    },\n\n    validateYAML() {\n      for (const key in this.YAMLrequirementsBar) {\n        if (key in this.config === false) {\n          this.$emit('error', {\n            type: Status.ERROR,\n            msg: `Bar chart missing required key: ${key}`,\n            desc: `Bar chart requires ${Object.keys(this.YAMLrequirementsBar)}`,\n          })\n        }\n      }\n    },\n\n    updateChart() {\n      try {\n        if (this.config.groupBy) this.updateChartWithGroupBy()\n        else this.updateChartSimple()\n      } catch (e) {\n        const msg = '' + e\n        this.$emit('error', { type: Status.ERROR, msg })\n      }\n    },\n\n    updateChartWithGroupBy() {\n      this.className = this.plotID // stacked bug-fix hack\n\n      // TODO: re-implement grouping\n\n      // const { x, y } = this.dataRows\n\n      // this.data = [\n      //   {\n      //     x,\n      //     y,\n      //     name: this.config.groupBy,\n      //     type: 'bar',\n      //     textinfo: 'label+percent',\n      //     textposition: 'inside',\n      //     automargin: true,\n      //     opacity: 1.0,\n      //   },\n      // ]\n    },\n\n    updateChartSimple() {\n      let x: any[] = []\n\n      var useOwnNames = false\n\n      const allRows = this.dataSet.allRows || ({} as any)\n      const columnNames = Object.keys(allRows)\n\n      if (!columnNames.length) return\n\n      // old configs called it \"usedCol\" --> now \"columns\"\n      let columns = this.config.columns || this.config.usedCol\n\n      // Or maybe user didn't specify: then use all the columns!\n      if (!columns && columnNames.length) {\n        columns = columnNames.filter(col => col !== this.config.x).sort()\n      }\n\n      // old legendname field\n      if (this.config.legendName) this.config.legendTitles = this.config.legendName\n      if (this.config.legendTitles?.length) useOwnNames = true\n\n      if (this.config.stacked) {\n        this.layout.barmode = 'stack'\n      } else {\n        this.layout.barmode = 'group'\n      }\n\n      if (this.config.stacked) this.className = this.plotID\n\n      // check for x column\n      if (!allRows[this.config.x]) {\n        this.$store.commit(\n          'error',\n          `${this.cardTitle}: \"${this.config.dataset}\" x column \"${this.config.x}\" missing`\n        )\n        return\n      }\n\n      const xColumn = allRows[this.config.x]\n\n      if (!xColumn) {\n        throw Error(`File ${this.config.dataset}: Could not find column ${this.config.x}`)\n      }\n\n      x = xColumn.values\n      if (this.config.skipFirstRow) x = x.slice(1)\n\n      for (let i = 0; i < columns.length; i++) {\n        const col = columns[i]\n        const legendName = useOwnNames ? this.config.legendTitles[i] ?? col : col\n\n        let values = allRows[col].values\n        if (this.config.skipFirstRow) values = values.slice(1)\n\n        // are durations in 00:00:00 format?\n        if (this.config.convertToSeconds) values = this.convertToSeconds(values)\n\n        this.data.push({\n          x: x,\n          y: values,\n          name: legendName,\n          type: 'bar',\n          textinfo: 'label+percent',\n          textposition: 'inside',\n          automargin: true,\n          opacity: 1.0,\n        })\n      }\n    },\n\n    convertToSeconds(values: any[]) {\n      values = values.map((v: string) => {\n        try {\n          const pieces = v.split(':')\n          const seconds = pieces.reduce((prev: any, curr: any) => parseInt(curr, 10) + prev * 60, 0)\n          return seconds\n        } catch (e) {\n          return 0\n        }\n      })\n    },\n  },\n})\n\n//\n</script>\n\n<style scoped lang=\"scss\">\n@import '@/styles.scss';\n\n.myplot {\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n}\n\n@media only screen and (max-width: 640px) {\n}\n</style>\n"],"names":["_sfc_main","defineComponent","VuePlotly","globalStore","UI_FONT","buildCleanTitle","_a","dimensions","plotTitle","Status","colors","BG_COLOR_DASHBOARD","click","x","y","data","filter","value","filteredRows","fullDataCopy","e","message","dataset","column","key","msg","useOwnNames","allRows","columnNames","columns","col","xColumn","i","legendName","values","v","prev","curr"],"mappings":"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"}