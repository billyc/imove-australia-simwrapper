{"version":3,"file":"NetworkLinks-ab259d49.js","sources":["../../src/plugins/links-gl/TimeSlider.vue","../../src/plugins/links-gl/SelectorPanel.vue","../../src/plugins/links-gl/LinkLayer.tsx","../../src/plugins/links-gl/NetworkLinks.vue"],"sourcesContent":["<template lang=\"pug\">\n.time-slider-main-content\n\n  b-slider(\n    v-model=\"sliderValue\"\n    :max=\"stops.length - 1\"\n    :tooltip=\"false\"\n  )\n      b-slider-tick(v-for=\"stop,i in stops\" :key=\"i\" :value=\"i\")\n\n\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  name: 'TimeSliderLinksGl',\n  props: {\n    useRange: Boolean,\n    stops: { type: Array, required: true },\n    dropdownValue: String,\n  },\n  data() {\n    return {\n      sliderValue: 0 as any,\n    }\n  },\n  watch: {\n    // dropdownValue(value) {\n    //   this.sliderValue = value\n    // },\n\n    useRange(useIt: boolean) {\n      if (useIt) {\n        this.sliderValue = [this.stops[0], this.stops[this.stops.length - 1]]\n      } else {\n        this.sliderValue = [this.stops[0]]\n      }\n      console.log('changed to: ' + this.sliderValue)\n    },\n    sliderValue(result: any) {\n      this.$emit('change', result)\n    },\n  },\n  mounted() {},\n})\n</script>\n\n<style scoped>\n.time-slider-main-content {\n  padding: 0rem 0rem 0rem 0.25rem;\n  margin: 0 0.2rem;\n}\n</style>\n","<template lang=\"pug\">\n.config-panel\n\n  //- time-of-day slider\n  .panel-item.expand(v-if=\"vizDetails.useSlider && activeColumn\")\n    p: b {{ activeColumn }}\n\n    time-slider.time-slider(\n      :useRange='false'\n      :stops=\"getColumns()\"\n      :dropdownValue=\"activeColumn\"\n      @change='handleTimeSliderChanged')\n\n\n  //- Column picker  -- if no slider\n  .panel-item(v-if=\"!vizDetails.useSlider\")\n    p: b {{ $t('selectColumn') }}\n\n    .dropdown.is-up.full-width(:class=\"{'is-active': isButtonActive}\")\n      .dropdown-trigger\n        button.full-width.is-warning.button(:class=\"{'is-loading': !activeColumn}\"\n          aria-haspopup=\"true\" aria-controls=\"dropdown-menu-column-selector\"\n          @click=\"handleClickDropdown\"\n        )\n          b {{ buttonTitle }}\n          span.icon.is-small: i.fas.fa-angle-down(aria-hidden=\"true\")\n\n      #dropdown-menu-column-selector.dropdown-menu(role=\"menu\" :style=\"{'max-height':'24rem', 'overflow-y': 'auto', 'border': '1px solid #ccc'}\")\n        .dropdown-content\n          a.dropdown-item(v-for=\"column in getColumns()\"\n            @click=\"handleSelectColumn(column)\") {{ column }}\n\n</template>\n\n<script lang=\"ts\">\nconst i18n = {\n  messages: {\n    en: {\n      selectColumn: 'Data:',\n      loading: 'Loading...',\n      bandwidths: 'Widths: 1 pixel =:',\n      timeOfDay: '',\n      colors: 'Colors',\n    },\n    de: {\n      selectColumn: 'Datenmengen:',\n      loading: 'Laden...',\n      bandwidths: 'Linienbreiten: 1 pixel =:',\n      timeOfDay: '',\n      colors: 'Farben',\n    },\n  },\n}\n\nimport { defineComponent } from 'vue'\nimport type { PropType } from 'vue'\n\nimport { debounce } from 'debounce'\n\nimport globalStore from '@/store'\nimport TimeSlider from './TimeSlider.vue'\nimport { ColorScheme, DataTable, DataType, LookupDataset } from '@/Globals'\n\nexport default defineComponent({\n  name: 'SelectorPanel',\n  i18n,\n  components: { TimeSlider },\n  props: {\n    csvData: { type: Object as PropType<LookupDataset>, required: true },\n    scaleWidth: { type: Number, required: true },\n    showDiffs: { type: Boolean, required: true },\n    vizDetails: { type: Object as PropType<{ useSlider: boolean }>, required: true },\n  },\n  data() {\n    return {\n      isButtonActive: false,\n      isColorButtonActive: false,\n      scaleWidthValue: '',\n      debounceScale: {} as any, // (vm: any) => debounce(vm.gotNewScale, 500),\n      handleTimeSliderChanged: {} as any,\n    }\n  },\n  computed: {\n    activeColumn(): string {\n      return this.csvData.activeColumn\n    },\n    buttonTitle(): string {\n      if (!this.activeColumn) return '' + this.$i18n.t('loading')\n      return this.activeColumn\n    },\n  },\n  watch: {\n    scaleWidth() {\n      this.scaleWidthValue = '' + this.scaleWidth\n    },\n    scaleWidthValue() {\n      // if (this.scaleWidth === parseFloat(this.scaleWidthValue)) return\n\n      if (isNaN(parseFloat(this.scaleWidthValue))) {\n        return\n      }\n      this.debounceScale()\n    },\n  },\n  methods: {\n    getColumns() {\n      // TODO: drop first column always: it's the link-id...\n      const columns = Object.values(this.csvData.dataTable)\n        .slice(1)\n        .filter(f => f.name && f.type !== DataType.LOOKUP)\n        .map(f => f.name)\n      return columns\n    },\n    gotNewScale() {\n      // if (this.scaleWidth !== parseFloat(this.scaleWidthValue)) {\n      //   this.scaleWidthValue = '' + this.scaleWidth\n      // }\n      this.$emit('scale', parseFloat(this.scaleWidthValue))\n    },\n\n    changeTimeSlider(value: any) {\n      if (value.length && value.length === 1) value = value[0]\n\n      this.$emit('slider', { dataset: this.csvData, column: this.getColumns()[value] })\n    },\n\n    handleClickDropdown() {\n      this.isButtonActive = !this.isButtonActive\n    },\n\n    handleColorRamp(colors: string) {\n      console.log(colors)\n      this.isColorButtonActive = false\n      this.$emit('colors', colors)\n    },\n\n    clearDropdown() {\n      console.log('boop')\n      this.isButtonActive = false\n    },\n\n    async handleSelectColumn(column: string) {\n      console.log('panel: selected', column)\n      this.isButtonActive = false\n      this.$emit('column', { dataset: this.csvData, column: column })\n    },\n  },\n  mounted() {\n    this.debounceScale = debounce(this.gotNewScale, 500)\n    this.handleTimeSliderChanged = debounce(this.changeTimeSlider, 250)\n    this.scaleWidthValue = '' + this.scaleWidth\n  },\n})\n</script>\n\n<style scoped lang=\"scss\">\n@import '@/styles.scss';\n\n.config-panel {\n  display: flex;\n  flex-direction: row;\n}\n\n.full-width {\n  display: block;\n  width: 100%;\n}\n\n.panel-item {\n  padding-right: 1rem;\n}\n\n.last-item {\n  padding-right: 0;\n}\n\np {\n  font-size: 0.9rem;\n}\n\n.color-button,\n.swap-color {\n  width: 8rem;\n  height: 32px;\n}\n\n.color-button:hover {\n  cursor: pointer;\n  box-shadow: 0px 0px 3px 3px rgba(128, 128, 128, 0.3);\n}\n\nbutton:hover {\n  box-shadow: 0px 0px 3px 3px rgba(128, 128, 128, 0.3);\n}\n\ninput {\n  border: none;\n  background-color: var(--bgCream2);\n  color: var(--bgDark);\n}\n\n.dropdown {\n  overflow: visible;\n  // width: 175px;\n}\n\n#dropdown-menu-color-selector {\n  background-color: var(--bgBold);\n\n  p {\n    color: #888;\n  }\n}\n\n.expand {\n  flex: 1;\n}\n\n.time-slider {\n  width: 100%;\n}\n\n@media only screen and (max-width: 768px) {\n  .config-panel {\n    flex-direction: column;\n  }\n}\n</style>\n","import React, { useState, useMemo, useEffect } from 'react'\nimport DeckGL from '@deck.gl/react'\nimport { COORDINATE_SYSTEM } from '@deck.gl/core'\n\nimport { LineOffsetLayer, OFFSET_DIRECTION } from '@/layers/LineOffsetLayer'\n\nimport { StaticMap } from 'react-map-gl'\nimport { format } from 'mathjs'\n\nimport {\n  MAPBOX_TOKEN,\n  REACT_VIEW_HANDLES,\n  DataTableColumn,\n  LookupDataset,\n  DataType,\n} from '@/Globals'\nimport globalStore from '@/store'\n\nexport default function Component({\n  viewId = 0,\n  links = { source: new Float32Array(), dest: new Float32Array() },\n  colorRampType = -1, // -1 undefined, 0 categorical, 1 diffs, 2 sequential\n  build = {} as LookupDataset,\n  base = {} as LookupDataset,\n  widths = {} as LookupDataset,\n  widthsBase = {} as LookupDataset,\n  newColors = new Uint8Array(),\n  newWidths = new Float32Array(),\n  dark = false,\n  projection = '',\n  scaleWidth = 1,\n  mapIsIndependent = false,\n}) {\n  // ------- draw frame begins here -----------------------------\n\n  const widthDivisor = scaleWidth ? 1 / scaleWidth : 0\n\n  const [viewState, setViewState] = useState(globalStore.state.viewState)\n\n  const buildColumn = build.dataTable[build.activeColumn]\n  const baseColumn = base.dataTable[base.activeColumn]\n  const widthColumn = widths.dataTable[widths.activeColumn]\n\n  const isCategorical = colorRampType === 0 || buildColumn?.type == DataType.STRING\n\n  // register setViewState in global view updater so we can respond to external map motion\n  REACT_VIEW_HANDLES[viewId] = (view: any) => {\n    if (view) {\n      setViewState(view)\n    } else {\n      setViewState(globalStore.state.viewState)\n    }\n  }\n\n  function handleClick() {\n    console.log('click!')\n  }\n\n  function handleViewState(view: any) {\n    setViewState(view)\n    view.center = [view.longitude, view.latitude]\n\n    if (!mapIsIndependent) globalStore.commit('setMapCamera', view)\n  }\n\n  function precise(x: number) {\n    return format(x, { lowerExp: -6, upperExp: 6, precision: 5 })\n  }\n\n  function buildTooltipHtml(\n    columnBuild: DataTableColumn,\n    columnBase: DataTableColumn,\n    geoOffset: number\n  ) {\n    try {\n      if (!columnBuild) return null\n\n      const index = build.csvRowFromLinkRow[geoOffset]\n      let value = columnBuild.values[index]\n\n      if (isCategorical) {\n        if (!Number.isFinite(value)) return null\n        return `<b>${columnBuild.name}</b><p>${precise(value)}</p>`\n      }\n\n      let html = null\n\n      if (Number.isFinite(value)) html = `<b>${columnBuild.name}</b><p>Value: ${precise(value)}</p>`\n\n      const baseIndex = base?.csvRowFromLinkRow[geoOffset]\n      if (baseIndex) {\n        let baseValue = base ? base.dataTable[columnBase.name].values[baseIndex] : null\n        let diff = value - baseValue\n        if (Number.isFinite(baseValue)) {\n          html += `<p>Base: ${precise(baseValue)}</p>`\n          html += `<p>+/- Base: ${precise(diff)}</p>`\n        }\n      }\n\n      return html\n    } catch (e) {\n      return null\n    }\n  }\n\n  function getTooltip({ object, index }: { object: any; index: number }) {\n    // tooltip will show values for color settings and for width settings.\n    // if there is base data, it will also show values and diff vs. base for both color and width.\n\n    try {\n      // tooltip color values ------------\n      let tooltip = buildTooltipHtml(buildColumn, baseColumn, index)\n\n      // tooltip widths------------\n      if (widthColumn && widthColumn.name !== buildColumn.name) {\n        const widthTip = buildTooltipHtml(\n          widthColumn,\n          widthsBase.dataTable[widthsBase.activeColumn],\n          index\n        )\n        if (widthTip) tooltip = tooltip ? tooltip + widthTip : widthTip\n      }\n\n      if (!tooltip) return null\n\n      return {\n        html: tooltip,\n        style: { color: dark ? '#ccc' : '#223', backgroundColor: dark ? '#2a3c4f' : 'white' },\n      }\n    } catch (e) {\n      console.warn(e)\n      return null\n    }\n  }\n\n  // Atlantis is pre-converted now in the RoadNetworkLoader to lng/lat\n  // projection == 'Atlantis' ? COORDINATE_SYSTEM.METER_OFFSETS : COORDINATE_SYSTEM.DEFAULT\n  const coordinateSystem = COORDINATE_SYSTEM.DEFAULT\n\n  //@ts-ignore\n  const layer = new LineOffsetLayer({\n    id: 'linkLayer',\n    data: {\n      length: links.source.length / 2,\n      attributes: {\n        getSourcePosition: { value: links.source, size: 2 },\n        getTargetPosition: { value: links.dest, size: 2 },\n        getColor: { value: newColors, size: 4 },\n        getWidth: { value: newWidths, size: 1 },\n      },\n    },\n    widthUnits: 'pixels',\n    widthScale: widthDivisor,\n    widthMinPixels: 0.5,\n    widthMaxPixels: 50,\n    pickable: true,\n    coordinateSystem,\n    opacity: 1,\n    autoHighlight: true,\n    highlightColor: [255, 0, 224],\n    offsetDirection: OFFSET_DIRECTION.RIGHT,\n    updateTriggers: {\n      getSourcePosition: [links.source],\n      getTargetPosition: [links.dest],\n      getColor: [newColors, dark],\n      getWidth: [newWidths],\n    },\n    transitions: {\n      getColor: 250,\n      getWidth: 250,\n      widthScale: 250,\n    },\n    parameters: {\n      depthTest: false,\n    },\n  })\n\n  const showBackgroundMap = projection && projection !== 'Atlantis'\n\n  return (\n    /*\n    //@ts-ignore */\n    <DeckGL\n      layers={[layer]}\n      viewState={viewState}\n      controller={true}\n      pickingRadius={5}\n      getTooltip={getTooltip}\n      getCursor={({ isDragging, isHovering }: any) =>\n        isDragging ? 'grabbing' : isHovering ? 'pointer' : 'grab'\n      }\n      onClick={handleClick}\n      onViewStateChange={(e: any) => handleViewState(e.viewState)}\n    >\n      {showBackgroundMap && (\n        /*\n        // @ts-ignore */\n        <StaticMap mapStyle={globalStore.getters.mapStyle} mapboxApiAccessToken={MAPBOX_TOKEN} />\n      )}\n    </DeckGL>\n  )\n}\n","<template lang=\"pug\">\n.link-volume-plot(:class=\"{'hide-thumbnail': !thumbnail}\"\n        :style='{\"background\": urlThumbnail}'\n        oncontextmenu=\"return false\")\n\n  .plot-container(v-if=\"!thumbnail\" :id=\"`container-${linkLayerId}`\")\n    link-gl-layer.map-area(\n        :viewId=\"linkLayerId\"\n        :links=\"geojsonData\"\n        :colorRampType=\"colorRampType\"\n        :build=\"csvData\"\n        :base=\"csvBase\"\n        :widths=\"csvWidth\"\n        :widthsBase=\"csvWidthBase\"\n        :dark=\"isDarkMode\"\n        :newColors=\"colorArray\"\n        :newWidths=\"widthArray\"\n        :scaleWidth=\"scaleWidth\"\n        :projection=\"vizDetails.projection\"\n        :mapIsIndependent=\"vizDetails.mapIsIndependent\"\n    )\n\n    zoom-buttons(v-if=\"!thumbnail\")\n    //- drawing-tool(v-if=\"!thumbnail\")\n\n    //- color/width/etc panel\n    viz-configurator(v-if=\"!thumbnail && isDataLoaded\"\n      :vizDetails=\"vizDetails\"\n      :datasets=\"datasets\"\n      :fileSystem=\"fileSystem\"\n      :subfolder=\"myState.subfolder\"\n      :yamlConfig=\"yamlConfig\"\n      :legendStore=\"legendStore\"\n      :filterDefinitions=\"currentUIFilterDefinitions\"\n      @update=\"changeConfiguration\")\n\n    //- .top-panel(v-if=\"vizDetails.title\")\n    //-   .panel-item\n    //-     h3 {{ vizDetails.title }}\n    //-     p {{ vizDetails.description }}\n\n    .bottom-panel(v-if=\"!thumbnail\")\n      .status-message(v-if=\"myState.statusMessage\")\n        p {{ myState.statusMessage }}\n\n      .panel-items(v-show=\"csvWidth.activeColumn\")\n\n        //- slider/dropdown for selecting column\n        .panel-item.config-section\n          selector-panel(\n            :vizDetails=\"vizDetails\"\n            :csvData=\"csvWidth\"\n            :scaleWidth=\"scaleWidth\"\n            :showDiffs=\"vizDetails.showDifferences\"\n            @column=\"handleNewDataColumn\"\n            @slider=\"handleNewDataColumn\"\n          )\n\n        //- DIFF checkbox\n        .panel-item.diff-section(v-if=\"vizDetails.datasets.csvBase\")\n          toggle-button.toggle(:width=\"40\" :value=\"vizDetails.showDifferences\" :sync=\"true\" :labels=\"false\"\n            :color=\"{checked: '#4b7cc4', unchecked: '#222'}\"\n            @change=\"toggleShowDiffs\")\n          p: b {{ $t('showDiffs') }}\n\n        //- FilterPanel.filter-panel(v-if=\"vizDetails.useSlider\"\n        //-   :props=\"csvWidth\"\n        //-   @activeColumns=\"handleNewFilter\"\n        //- )\n\n</template>\n\n<script lang=\"ts\">\nconst i18n = {\n  messages: {\n    en: {\n      all: 'All',\n      colors: 'Colors',\n      loading: 'Loading',\n      selectColumn: 'Select data column',\n      timeOfDay: 'Time of day',\n      bandwidths: 'Widths: 1 pixel =',\n      showDiffs: 'Show Differences',\n    },\n    de: {\n      all: 'Alle',\n      colors: 'Farben',\n      loading: 'Wird geladen',\n      selectColumn: 'Datenspalte wählen',\n      timeOfDay: 'Uhrzeit',\n      bandwidths: 'Linienbreiten: 1 pixel =',\n      showDiffs: 'Differenzen',\n    },\n  },\n}\n\nimport { defineComponent } from 'vue'\nimport type { PropType } from 'vue'\nimport { ToggleButton } from 'vue-js-toggle-button'\nimport { rgb } from 'd3-color'\nimport { scaleThreshold, scaleOrdinal } from 'd3-scale'\nimport { shallowEqualObjects } from 'shallow-equal'\nimport readBlob from 'read-blob'\nimport YAML from 'yaml'\n\nimport globalStore from '@/store'\nimport { MAP_STYLES_OFFLINE, DataTableColumn, DataTable, DataType, LookupDataset } from '@/Globals'\n// import FilterPanel from './BadFilterPanel.vue'\nimport SelectorPanel from './SelectorPanel.vue'\nimport LinkGlLayer from './LinkLayer'\nimport HTTPFileSystem from '@/js/HTTPFileSystem'\nimport DrawingTool from '@/components/DrawingTool/DrawingTool.vue'\nimport VizConfigurator from '@/components/viz-configurator/VizConfigurator.vue'\nimport ZoomButtons from '@/components/ZoomButtons.vue'\nimport LegendStore from '@/js/LegendStore'\nimport Coords from '@/js/Coords'\nimport { arrayBufferToBase64 } from '@/js/util'\n\nimport {\n  ColorScheme,\n  FileSystem,\n  FileSystemConfig,\n  VisualizationPlugin,\n  Status,\n  REACT_VIEW_HANDLES,\n} from '@/Globals'\n\nimport { LineColorDefinition } from '@/components/viz-configurator/LineColors.vue'\nimport { LineWidthDefinition } from '@/components/viz-configurator/LineWidths.vue'\nimport { DatasetDefinition } from '@/components/viz-configurator/AddDatasets.vue'\nimport DashboardDataManager from '@/js/DashboardDataManager'\n\nconst LOOKUP_COLUMN = '_LINK_OFFSET_'\n\nconst MyComponent = defineComponent({\n  name: 'NetworkLinksPlugin',\n  i18n,\n  components: {\n    SelectorPanel,\n    DrawingTool,\n    LinkGlLayer,\n    ToggleButton,\n    VizConfigurator,\n    ZoomButtons,\n  },\n  props: {\n    root: { type: String, required: true },\n    subfolder: { type: String, required: true },\n    yamlConfig: String,\n    config: Object as any,\n    thumbnail: Boolean,\n    datamanager: { type: Object as PropType<DashboardDataManager> },\n  },\n  data() {\n    return {\n      standaloneYAMLconfig: {\n        title: '',\n        description: '',\n        csvFile: '',\n        csvBase: '',\n        datasets: {} as { [id: string]: string },\n        useSlider: false,\n        showDifferences: false,\n        shpFile: '',\n        dbfFile: '',\n        network: '',\n        geojsonFile: '',\n        projection: '',\n        center: null as any,\n        zoom: 0,\n        widthFactor: null as any,\n        thumbnail: '',\n        sum: false,\n        nodes: '', // SFCTA nodes shapefile\n        links: [] as string[], // SFCTA links DBF files\n        mapIsIndependent: false,\n        display: {\n          color: {} as any,\n          width: {} as any,\n        },\n      },\n\n      YAMLrequirementsLinks: {\n        // csvFile: '',\n        // network: '',\n        // projection: '',\n      },\n\n      // this contains the display settings for this view; it is the View Model.\n      // use changeConfiguration to modify this for now (todo: move to state model)\n      vizDetails: {\n        title: '',\n        description: '',\n        csvFile: '',\n        csvBase: '',\n        datasets: {} as { [id: string]: string },\n        useSlider: false,\n        showDifferences: false,\n        shpFile: '',\n        dbfFile: '',\n        network: '',\n        geojsonFile: '',\n        projection: '',\n        center: null as any,\n        zoom: 0,\n        widthFactor: null as any,\n        thumbnail: '',\n        sum: false,\n        nodes: '', // SFCTA nodes shapefile\n        links: [] as string[], // SFCTA links DBF files\n        mapIsIndependent: false,\n        display: {\n          color: {} as any,\n          width: {} as any,\n        },\n      },\n\n      currentUIFilterDefinitions: {} as any,\n      datasets: {} as { [id: string]: DataTable },\n      isButtonActiveColumn: false,\n      linkLayerId: `linklayer-${Math.floor(1e12 * Math.random())}` as any,\n      scaleWidth: 0,\n      numLinks: 0,\n      showTimeRange: false,\n      legendStore: new LegendStore(),\n      geojsonData: {\n        source: new Float32Array(),\n        dest: new Float32Array(),\n        linkIds: [] as any[],\n        projection: '',\n      },\n      fixedColors: ['#4e79a7'],\n      myState: {\n        statusMessage: '',\n        subfolder: '',\n        yamlConfig: '',\n        thumbnail: false,\n      },\n\n      csvData: {\n        datasetKey: '',\n        activeColumn: '',\n        dataTable: {},\n        csvRowFromLinkRow: [],\n      } as LookupDataset,\n\n      csvBase: {\n        datasetKey: '',\n        activeColumn: '',\n        dataTable: {},\n        csvRowFromLinkRow: [],\n      } as LookupDataset,\n\n      csvWidth: {\n        datasetKey: '',\n        activeColumn: '',\n        dataTable: {},\n        csvRowFromLinkRow: [],\n      } as LookupDataset,\n\n      csvWidthBase: {\n        datasetKey: '',\n        activeColumn: '',\n        dataTable: {},\n        csvRowFromLinkRow: [],\n      } as LookupDataset,\n\n      // private linkOffsetLookup: { [id: string]: number } = {}\n      isDarkMode: this.$store.state.colorScheme === ColorScheme.DarkMode,\n      isDataLoaded: false,\n      thumbnailUrl: \"url('assets/thumbnail.jpg') no-repeat;\",\n\n      currentWidthDefinition: { columnName: '' } as LineWidthDefinition,\n\n      // DataManager might be passed in from the dashboard; or we might be\n      // in single-view mode, in which case we need to create one for ourselves\n      myDataManager: this.datamanager || new DashboardDataManager(this.root, this.subfolder),\n\n      resizer: undefined as ResizeObserver | undefined,\n      dataLoaderWorkers: [] as Worker[],\n      csvRowLookupFromLinkRow: {} as { [datasetId: string]: number[] },\n\n      colorArray: new Uint8Array(),\n      widthArray: new Float32Array(),\n    }\n  },\n  computed: {\n    fileApi(): HTTPFileSystem {\n      return new HTTPFileSystem(this.fileSystem, globalStore)\n    },\n\n    fileSystem(): FileSystemConfig {\n      const svnProject: FileSystemConfig[] = this.$store.state.svnProjects.filter(\n        (a: FileSystemConfig) => a.slug === this.root\n      )\n      if (svnProject.length === 0) {\n        console.log('no such project')\n        throw Error\n      }\n      return svnProject[0]\n    },\n\n    urlThumbnail(): string {\n      return this.thumbnailUrl\n    },\n\n    colorRampType(): any {\n      const rampType = this.vizDetails.display.color?.colorRamp?.style\n      if (rampType === undefined) return -1\n      return rampType\n    },\n\n    buttonTitle(): string {\n      return this.csvData.activeColumn || 'Loading...'\n    },\n  },\n  watch: {\n    '$store.state.viewState'() {\n      if (this.vizDetails.mapIsIndependent) return\n\n      if (!REACT_VIEW_HANDLES[this.linkLayerId]) return\n      REACT_VIEW_HANDLES[this.linkLayerId]()\n    },\n\n    '$store.state.colorScheme'() {\n      setTimeout(\n        () => (this.isDarkMode = this.$store.state.colorScheme === ColorScheme.DarkMode),\n        100\n      )\n    },\n\n    'vizDetails.showDifferences'() {\n      this.generateWidthArray()\n      this.generateColorArray()\n    },\n  },\n  methods: {\n    setDataIsLoaded() {\n      this.isDataLoaded = true\n    },\n    async getVizDetails() {\n      const filename = this.myState.yamlConfig\n\n      const emptyState = {\n        showDifferences: false,\n        datasets: {} as any,\n        display: { color: {} as any, width: {} as any },\n      }\n\n      // are we in a dashboard?\n      if (this.config) {\n        this.validateYAML()\n        this.vizDetails = Object.assign({}, emptyState, this.config)\n        return\n      }\n\n      // was a YAML file was passed in?\n      if (filename?.endsWith('yaml') || filename?.endsWith('yml')) {\n        await this.loadStandaloneYamlConfig()\n      }\n\n      // is this a bare network file? - build vizDetails manually\n      if (/(shp|xml|geojson|geo\\.json)(|\\.gz)$/.test(filename)) {\n        const title = 'Network: ' + this.myState.yamlConfig // .substring(0, 7 + this.myState.yamlConfig.indexOf('network'))\n\n        this.vizDetails = Object.assign({}, this.vizDetails, {\n          network: this.myState.yamlConfig,\n          title,\n          description: this.myState.subfolder,\n        })\n      }\n\n      const t = this.vizDetails.title ? this.vizDetails.title : filename || 'Network Links'\n      this.$emit('title', t)\n    },\n\n    async loadStandaloneYamlConfig() {\n      try {\n        const filename =\n          this.myState.yamlConfig.indexOf('/') > -1\n            ? this.myState.yamlConfig\n            : this.myState.subfolder + '/' + this.myState.yamlConfig\n\n        const text = await this.fileApi.getFileText(filename)\n        this.standaloneYAMLconfig = Object.assign({}, YAML.parse(text))\n        this.validateYAML()\n        this.setVizDetails()\n      } catch (err) {\n        console.error('failed')\n        const e = err as any\n        // maybe it failed because password?\n        if (this.fileSystem.needPassword && e.status === 401) {\n          this.$store.commit('requestLogin', this.fileSystem.slug)\n        }\n      }\n    },\n\n    async validateYAML() {\n      const hasYaml = new RegExp('.*(yml|yaml)$').test(this.myState.yamlConfig)\n\n      let configuration: any\n\n      if (hasYaml) {\n        console.log('has yaml')\n        configuration = this.standaloneYAMLconfig\n      } else {\n        console.log('no yaml')\n        configuration = this.config\n      }\n\n      for (const key in this.YAMLrequirementsLinks) {\n        if (key in configuration === false) {\n          this.$emit('error', {\n            type: Status.ERROR,\n            msg: `YAML file missing required key: ${key}`,\n            desc: 'Check this.YAMLrequirementsLinks for required keys',\n          })\n        }\n      }\n\n      if (configuration.zoom < 5 || configuration.zoom > 20) {\n        this.$emit('error', {\n          type: Status.WARNING,\n          msg: `Zoom is out of the recommended range `,\n          desc: 'Zoom levels should be between 5 and 20. ',\n        })\n      }\n\n      const hasGeoJson = !configuration.network && configuration.geojsonFile\n      if (hasGeoJson) {\n        this.$emit('error', {\n          type: Status.WARNING,\n          msg: `YAML field geojsonFile deprecated`,\n          desc: 'Use YAML field network instad. ',\n        })\n      }\n\n      if (!configuration.display) {\n        this.$emit('error', {\n          type: Status.WARNING,\n          msg: `Display properties not set`,\n          desc: 'Standard values are used',\n        })\n      }\n    },\n\n    setVizDetails() {\n      this.vizDetails = Object.assign({}, this.vizDetails, this.standaloneYAMLconfig)\n    },\n\n    async buildThumbnail() {\n      if (this.thumbnail && this.vizDetails.thumbnail) {\n        try {\n          const blob = await this.fileApi.getFileBlob(\n            this.myState.subfolder + '/' + this.vizDetails.thumbnail\n          )\n          const buffer = await readBlob.arraybuffer(blob)\n          const base64 = arrayBufferToBase64(buffer)\n          if (base64)\n            this.thumbnailUrl = `center / cover no-repeat url(data:image/png;base64,${base64})`\n        } catch (e) {\n          console.error(e)\n        }\n      }\n    },\n\n    toggleShowDiffs() {\n      this.vizDetails.showDifferences = !this.vizDetails.showDifferences\n    },\n\n    /**\n     * changeConfiguration: is the main entry point for changing the viz model.\n     * anything that wants to change colors, widths, data, anthing like that\n     * should all pass through this function so the underlying data model\n     * is modified properly.\n     */\n    changeConfiguration(props: {\n      color?: LineColorDefinition\n      width?: LineWidthDefinition\n      dataset?: DatasetDefinition\n    }) {\n      // console.log(props)\n\n      if (props['color']) {\n        // if (JSON.stringify(props.color) === JSON.stringify(this.vizDetails.display.color)) return\n        this.vizDetails = Object.assign({}, this.vizDetails)\n        this.vizDetails.display.color = props.color\n        this.handleNewColor(props.color)\n      }\n      if (props['width']) {\n        // if (JSON.stringify(props.width) === JSON.stringify(this.vizDetails.display.width)) return\n        this.vizDetails = Object.assign({}, this.vizDetails)\n        this.vizDetails.display.width = props.width\n        this.handleNewWidth(props.width)\n      }\n      if (props['dataset']) {\n        // vizdetails just had the string name, whereas props.dataset contains\n        // a fully-build DatasetDefinition, so let's just handle that\n        this.handleNewDataset(props.dataset)\n      }\n    },\n\n    handleNewFilter(columns: number[]) {\n      this.csvData = Object.assign({}, this.csvData, { activeColumn: columns[0] })\n      this.csvWidth = Object.assign({}, this.csvWidth, { activeColumn: columns[0] })\n\n      // // this.timeFilterColumns = columns\n      // // give animation 150ms to run\n      // setTimeout(() => {\n      //   if (columns.length) {\n      //     this.csvData = Object.assign({}, this.csvData, { activeColumn: columns[0] })\n      //     this.csvWidth = Object.assign({}, this.csvWidth, { activeColumn: columns[0] })\n      //   }\n      // }, 150)\n    },\n\n    handleNewWidth(width: LineWidthDefinition) {\n      // if definition hasn't changed, do nothing\n      if (shallowEqualObjects(width, this.currentWidthDefinition)) {\n        return\n      }\n\n      const { columnName, dataset, scaleFactor } = width\n\n      // if dataset is set to None, just set scale to 0 and we're done\n      if (!dataset) {\n        this.scaleWidth = 0\n        return\n      }\n\n      // change scaling factor without recalculating anything:\n      if (scaleFactor !== undefined) this.scaleWidth = scaleFactor\n\n      // if everything else is the same, don't recalculate anything\n      let recalculate = true\n\n      if (!columnName) recalculate = false\n\n      if (\n        width.columnName === this.currentWidthDefinition.columnName &&\n        width.dataset === this.currentWidthDefinition.dataset\n      ) {\n        recalculate = false\n      }\n\n      // save settings\n      this.currentWidthDefinition = width\n\n      // this part takes longer to calculate. only do it if we have to\n      if (!recalculate) return\n\n      const selectedDataset = dataset ? this.datasets[dataset] : this.csvWidth.dataTable\n      if (!selectedDataset) return\n\n      if (this.csvWidth.dataTable !== selectedDataset) {\n        this.csvWidth.dataTable = selectedDataset\n        this.csvWidth.activeColumn = columnName || ''\n        // this.csvWidthBase.dataTable = selectedDataset\n        this.csvWidthBase.activeColumn = columnName || ''\n      }\n\n      const dataColumn = selectedDataset[columnName || '']\n      if (!dataColumn) {\n        const msg = `Width: column \"${columnName}\" not found in dataset \"${this.csvData.datasetKey}\"`\n        console.error(msg)\n        this.$emit('error', {\n          type: Status.ERROR,\n          msg,\n        })\n        return\n      }\n\n      // Tell Vue we have new data\n      this.csvWidth = {\n        datasetKey: dataset || this.csvWidth.datasetKey,\n        dataTable: selectedDataset,\n        activeColumn: columnName || '',\n        csvRowFromLinkRow: dataset ? this.csvRowLookupFromLinkRow[dataset] : [],\n      }\n      this.generateWidthArray()\n    },\n\n    handleNewColor(color: LineColorDefinition) {\n      this.fixedColors = color.fixedColors\n\n      const columnName = color.columnName\n      if (!columnName) {\n        this.generateColorArray()\n        return\n      }\n\n      const datasetKey = color.dataset\n      const selectedDataset = this.datasets[datasetKey]\n      if (!selectedDataset) return\n\n      if (this.csvData.dataTable !== selectedDataset) {\n        this.csvData = {\n          datasetKey,\n          dataTable: selectedDataset,\n          activeColumn: '',\n          csvRowFromLinkRow: this.csvRowLookupFromLinkRow[datasetKey],\n        }\n      }\n\n      const column = this.csvData.dataTable[columnName]\n      if (!column) {\n        const msg = `Color: Column \"${columnName}\" not found in dataset \"${this.csvData.datasetKey}\"`\n        console.error(msg)\n        this.$emit('error', {\n          type: Status.ERROR,\n          msg,\n        })\n        return\n      }\n\n      this.csvData.activeColumn = column.name\n      this.csvBase.activeColumn = column.name\n\n      this.isButtonActiveColumn = false\n      this.generateColorArray()\n    },\n\n    setMapCenterFromVizDetails() {\n      if (typeof this.vizDetails.center == 'string') {\n        this.vizDetails.center = this.vizDetails.center.split(',').map(Number)\n      }\n\n      if (!this.vizDetails.zoom) {\n        this.vizDetails.zoom = 9\n      }\n\n      this.$store.commit('setMapCamera', {\n        longitude: this.vizDetails.center[0],\n        latitude: this.vizDetails.center[1],\n        bearing: 0,\n        pitch: 0,\n        zoom: this.vizDetails.zoom,\n        jump: false,\n      })\n\n      const view = {\n        longitude: this.vizDetails.center[0],\n        latitude: this.vizDetails.center[1],\n        bearing: 0,\n        pitch: 0,\n        zoom: this.vizDetails.zoom || 10, // use 10 default if we don't have a zoom\n        jump: false, // move the map no matter what\n      }\n\n      // bounce our map\n      if (REACT_VIEW_HANDLES[this.linkLayerId]) {\n        REACT_VIEW_HANDLES[this.linkLayerId](view)\n      }\n    },\n\n    async setMapCenter() {\n      if (this.vizDetails.center) return this.setMapCenterFromVizDetails()\n\n      const data = this.geojsonData\n\n      if (!data.source.length) return\n\n      let samples = 0\n      let longitude = 0\n      let latitude = 0\n\n      // figure out the center\n      if (this.geojsonData.projection !== 'Atlantis') {\n        const numLinks = data.source.length / 2\n        const gap = numLinks < 4096 ? 2 : 1024\n        for (let i = 0; i < numLinks; i += gap) {\n          longitude += data.source[i * 2]\n          latitude += data.source[i * 2 + 1]\n          samples++\n        }\n        longitude = longitude / samples\n        latitude = latitude / samples\n      }\n      console.log('center', longitude, latitude)\n\n      this.$store.commit('setMapCamera', {\n        longitude,\n        latitude,\n        bearing: 0,\n        pitch: 0,\n        zoom: 8,\n        jump: false,\n      })\n    },\n\n    setupLogoMover() {\n      this.resizer = new ResizeObserver(this.moveLogo)\n      const deckmap = document.getElementById(`container-${this.linkLayerId}`) as HTMLElement\n      this.resizer.observe(deckmap)\n    },\n\n    moveLogo() {\n      const deckmap = document.getElementById(`container-${this.linkLayerId}`) as HTMLElement\n      const logo = deckmap?.querySelector('.mapboxgl-ctrl-bottom-left') as HTMLElement\n      if (logo) {\n        const right = deckmap.clientWidth > 640 ? '280px' : '36px'\n        logo.style.right = right\n      }\n    },\n\n    async updateStatus(message: string) {\n      this.myState.statusMessage = message\n    },\n\n    async loadNetwork(): Promise<any> {\n      if (!this.myDataManager) throw Error('links: no datamanager')\n\n      this.myState.statusMessage = 'Loading network...'\n\n      const filename = this.vizDetails.network || this.vizDetails.geojsonFile\n      try {\n        const network = await this.myDataManager.getRoadNetwork(\n          filename,\n          this.myState.subfolder,\n          this.vizDetails,\n          this.updateStatus\n        )\n\n        this.numLinks = network.linkIds.length\n        this.geojsonData = network as any\n\n        // Handle Atlantis: no long/lat coordinates\n        if (network.projection) {\n          this.vizDetails.projection = '' + network.projection\n          // this.$store.commit('setMapStyles', MAP_STYLES_OFFLINE)\n        }\n\n        this.setMapCenter() // this could be off main thread\n\n        this.myState.statusMessage = ''\n\n        this.moveLogo()\n\n        this.$emit('isLoaded', true)\n\n        // then load CSVs in background\n        this.loadCSVFiles()\n      } catch (e) {\n        this.myState.statusMessage = '' + e\n        const title = this.vizDetails.title || 'Network map'\n        this.$emit('error', `${title}: ` + e)\n        this.$emit('isLoaded')\n      }\n    },\n\n    handleNewDataset(props: DatasetDefinition) {\n      console.log('NEW dataset', props)\n      const { key, dataTable, filename } = props\n\n      // We need a lookup so we can find the CSV row that matches each link row.\n      // A normal hashmap lookup is too slow, so we'll create an array containing\n      // the lookup on load (now); then it should be O(1) fast from that point forward.\n\n      // For now we assume the 1st CSV column always has the link ID\n      const columnNames = Object.keys(dataTable)\n      const assumedLinkIdIsFirstColumn = columnNames[0]\n      const linkIdColumn = dataTable[assumedLinkIdIsFirstColumn]\n\n      let tempMapLinkIdToCsvRow = {} as any\n      for (let csvRow = 0; csvRow < linkIdColumn.values.length; csvRow++) {\n        tempMapLinkIdToCsvRow[linkIdColumn.values[csvRow]] = csvRow\n      }\n\n      // Create a LOOKUP array which links this CSV data to the network links\n      // loop through all network links, we need the CSV row for each link.\n      const getCsvRowNumberFromLinkRowNumber: number[] = []\n      for (let linkRow = 0; linkRow < this.geojsonData.linkIds.length; linkRow++) {\n        const linkId = this.geojsonData.linkIds[linkRow]\n        const csvRow = tempMapLinkIdToCsvRow[linkId]\n        if (csvRow !== undefined) getCsvRowNumberFromLinkRowNumber[linkRow] = csvRow\n      }\n\n      // Save the lookup with the dataset.\n      this.csvRowLookupFromLinkRow[key] = getCsvRowNumberFromLinkRowNumber\n      tempMapLinkIdToCsvRow = {} // probably unnecessary but we def want this to be GC'ed\n\n      // all done!\n      if (filename) this.vizDetails.datasets[key] = filename\n      this.datasets = Object.assign({ ...this.datasets }, { [key]: dataTable })\n      this.handleDatasetisLoaded(key)\n    },\n\n    generateWidthArray() {\n      const numLinks = this.geojsonData.linkIds.length\n      const widths = new Float32Array(numLinks)\n\n      const widthValues = this.csvWidth?.dataTable[this.csvWidth.activeColumn]?.values\n      const baseValues = this.csvBase?.dataTable[this.csvBase.activeColumn]?.values\n\n      const width = (i: number) => {\n        const csvRow = this.csvWidth.csvRowFromLinkRow[i]\n        const value = widthValues[csvRow]\n\n        if (this.vizDetails.showDifferences) {\n          const baseRow = this.csvBase.csvRowFromLinkRow[i]\n          const baseValue = baseValues[baseRow]\n          const diff = Math.abs(value - baseValue)\n          return diff\n        } else {\n          return value\n        }\n      }\n\n      for (let i = 0; i < numLinks; i++) {\n        widths[i] = width(i)\n      }\n      this.widthArray = widths\n    },\n\n    generateColorArray() {\n      // deck.gl colors must be in rgb[] or rgba[] format\n      const colorsAsRGB: any = this.fixedColors.map(hexcolor => {\n        const c = rgb(hexcolor)\n        return [c.r, c.g, c.b, 255]\n      })\n\n      // Build breakpoints between 0.0 - 1.0 to match the number of color swatches\n      // e.g. If there are five colors, then we need 4 breakpoints: 0.2, 0.4, 0.6, 0.8.\n      // An exponent reduces visual dominance of very large values at the high end of the scale\n      const exponent = 4.0\n      const domain = new Array(this.fixedColors.length - 1)\n        .fill(0)\n        .map((v, i) => Math.pow((1 / this.fixedColors.length) * (i + 1), exponent))\n\n      // *scaleOrdinal* is the d3 function that maps categorical variables to colors.\n      // *scaleThreshold* is the d3 function that maps numerical values from [0.0,1.0) to the color buckets\n      // *range* is the list of colors;\n      // *domain* is the list of breakpoints in the 0-1.0 continuum; it is auto-created from data for categorical.\n      // *colorRampType* is 0 if a categorical color ramp is chosen\n      const buildData = this.csvData.dataTable\n      const baseData = this.csvBase.dataTable\n      const activeColumn = this.csvData.activeColumn\n\n      const buildColumn: DataTableColumn = buildData[activeColumn] || { values: [] }\n      const baseColumn: DataTableColumn = baseData[activeColumn] || { values: [] }\n\n      const isCategorical = this.colorRampType === 0 || buildColumn.type == DataType.STRING\n      const setColorBasedOnValue: any = isCategorical\n        ? scaleOrdinal().range(colorsAsRGB)\n        : scaleThreshold().range(colorsAsRGB).domain(domain)\n\n      const numLinks = this.geojsonData.linkIds.length\n      const colors = new Uint8Array(4 * numLinks)\n\n      const colorPaleGrey = globalStore.state.isDarkMode ? [80, 80, 80, 96] : [212, 212, 212, 40]\n      const colorInvisible = [0, 0, 0, 0]\n\n      const color = (i: number) => {\n        // if (!buildData[this.csvData.activeColumn]) return colorPaleGrey\n\n        const csvRow = this.csvData.csvRowFromLinkRow[i]\n        let value = buildData[this.csvData.activeColumn]?.values[csvRow]\n\n        if (this.fixedColors.length === 1) return colorsAsRGB[0]\n        if (!value && !this.vizDetails.showDifferences) return colorInvisible\n        if (isCategorical) return setColorBasedOnValue(value)\n\n        if (this.vizDetails.showDifferences) {\n          const baseRow = this.csvBase.csvRowFromLinkRow[i]\n          const baseValue = baseData[activeColumn].values[baseRow]\n          const diff = value - baseValue\n\n          if (diff === 0) return colorPaleGrey // setColorBasedOnValue(0.5)\n\n          // red vs. blue\n          if (this.isDarkMode) {\n            return diff > 0 ? [255, 64, 64, 255] : [64, 96, 255, 255] // red vs. blue\n          } else {\n            return diff > 0 ? [255, 0, 0, 255] : [32, 64, 255, 255] // red vs. blue\n          }\n        } else {\n          // don't use log scale if numbers are below 1.0\n          let ratio = value / (buildColumn.max || 1.0)\n          // if (ratio < 0.0001) return colorPaleGrey\n          return setColorBasedOnValue(ratio)\n        }\n      }\n\n      for (let i = 0; i < numLinks; i++) {\n        colors.set(color(i), i * 4)\n      }\n\n      this.colorArray = colors\n    },\n\n    loadCSVFiles() {\n      this.myState.statusMessage = 'Loading datasets...'\n\n      // Old yaml format listed csvFile and csvBase explicitly.\n      // Merge those into vizDetails.datasets if they exist.\n      if (!this.vizDetails.datasets) this.vizDetails.datasets = {}\n      if (this.vizDetails.csvFile) this.vizDetails.datasets.csvFile = this.vizDetails.csvFile\n      if (this.vizDetails.csvBase) this.vizDetails.datasets.csvBase = this.vizDetails.csvBase\n\n      // Load files on workers, in parallel and off the main thread\n      // this will call finishedLoadingCSV() for each when it's done loading & parsing\n      const datasetsToLoad = Object.entries(this.vizDetails.datasets)\n\n      if (datasetsToLoad.length) {\n        for (const [key, filename] of datasetsToLoad) {\n          this.loadOneCSVFile(key, filename)\n        }\n      } else {\n        this.showSimpleNetworkWithNoDatasets()\n      }\n    },\n\n    showSimpleNetworkWithNoDatasets() {\n      // no datasets; we are just showing the bare network\n      this.csvData = {\n        datasetKey: '',\n        dataTable: {\n          [LOOKUP_COLUMN]: {\n            name: LOOKUP_COLUMN,\n            type: DataType.LOOKUP,\n            values: [],\n          },\n        },\n        activeColumn: LOOKUP_COLUMN,\n        csvRowFromLinkRow: [],\n      }\n\n      // there is no range(maxValue) in Javascript! :-(\n      const length = this.geojsonData.source.length / 2 // half because this contains x/y coordinates\n      const lookup = [...Array(length).keys()]\n      this.csvData.dataTable[LOOKUP_COLUMN].values = lookup\n\n      this.myState.statusMessage = ''\n      this.setDataIsLoaded()\n\n      const color: LineColorDefinition = {\n        fixedColors: this.fixedColors,\n        dataset: '',\n        columnName: '',\n        normalize: '',\n      }\n      this.changeConfiguration({ color })\n    },\n\n    handleDatasetisLoaded(datasetId: string) {\n      const datasetKeys = Object.keys(this.datasets)\n\n      if (datasetId === 'csvBase' || datasetId === 'base') {\n        // is base dataset:\n        this.csvBase = {\n          datasetKey: datasetId,\n          dataTable: this.datasets[datasetId],\n          csvRowFromLinkRow: this.csvRowLookupFromLinkRow[datasetId],\n          activeColumn: '',\n        }\n        this.csvWidthBase = {\n          datasetKey: datasetId,\n          dataTable: this.datasets[datasetId],\n          csvRowFromLinkRow: this.csvRowLookupFromLinkRow[datasetId],\n          activeColumn: '',\n        }\n      } else if (this.csvData.activeColumn === '') {\n        // is first non-base dataset:\n        // set a default view, if user didn't pass anything in\n        if (!this.vizDetails.display.color && !this.vizDetails.display.width) {\n          const firstColumnName = Object.values(this.datasets[datasetId])[0].name\n          this.csvData = {\n            datasetKey: datasetId,\n            dataTable: this.datasets[datasetId],\n            csvRowFromLinkRow: this.csvRowLookupFromLinkRow[datasetId],\n            activeColumn: firstColumnName,\n          }\n        }\n      }\n\n      // last dataset\n      if (datasetKeys.length === Object.keys(this.vizDetails.datasets).length) {\n        this.setDataIsLoaded()\n        this.myState.statusMessage = ''\n        console.log({ DATASETS: this.datasets })\n      }\n    },\n\n    async loadOneCSVFile(key: string, filename: string) {\n      try {\n        const dataset = await this.myDataManager.getDataset({ dataset: filename })\n        const dataTable = dataset.allRows\n\n        console.log('loaded', key)\n        this.myState.statusMessage = 'Analyzing...'\n\n        // remove columns without names; we can't use them\n        const cleanTable: DataTable = {}\n        for (const key of Object.keys(dataTable)) {\n          if (key) cleanTable[key] = dataTable[key]\n        }\n\n        this.datasets = Object.assign({ ...this.datasets }, { [key]: cleanTable })\n        this.handleNewDataset({ key, dataTable: cleanTable })\n      } catch (e) {\n        this.$emit('error', 'Could not load ' + filename)\n        this.$emit('isLoaded')\n      }\n    },\n\n    handleNewDataColumn(value: { dataset: LookupDataset; column: string }) {\n      const { dataset, column } = value\n\n      // selector is attached to a dataset. Both color and width could be\n      // impacted, if they are attached to that dataset.\n\n      const config: any = {}\n\n      // WIDTHS\n      if (dataset.datasetKey === this.csvWidth.datasetKey) {\n        const width: LineWidthDefinition = { ...this.vizDetails.display.width }\n        width.columnName = column\n        config.width = width\n      }\n\n      // COLORS\n      if (dataset.datasetKey === this.csvData.datasetKey) {\n        const color: LineColorDefinition = { ...this.vizDetails.display.color }\n        color.columnName = column\n        config.color = color\n      }\n\n      this.changeConfiguration(config)\n    },\n  },\n  async mounted() {\n    this.$store.commit('setFullScreen', !this.thumbnail)\n\n    this.myState.thumbnail = this.thumbnail\n    this.myState.yamlConfig = this.yamlConfig ?? ''\n    this.myState.subfolder = this.subfolder\n\n    await this.getVizDetails()\n\n    // default width is 250, why not\n    this.scaleWidth = this.vizDetails.display?.width?.widthFactor || 250\n\n    if (this.thumbnail) {\n      this.buildThumbnail()\n      return\n    }\n\n    this.setupLogoMover()\n\n    // load network; when it is done it will call the loadCSVs afterwards.\n    this.loadNetwork()\n  },\n\n  beforeDestroy() {\n    // MUST delete the React view handle to prevent gigantic memory leak!\n    delete REACT_VIEW_HANDLES[this.linkLayerId]\n\n    try {\n      for (const worker of this.dataLoaderWorkers) worker.terminate()\n    } catch (e) {}\n\n    this.$store.commit('setFullScreen', false)\n  },\n})\n\nexport default MyComponent\n</script>\n\n<style scoped lang=\"scss\">\n@import '@/styles.scss';\n\n.link-volume-plot {\n  background: url('assets/thumbnail.jpg') no-repeat;\n  background-size: cover;\n  min-height: $thumbnailHeight;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n}\n\n.link-volume-plot.hide-thumbnail {\n  background: var(--bgMapPanel);\n}\n\n.plot-container {\n  display: grid;\n  grid-template-columns: auto 1fr;\n  grid-template-rows: 1fr auto auto;\n  pointer-events: none;\n  flex: 1;\n  position: relative;\n}\n\n.map-area {\n  pointer-events: auto;\n}\n\n.top-panel {\n  pointer-events: auto;\n  grid-column: 1 / 2;\n  grid-row: 1 / 2;\n  background-color: var(--bgPanel);\n  margin: 0 auto auto 0;\n  padding: 0.5rem 1.5rem 1rem 1.5rem;\n  z-index: 5;\n  box-shadow: 0px 2px 10px #22222244;\n}\n\n.bottom-panel {\n  grid-column: 1 / 3;\n  grid-row: 2 / 3;\n  display: flex;\n  flex-direction: column;\n  font-size: 0.8rem;\n  pointer-events: auto;\n  margin: auto 0.5rem 2px 7px;\n  filter: drop-shadow(0px 2px 4px #22222233);\n}\n\n.status-message {\n  margin: 0 0 0.5rem 0;\n  padding: 0.5rem 0.5rem;\n  color: var(--textFancy);\n  background-color: var(--bgPanel);\n  font-size: 1.2rem;\n  line-height: 1.5rem;\n}\n\n.right-side {\n  z-index: 1;\n  display: flex;\n  flex-direction: row;\n  margin: 0 0 auto 0;\n}\n\n.panel-items {\n  display: flex;\n  flex-direction: column;\n  padding: 0.5rem 0.5rem;\n  margin-bottom: 5px;\n  width: 16rem;\n  background-color: var(--bgPanel);\n  border-radius: 3px;\n  overflow: visible;\n  // overflow-x: hidden;\n}\n\n.panel-item {\n  h3 {\n    line-height: 1.7rem;\n  }\n\n  p {\n    font-size: 0.9rem;\n  }\n}\n\ninput {\n  border: none;\n  background-color: var(--bgCream2);\n  color: var(--bgDark);\n}\n\n.toggle {\n  margin: 0.25rem 0.5rem 0.25rem 0;\n}\n\n#dropdown-menu-color-selector {\n  background-color: var(--bgBold);\n\n  p {\n    color: #888;\n  }\n}\n\n.panel-item {\n  margin-top: 0rem;\n}\n\n.config-section {\n  flex: 1;\n}\n\n.diff-section {\n  display: flex;\n  flex-direction: row;\n  margin-top: 0.7rem;\n\n  p {\n    margin: auto 0;\n  }\n}\n\n.filter-panel {\n  height: 6rem;\n  background-color: var(--bgPanel);\n  margin: 0rem auto 5px 0px;\n  border-radius: 3px;\n  // width: 100%;\n}\n\n@media only screen and (max-width: 640px) {\n  .message-pane {\n    padding: 0.5rem 0.5rem;\n  }\n}\n</style>\n"],"names":["_sfc_main$1","defineComponent","useIt","result","i18n","_sfc_main","TimeSlider","f","DataType","value","colors","column","debounce","Component","viewId","links","colorRampType","build","base","widths","widthsBase","newColors","newWidths","dark","projection","scaleWidth","mapIsIndependent","widthDivisor","viewState","setViewState","useState","globalStore","buildColumn","baseColumn","widthColumn","isCategorical","REACT_VIEW_HANDLES","view","handleClick","handleViewState","precise","x","format","buildTooltipHtml","columnBuild","columnBase","geoOffset","index","html","baseIndex","baseValue","diff","getTooltip","object","tooltip","widthTip","e","coordinateSystem","COORDINATE_SYSTEM","layer","LineOffsetLayer","OFFSET_DIRECTION","showBackgroundMap","React","DeckGL","isDragging","isHovering","StaticMap","MAPBOX_TOKEN","LOOKUP_COLUMN","MyComponent","SelectorPanel","DrawingTool","LinkGlLayer","ToggleButton","VizConfigurator","ZoomButtons","LegendStore","ColorScheme","DashboardDataManager","HTTPFileSystem","svnProject","a","rampType","_b","_a","filename","emptyState","title","t","text","YAML","err","hasYaml","configuration","key","Status","blob","buffer","readBlob","base64","arrayBufferToBase64","props","columns","width","shallowEqualObjects","columnName","dataset","scaleFactor","recalculate","selectedDataset","msg","color","datasetKey","data","samples","longitude","latitude","numLinks","gap","i","deckmap","logo","right","message","network","dataTable","assumedLinkIdIsFirstColumn","linkIdColumn","tempMapLinkIdToCsvRow","csvRow","getCsvRowNumberFromLinkRowNumber","linkRow","linkId","widthValues","baseValues","_d","_c","baseRow","colorsAsRGB","hexcolor","c","rgb","exponent","domain","v","buildData","baseData","activeColumn","setColorBasedOnValue","scaleOrdinal","scaleThreshold","colorPaleGrey","colorInvisible","ratio","datasetsToLoad","length","lookup","datasetId","datasetKeys","firstColumnName","cleanTable","config","worker"],"mappings":"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"}