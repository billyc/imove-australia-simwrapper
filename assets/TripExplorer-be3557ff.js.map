{"version":3,"file":"TripExplorer-be3557ff.js","sources":["../../src/plugins/imove-trip-explorer/TimeSlider.vue","../../src/plugins/imove-trip-explorer/SelectorPanel.vue","../../src/plugins/imove-trip-explorer/LinkLayer.tsx","../../src/plugins/imove-trip-explorer/TripExplorer.vue"],"sourcesContent":["<template lang=\"pug\">\n.time-slider-main-content\n\n  b-slider(\n    v-model=\"sliderValue\"\n    :max=\"stops.length - 1\"\n    :tooltip=\"false\"\n  )\n      b-slider-tick(v-for=\"stop,i in stops\" :key=\"i\" :value=\"i\")\n\n\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  name: 'TimeSliderLinksGl',\n  props: {\n    useRange: Boolean,\n    stops: { type: Array, required: true },\n    dropdownValue: String,\n  },\n  data() {\n    return {\n      sliderValue: 0 as any,\n    }\n  },\n  watch: {\n    // dropdownValue(value) {\n    //   this.sliderValue = value\n    // },\n\n    useRange(useIt: boolean) {\n      if (useIt) {\n        this.sliderValue = [this.stops[0], this.stops[this.stops.length - 1]]\n      } else {\n        this.sliderValue = [this.stops[0]]\n      }\n      console.log('changed to: ' + this.sliderValue)\n    },\n    sliderValue(result: any) {\n      this.$emit('change', result)\n    },\n  },\n  mounted() {},\n})\n</script>\n\n<style scoped>\n.time-slider-main-content {\n  padding: 0rem 0rem 0rem 0.25rem;\n  margin: 0 0.2rem;\n}\n</style>\n","<template lang=\"pug\">\n.config-panel\n\n  //- time-of-day slider\n  .panel-item.expand(v-if=\"vizDetails.useSlider && activeColumn\")\n    p: b {{ activeColumn }}\n\n    time-slider.time-slider(\n      :useRange='false'\n      :stops=\"getColumns()\"\n      :dropdownValue=\"activeColumn\"\n      @change='handleTimeSliderChanged')\n\n\n  //- Column picker  -- if no slider\n  .panel-item(v-if=\"!vizDetails.useSlider\")\n    p: b {{ $t('selectColumn') }}\n\n    .dropdown.is-up.full-width(:class=\"{'is-active': isButtonActive}\")\n      .dropdown-trigger\n        button.full-width.is-warning.button(:class=\"{'is-loading': !activeColumn}\"\n          aria-haspopup=\"true\" aria-controls=\"dropdown-menu-column-selector\"\n          @click=\"handleClickDropdown\"\n        )\n          b {{ buttonTitle }}\n          span.icon.is-small: i.fas.fa-angle-down(aria-hidden=\"true\")\n\n      #dropdown-menu-column-selector.dropdown-menu(role=\"menu\" :style=\"{'max-height':'24rem', 'overflow-y': 'auto', 'border': '1px solid #ccc'}\")\n        .dropdown-content\n          a.dropdown-item(v-for=\"column in getColumns()\"\n            @click=\"handleSelectColumn(column)\") {{ column }}\n\n</template>\n\n<script lang=\"ts\">\nconst i18n = {\n  messages: {\n    en: {\n      selectColumn: 'Data:',\n      loading: 'Loading...',\n      bandwidths: 'Widths: 1 pixel =:',\n      timeOfDay: '',\n      colors: 'Colors',\n    },\n    de: {\n      selectColumn: 'Datenmengen:',\n      loading: 'Laden...',\n      bandwidths: 'Linienbreiten: 1 pixel =:',\n      timeOfDay: '',\n      colors: 'Farben',\n    },\n  },\n}\n\nimport { defineComponent } from 'vue'\nimport type { PropType } from 'vue'\n\nimport { debounce } from 'debounce'\n\nimport globalStore from '@/store'\nimport TimeSlider from './TimeSlider.vue'\nimport { ColorScheme, DataTable, DataType, LookupDataset } from '@/Globals'\n\nexport default defineComponent({\n  name: 'SelectorPanel',\n  i18n,\n  components: { TimeSlider },\n  props: {\n    csvData: { type: Object as PropType<LookupDataset>, required: true },\n    scaleWidth: { type: Number, required: true },\n    showDiffs: { type: Boolean, required: true },\n    vizDetails: { type: Object as PropType<{ useSlider: boolean }>, required: true },\n  },\n  data() {\n    return {\n      isButtonActive: false,\n      isColorButtonActive: false,\n      scaleWidthValue: '',\n      debounceScale: {} as any, // (vm: any) => debounce(vm.gotNewScale, 500),\n      handleTimeSliderChanged: {} as any,\n    }\n  },\n  computed: {\n    activeColumn(): string {\n      return this.csvData.activeColumn\n    },\n    buttonTitle(): string {\n      if (!this.activeColumn) return '' + this.$i18n.t('loading')\n      return this.activeColumn\n    },\n  },\n  watch: {\n    scaleWidth() {\n      this.scaleWidthValue = '' + this.scaleWidth\n    },\n    scaleWidthValue() {\n      // if (this.scaleWidth === parseFloat(this.scaleWidthValue)) return\n\n      if (isNaN(parseFloat(this.scaleWidthValue))) {\n        return\n      }\n      this.debounceScale()\n    },\n  },\n  methods: {\n    getColumns() {\n      // TODO: drop first column always: it's the link-id...\n      const columns = Object.values(this.csvData.dataTable)\n        .slice(1)\n        .filter(f => f.name && f.type !== DataType.LOOKUP)\n        .map(f => f.name)\n      return columns\n    },\n    gotNewScale() {\n      // if (this.scaleWidth !== parseFloat(this.scaleWidthValue)) {\n      //   this.scaleWidthValue = '' + this.scaleWidth\n      // }\n      this.$emit('scale', parseFloat(this.scaleWidthValue))\n    },\n\n    changeTimeSlider(value: any) {\n      if (value.length && value.length === 1) value = value[0]\n\n      this.$emit('slider', { dataset: this.csvData, column: this.getColumns()[value] })\n    },\n\n    handleClickDropdown() {\n      this.isButtonActive = !this.isButtonActive\n    },\n\n    handleColorRamp(colors: string) {\n      console.log(colors)\n      this.isColorButtonActive = false\n      this.$emit('colors', colors)\n    },\n\n    clearDropdown() {\n      console.log('boop')\n      this.isButtonActive = false\n    },\n\n    async handleSelectColumn(column: string) {\n      console.log('panel: selected', column)\n      this.isButtonActive = false\n      this.$emit('column', { dataset: this.csvData, column: column })\n    },\n  },\n  mounted() {\n    this.debounceScale = debounce(this.gotNewScale, 500)\n    this.handleTimeSliderChanged = debounce(this.changeTimeSlider, 250)\n    this.scaleWidthValue = '' + this.scaleWidth\n  },\n})\n</script>\n\n<style scoped lang=\"scss\">\n@import '@/styles.scss';\n\n.config-panel {\n  display: flex;\n  flex-direction: row;\n}\n\n.full-width {\n  display: block;\n  width: 100%;\n}\n\n.panel-item {\n  padding-right: 1rem;\n}\n\n.last-item {\n  padding-right: 0;\n}\n\np {\n  font-size: 0.9rem;\n}\n\n.color-button,\n.swap-color {\n  width: 8rem;\n  height: 32px;\n}\n\n.color-button:hover {\n  cursor: pointer;\n  box-shadow: 0px 0px 3px 3px rgba(128, 128, 128, 0.3);\n}\n\nbutton:hover {\n  box-shadow: 0px 0px 3px 3px rgba(128, 128, 128, 0.3);\n}\n\ninput {\n  border: none;\n  background-color: var(--bgCream2);\n  color: var(--bgDark);\n}\n\n.dropdown {\n  overflow: visible;\n  // width: 175px;\n}\n\n#dropdown-menu-color-selector {\n  background-color: var(--bgBold);\n\n  p {\n    color: #888;\n  }\n}\n\n.expand {\n  flex: 1;\n}\n\n.time-slider {\n  width: 100%;\n}\n\n@media only screen and (max-width: 768px) {\n  .config-panel {\n    flex-direction: column;\n  }\n}\n</style>\n","import React, { useState, useMemo, useEffect } from 'react'\nimport DeckGL from '@deck.gl/react'\nimport { COORDINATE_SYSTEM } from '@deck.gl/core'\n\nimport { OFFSET_DIRECTION } from '@/layers/LineOffsetLayer'\nimport PathOffsetLayer from '@/layers/PathOffsetLayer'\n\nimport { StaticMap } from 'react-map-gl'\nimport { format } from 'mathjs'\n\nimport {\n  MAPBOX_TOKEN,\n  REACT_VIEW_HANDLES,\n  DataTableColumn,\n  LookupDataset,\n  DataType,\n} from '@/Globals'\nimport globalStore from '@/store'\n\nexport default function Component({\n  viewId = 0,\n  links = { source: new Float32Array(), dest: new Float32Array() },\n  colorRampType = -1, // -1 undefined, 0 categorical, 1 diffs, 2 sequential\n  dark = false,\n  projection = '',\n  scaleWidth = 1,\n  mapIsIndependent = false,\n  click = {} as any,\n  paths = [] as any,\n}) {\n  // ------- draw frame begins here -----------------------------\n\n  const widthDivisor = scaleWidth ? 1 / scaleWidth : 0\n\n  const [viewState, setViewState] = useState(globalStore.state.viewState)\n\n  // register setViewState in global view updater so we can respond to external map motion\n  REACT_VIEW_HANDLES[viewId] = (view: any) => {\n    if (view) {\n      setViewState(view)\n    } else {\n      setViewState(globalStore.state.viewState)\n    }\n  }\n\n  function handleClick(event: any) {\n    console.log('click!', event)\n    if (event.coordinate) {\n      console.log(event.coordinate)\n      click({ coordinate: event.coordinate })\n    }\n  }\n\n  function handleViewState(view: any) {\n    setViewState(view)\n    view.center = [view.longitude, view.latitude]\n\n    if (!mapIsIndependent) globalStore.commit('setMapCamera', view)\n  }\n\n  function precise(x: number) {\n    return format(x, { lowerExp: -6, upperExp: 6, precision: 5 })\n  }\n\n  function buildTooltipHtml(\n    columnBuild: DataTableColumn,\n    columnBase: DataTableColumn,\n    geoOffset: number\n  ) {\n    return null\n  }\n\n  function getTooltip({ object, index }: { object: any; index: number }) {\n    // tooltip will show values for color settings and for width settings.\n    // if there is base data, it will also show values and diff vs. base for both color and width.\n    return null\n  }\n\n  // Atlantis is pre-converted now in the RoadNetworkLoader to lng/lat\n  // projection == 'Atlantis' ? COORDINATE_SYSTEM.METER_OFFSETS : COORDINATE_SYSTEM.DEFAULT\n  const coordinateSystem = COORDINATE_SYSTEM.DEFAULT\n\n  //@ts-ignore\n  const layer = new PathOffsetLayer({\n    id: 'pathLayer',\n    data: paths,\n    getPath: (d: any) => d.path,\n    getColor: [0, 200, 128],\n    getWidth: 3,\n    widthUnits: 'pixels',\n    widthScale: 1, // widthDivisor,\n    widthMinPixels: 0.5,\n    widthMaxPixels: 50,\n    pickable: true,\n    coordinateSystem,\n    opacity: 0.35,\n    autoHighlight: true,\n    highlightColor: [255, 0, 224],\n    offsetDirection: OFFSET_DIRECTION.LEFT,\n    // updateTriggers: {\n    //   getPath: [links.source],\n    //   getTargetPosition: [links.dest],\n    //   getColor: [newColors, dark],\n    //   getWidth: [newWidths],\n    // },\n    transitions: {\n      getColor: 250,\n      getWidth: 250,\n      getPath: 0,\n      widthScale: 250,\n    },\n    parameters: {\n      depthTest: false,\n    },\n  })\n\n  const showBackgroundMap = true // projection && projection !== 'Atlantis'\n\n  return (\n    /*\n    //@ts-ignore */\n    <DeckGL\n      layers={[layer]}\n      viewState={viewState}\n      controller={true}\n      pickingRadius={5}\n      getTooltip={getTooltip}\n      getCursor={({ isDragging, isHovering }: any) =>\n        isDragging ? 'grabbing' : isHovering ? 'pointer' : 'grab'\n      }\n      onClick={handleClick}\n      onViewStateChange={(e: any) => handleViewState(e.viewState)}\n    >\n      {showBackgroundMap && (\n        /*\n        // @ts-ignore */\n        <StaticMap mapStyle={globalStore.getters.mapStyle} mapboxApiAccessToken={MAPBOX_TOKEN} />\n      )}\n    </DeckGL>\n  )\n}\n","<template lang=\"pug\">\n.link-volume-plot(:class=\"{'hide-thumbnail': !thumbnail}\"\n        :style='{\"background\": urlThumbnail}'\n        oncontextmenu=\"return false\")\n\n  .details-panel\n    h3.center RELIABILITY EXPLORER\n    p.center\n      br\n      | {{ numTrips ? '&nbsp;' : 'Select an intersection.' }}\n\n    .statistics\n      h3 Trips\n      h4(v-if=\"numTrips\") {{numTrips}} trip{{ numTrips == 1 ? '' : 's'}} found\n      h4(v-else) &nbsp;\n\n      br\n      p Day of Week\n      b-button.is-small(@click=\"toggleDay(0)\" :type=\"dayOfWeek[0]\") Mo\n      b-button.is-small(@click=\"toggleDay(1)\" :type=\"dayOfWeek[1]\") Tu\n      b-button.is-small(@click=\"toggleDay(2)\" :type=\"dayOfWeek[2]\") We\n      b-button.is-small(@click=\"toggleDay(3)\" :type=\"dayOfWeek[3]\") Th\n      b-button.is-small(@click=\"toggleDay(4)\" :type=\"dayOfWeek[4]\") Fr\n      b-button.is-small(@click=\"toggleDay(5)\" :type=\"dayOfWeek[5]\") Sa\n      b-button.is-small(@click=\"toggleDay(6)\" :type=\"dayOfWeek[6]\") Su\n      br\n      br\n      p Vehicle Types\n      b-button.is-small(@click=\"toggleVehicle(0)\" :type=\"vehType[0]\") All\n      b-button.is-small(@click=\"toggleVehicle(1)\" :type=\"vehType[1]\") Cars\n      b-button.is-small(@click=\"toggleVehicle(2)\" :type=\"vehType[2]\") HCV\n\n      br\n      br\n\n    .reliability\n      h3 Reliability\n      p Speed by time of day\n      br\n      p: b Average speed: {{ Math.round(10* avgSpeed) / 10 }}\n\n      vue-plotly.myplot(v-if=\"speedData.length\"\n        :data=\"speedData\"\n        :layout=\"layout\"\n        :options=\"options\"\n        id=\"speed-plot\"\n      )\n\n  .plot-container(:id=\"`container-${linkLayerId}`\")\n    link-layer.map-area(\n        :viewId=\"linkLayerId\"\n        :colorRampType=\"colorRampType\"\n        :dark=\"isDarkMode\"\n        :projection=\"vizDetails.projection\"\n        :mapIsIndependent=\"vizDetails.mapIsIndependent\"\n        :click=\"handleClick\"\n        :paths=\"selectedPaths\"\n    )\n\n    zoom-buttons.zoom-buttons(v-if=\"!thumbnail\")\n\n    .bottom-panel(v-if=\"!thumbnail\")\n      .status-message(v-if=\"myState.statusMessage\")\n        p {{ myState.statusMessage }}\n\n\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\nimport type { PropType } from 'vue'\nimport { ToggleButton } from 'vue-js-toggle-button'\nimport YAML from 'yaml'\n\nimport globalStore from '@/store'\nimport { MAP_STYLES_OFFLINE, DataType, LookupDataset, UI_FONT, BG_COLOR_DASHBOARD } from '@/Globals'\nimport SelectorPanel from './SelectorPanel.vue'\nimport LinkLayer from './LinkLayer'\nimport HTTPFileSystem from '@/js/HTTPFileSystem'\nimport VuePlotly from '@/components/VuePlotly.vue'\nimport ZoomButtons from '@/components/ZoomButtons.vue'\nimport LegendStore from '@/js/LegendStore'\n\nimport {\n  ColorScheme,\n  FileSystem,\n  FileSystemConfig,\n  VisualizationPlugin,\n  Status,\n  REACT_VIEW_HANDLES,\n} from '@/Globals'\n\nconst MyComponent = defineComponent({\n  name: 'ReliabilityExplorer',\n  components: {\n    SelectorPanel,\n    LinkLayer,\n    ToggleButton,\n    VuePlotly,\n    ZoomButtons,\n  },\n  props: {\n    root: { type: String, required: true },\n    subfolder: { type: String, required: true },\n    yamlConfig: String,\n    config: Object as any,\n    thumbnail: Boolean,\n  },\n  data() {\n    return {\n      apiKey: '',\n      serverRetries: 0,\n      selectedPaths: [] as any[],\n      numTrips: 0,\n      avgSpeed: 0,\n      dayOfWeek: ['is-warning', 'is-warning', 'is-warning', 'is-warning', 'is-warning', '', ''],\n      vehType: ['is-success', '', ''],\n      currentCoord: [] as number[],\n      radius: 0.0002,\n\n      speedData: [] as any[],\n      globalState: globalStore.state,\n      layout: {\n        paper_bgcolor: BG_COLOR_DASHBOARD.dark,\n        plot_bgcolor: BG_COLOR_DASHBOARD.dark,\n        font: { family: UI_FONT, color: '#cccccc' },\n        height: 300,\n        margin: { t: 8, b: 0, l: 0, r: 0, pad: 2 },\n        xaxis: {\n          automargin: true,\n          autorange: true,\n          title: { text: 'Hour', standoff: 12 },\n          animate: true,\n        },\n        yaxis: {\n          automargin: true,\n          autorange: true,\n          title: { text: 'Speed', standoff: 16 },\n          animate: true,\n        },\n        legend: false,\n        // {\n        //   orientation: 'h',\n        //   x: 1,\n        //   y: 1,\n        // },\n      },\n      options: {\n        displaylogo: false,\n        responsive: true,\n        modeBarButtonsToRemove: [\n          'pan2d',\n          'zoom2d',\n          'select2d',\n          'lasso2d',\n          'zoomIn2d',\n          'zoomOut2d',\n          'autoScale2d',\n          'hoverClosestCartesian',\n          'hoverCompareCartesian',\n          'resetScale2d',\n          'toggleSpikelines',\n          'resetViewMapbox',\n        ],\n        toImageButtonOptions: {\n          format: 'png', // one of png, svg, jpeg, webp\n          filename: 'scatter-plot',\n          width: null,\n          height: null,\n        },\n      },\n\n      standaloneYAMLconfig: {\n        title: '',\n        description: '',\n        csvFile: '',\n        csvBase: '',\n        datasets: {} as { [id: string]: string },\n        useSlider: false,\n        showDifferences: false,\n        shpFile: '',\n        dbfFile: '',\n        network: '',\n        geojsonFile: '',\n        projection: '',\n        center: null as any,\n        zoom: 0,\n        widthFactor: null as any,\n        thumbnail: '',\n        sum: false,\n        nodes: '', // SFCTA nodes shapefile\n        links: [] as string[], // SFCTA links DBF files\n        mapIsIndependent: false,\n        display: {\n          color: {} as any,\n          width: {} as any,\n        },\n      },\n\n      YAMLrequirementsLinks: {\n        // csvFile: '',\n        // network: '',\n        // projection: '',\n      },\n\n      // this contains the display settings for this view; it is the View Model.\n      // use changeConfiguration to modify this for now (todo: move to state model)\n      vizDetails: {\n        title: '',\n        description: '',\n        csvFile: '',\n        csvBase: '',\n        datasets: {} as { [id: string]: string },\n        useSlider: false,\n        showDifferences: false,\n        server: '',\n        shpFile: '',\n        dbfFile: '',\n        network: '',\n        geojsonFile: '',\n        projection: '',\n        center: null as any,\n        zoom: 0,\n        widthFactor: null as any,\n        thumbnail: '',\n        sum: false,\n        nodes: '', // SFCTA nodes shapefile\n        links: [] as string[], // SFCTA links DBF files\n        mapIsIndependent: false,\n        display: {\n          color: {} as any,\n          width: {} as any,\n        },\n      },\n\n      currentUIFilterDefinitions: {} as any,\n      isButtonActiveColumn: false,\n      linkLayerId: `linklayer-${Math.floor(1e12 * Math.random())}` as any,\n      scaleWidth: 0,\n      numLinks: 0,\n      showTimeRange: false,\n      legendStore: new LegendStore(),\n      geojsonData: {\n        source: new Float32Array(),\n        dest: new Float32Array(),\n        linkIds: [] as any[],\n        projection: '',\n      },\n      fixedColors: ['#4e79a7'],\n      myState: {\n        statusMessage: '',\n        subfolder: '',\n        yamlConfig: '',\n        thumbnail: false,\n      },\n\n      isDarkMode: this.$store.state.colorScheme === ColorScheme.DarkMode,\n      isDataLoaded: false,\n      thumbnailUrl: \"url('assets/thumbnail.jpg') no-repeat;\",\n\n      resizer: undefined as ResizeObserver | undefined,\n    }\n  },\n  computed: {\n    fileApi(): HTTPFileSystem {\n      return new HTTPFileSystem(this.fileSystem, globalStore)\n    },\n\n    fileSystem(): FileSystemConfig {\n      const svnProject: FileSystemConfig[] = this.$store.state.svnProjects.filter(\n        (a: FileSystemConfig) => a.slug === this.root\n      )\n      if (svnProject.length === 0) {\n        console.log('no such project')\n        throw Error\n      }\n      return svnProject[0]\n    },\n\n    urlThumbnail(): string {\n      return this.thumbnailUrl\n    },\n\n    colorRampType(): any {\n      const rampType = this.vizDetails.display.color?.colorRamp?.style\n      if (rampType === undefined) return -1\n      return rampType\n    },\n  },\n  watch: {\n    '$store.state.viewState'() {\n      if (this.vizDetails.mapIsIndependent) return\n\n      if (!REACT_VIEW_HANDLES[this.linkLayerId]) return\n      REACT_VIEW_HANDLES[this.linkLayerId]()\n    },\n\n    '$store.state.colorScheme'() {\n      setTimeout(\n        () => (this.isDarkMode = this.$store.state.colorScheme === ColorScheme.DarkMode),\n        100\n      )\n    },\n  },\n  methods: {\n    toggleDay(i: number) {\n      this.dayOfWeek[i] = this.dayOfWeek[i] ? '' : 'is-warning'\n      this.dayOfWeek = [...this.dayOfWeek]\n    },\n\n    toggleVehicle(i: number) {\n      // radio buttons - only one selection\n      this.vehType = ['', '', '']\n      this.vehType[i] = 'is-success'\n    },\n\n    setDataIsLoaded() {\n      this.isDataLoaded = true\n    },\n\n    async getVizDetails() {\n      const filename = this.myState.yamlConfig\n\n      const emptyState = {\n        showDifferences: false,\n        datasets: {} as any,\n        display: { color: {} as any, width: {} as any },\n      }\n\n      // are we in a dashboard?\n      if (this.config) {\n        this.vizDetails = Object.assign({}, emptyState, this.config)\n        return\n      }\n\n      // was a YAML file was passed in?\n      if (filename?.endsWith('yaml') || filename?.endsWith('yml')) {\n        await this.loadStandaloneYamlConfig()\n      }\n\n      const t = this.vizDetails.title ? this.vizDetails.title : filename || 'Trip Explorer'\n      this.$emit('title', t)\n    },\n\n    async loadStandaloneYamlConfig() {\n      try {\n        const filename =\n          this.myState.yamlConfig.indexOf('/') > -1\n            ? this.myState.yamlConfig\n            : this.myState.subfolder + '/' + this.myState.yamlConfig\n\n        const text = await this.fileApi.getFileText(filename)\n        this.standaloneYAMLconfig = Object.assign({}, YAML.parse(text))\n        this.setVizDetails()\n      } catch (err) {\n        console.error('failed', '' + err)\n      }\n    },\n\n    setVizDetails() {\n      this.vizDetails = Object.assign({}, this.vizDetails, this.standaloneYAMLconfig)\n    },\n\n    async fetchWithAuthorization(url: string) {\n      console.log('fetchTrips', this.serverRetries)\n      const trips = (await fetch(url, {\n        headers: { Authorization: this.apiKey, 'Access-Control-Allow-Origin': '*' },\n      }).then(async response => {\n        console.log(1, { response })\n        if (response.status == 200) {\n          console.log(200)\n          this.serverRetries = 0\n          return response.json()\n        }\n        if (response.status == 403) {\n          console.log(403)\n          // try again\n          this.serverRetries += 1\n          this.forceApiAuthorization()\n          return await this.fetchWithAuthorization(url)\n        } else if (this.serverRetries < 5) {\n          // wait 2 seconds and retry\n          this.serverRetries += 1\n          this.myState.statusMessage = `Contacting server... (${this.serverRetries})`\n          await new Promise(r => setTimeout(r, 2000))\n          return await this.fetchWithAuthorization(url)\n        }\n        throw Error('API ERROR: ' + response.statusText)\n      })) as any[]\n\n      return trips\n    },\n\n    async handleClick(event: any) {\n      console.log('GOT YOU:', event)\n      if (event.coordinate) {\n        await this.clickedCoordinate(event.coordinate)\n        await this.runStatisticsForCoord(event.coordinate)\n      }\n    },\n\n    async runStatisticsForCoord(coord: number[]) {\n      this.currentCoord = coord\n      console.log('number of PATHS:', this.selectedPaths)\n      const lonLo = coord[0] - this.radius\n      const lonHi = coord[0] + this.radius\n      const latLo = coord[1] - this.radius\n      const latHi = coord[1] + this.radius\n\n      const data = { time: [], speeds: [] } as any\n\n      for (const selectedPath of this.selectedPaths) {\n        const path = selectedPath.path\n        console.log('  number of POINTS:', path.length)\n\n        let lastSelectedPointIndex = 0\n        for (let i = 0; i < path.length; i++) {\n          const p = path[i]\n          if (p[0] >= lonLo && p[0] <= lonHi && p[1] >= latLo && p[1] <= latHi) {\n            lastSelectedPointIndex = i\n          }\n        }\n        console.log('  i:', lastSelectedPointIndex)\n\n        // might be at end of array, don't panic\n        try {\n          const speed = selectedPath.speeds[lastSelectedPointIndex]\n          const startTime = parseInt(selectedPath.startTime.substring(0, 2))\n          if (speed == 0) continue\n\n          data.time.push(startTime)\n          data.speeds.push(speed)\n        } catch (e) {\n          console.warn('bad index')\n          // ignore for now\n        }\n\n        // calc average\n        const sum = data.speeds.reduce((a: number, b: number) => a + b)\n        const avgSpeed = sum / data.speeds.length\n        this.avgSpeed = avgSpeed\n      }\n      console.log(data)\n\n      this.speedData = [\n        {\n          x: data.time,\n          y: data.speeds,\n          name: 'Speed by Hour',\n          mode: 'markers',\n          type: 'scatter',\n          textinfo: 'label+percent',\n          textposition: 'inside',\n          automargin: true,\n          showlegend: false,\n          marker: { size: 3, color: '#ff4' },\n        },\n      ]\n    },\n\n    async clickedCoordinate(coord: number[]) {\n      const [lon, lat] = coord\n      console.log({ lon, lat })\n\n      const server = this.vizDetails.server\n\n      // GET TRIP LIST\n      const url = `${server}/location?lon=${lon}&lat=${lat}&radius=0.0002`\n      console.log(url)\n      const trips = await this.fetchWithAuthorization(url)\n      // console.log({ trips })\n\n      if (!trips.length) {\n        this.selectedPaths = []\n        this.numTrips = 0\n        return\n      }\n\n      // BUILD PATHS\n      const selectedPaths = [] as any[]\n\n      // GET FULL PATHS FOR SELECTED TRIPS\n      this.numTrips = trips.length\n\n      // only fetch 800 at a time due to URL length limits\n      const chunk = 807\n\n      let i = 0\n      while (i < this.numTrips) {\n        console.log('loading', i)\n        const tripIDs = trips\n          .slice(i, i + chunk)\n          .map((trip: any) => trip.TripID)\n          .join(',')\n        const pathUrl = `${server}/path?trip=${tripIDs}`\n        console.log('path length:', pathUrl.length)\n        const paths = await this.fetchWithAuthorization(pathUrl)\n\n        for (const trip of paths) {\n          const snappedPath = trip.Path1\n          const coords = snappedPath\n            .split(',')\n            .map((point: string) => point.split(' ').map(p => parseFloat(p)))\n\n          const speeds = trip.Speed_path.split(',').map((speed: any) => parseFloat(speed))\n\n          selectedPaths.push({ path: coords, speeds, startTime: trip.start_time })\n        }\n        this.selectedPaths = [...selectedPaths]\n        await this.$nextTick()\n        i += chunk\n      }\n    },\n\n    setMapCenterFromVizDetails() {\n      if (typeof this.vizDetails.center == 'string') {\n        this.vizDetails.center = this.vizDetails.center.split(',').map(Number)\n      }\n\n      if (!this.vizDetails.zoom) {\n        this.vizDetails.zoom = 9\n      }\n\n      this.$store.commit('setMapCamera', {\n        longitude: this.vizDetails.center[0],\n        latitude: this.vizDetails.center[1],\n        bearing: 0,\n        pitch: 0,\n        zoom: this.vizDetails.zoom,\n        jump: false,\n      })\n\n      const view = {\n        longitude: this.vizDetails.center[0],\n        latitude: this.vizDetails.center[1],\n        bearing: 0,\n        pitch: 0,\n        zoom: this.vizDetails.zoom || 10, // use 10 default if we don't have a zoom\n        jump: false, // move the map no matter what\n      }\n\n      // bounce our map\n      if (REACT_VIEW_HANDLES[this.linkLayerId]) {\n        REACT_VIEW_HANDLES[this.linkLayerId](view)\n      }\n    },\n\n    async setMapCenter() {\n      if (this.vizDetails.center) return this.setMapCenterFromVizDetails()\n\n      const data = this.geojsonData\n\n      if (!data.source.length) return\n\n      let samples = 0\n      let longitude = 0\n      let latitude = 0\n\n      // figure out the center\n      if (this.geojsonData.projection !== 'Atlantis') {\n        const numLinks = data.source.length / 2\n        const gap = numLinks < 4096 ? 2 : 1024\n        for (let i = 0; i < numLinks; i += gap) {\n          longitude += data.source[i * 2]\n          latitude += data.source[i * 2 + 1]\n          samples++\n        }\n        longitude = longitude / samples\n        latitude = latitude / samples\n      }\n      console.log('center', longitude, latitude)\n\n      this.$store.commit('setMapCamera', {\n        longitude,\n        latitude,\n        bearing: 0,\n        pitch: 0,\n        zoom: 8,\n        jump: false,\n      })\n    },\n\n    setupLogoMover() {\n      this.resizer = new ResizeObserver(this.moveLogo)\n      const deckmap = document.getElementById(`container-${this.linkLayerId}`) as HTMLElement\n      this.resizer.observe(deckmap)\n    },\n\n    moveLogo() {\n      const deckmap = document.getElementById(`container-${this.linkLayerId}`) as HTMLElement\n      const logo = deckmap?.querySelector('.mapboxgl-ctrl-bottom-left') as HTMLElement\n      if (logo) {\n        const right = deckmap.clientWidth > 640 ? '280px' : '36px'\n        logo.style.right = right\n      }\n    },\n\n    async updateStatus(message: string) {\n      this.myState.statusMessage = message\n    },\n\n    getApiAuthorization() {\n      console.log('GETAPI')\n      let auth = localStorage.getItem('imove-api-key')\n      if (!auth) auth = prompt('API access key required:')\n\n      if (auth) {\n        this.apiKey = auth\n        localStorage.setItem('imove-api-key', auth)\n      }\n    },\n\n    forceApiAuthorization() {\n      localStorage.removeItem('imove-api-key')\n      this.getApiAuthorization()\n    },\n\n    async wakeUpServer() {\n      // this is a throwaway fetch that simply wakes up the API server when we load the site\n      try {\n        fetch(this.vizDetails.server)\n      } catch (e) {\n        // ignore\n      }\n    },\n  },\n\n  async mounted() {\n    this.$store.commit('setFullScreen', !this.thumbnail)\n\n    this.myState.thumbnail = this.thumbnail\n    this.myState.yamlConfig = this.yamlConfig ?? ''\n    this.myState.subfolder = this.subfolder\n\n    await this.getVizDetails()\n\n    this.wakeUpServer()\n\n    this.setupLogoMover()\n    console.log('ok')\n  },\n\n  beforeDestroy() {\n    // MUST delete the React view handle to prevent gigantic memory leak!\n    delete REACT_VIEW_HANDLES[this.linkLayerId]\n    this.$store.commit('setFullScreen', false)\n  },\n})\n\nexport default MyComponent\n</script>\n\n<style scoped lang=\"scss\">\n@import '@/styles.scss';\n\n.link-volume-plot {\n  min-height: $thumbnailHeight;\n  display: flex;\n  flex-direction: row-reverse;\n  height: 100%;\n}\n\n.link-volume-plot.hide-thumbnail {\n  background: var(--bgMapPanel);\n}\n\n.plot-container {\n  display: grid;\n  grid-template-columns: auto 1fr;\n  grid-template-rows: 1fr auto auto;\n  pointer-events: auto;\n  flex: 1;\n  position: relative;\n}\n\n.map-area {\n  pointer-events: auto;\n}\n\n.details-panel {\n  width: 22rem;\n  // background-color: #373641;\n  background: linear-gradient(35deg, #034a71, #2c5241);\n  background: linear-gradient(35deg, #2c5241, #034a71);\n  padding: 0.5rem 1rem;\n  color: #eee;\n  // border-left: 1px solid #557;\n  display: flex;\n  flex-direction: column;\n}\n.top-panel {\n  pointer-events: auto;\n  grid-column: 1 / 2;\n  grid-row: 1 / 2;\n  background-color: var(--bgPanel);\n  margin: 0 auto auto 0;\n  padding: 0.5rem 1.5rem 1rem 1.5rem;\n  z-index: 5;\n  box-shadow: 0px 2px 10px #22222244;\n}\n\n.bottom-panel {\n  grid-column: 1 / 3;\n  grid-row: 2 / 3;\n  display: flex;\n  flex-direction: column;\n  font-size: 0.8rem;\n  pointer-events: auto;\n  margin: auto 0.5rem 2px 7px;\n  filter: drop-shadow(0px 2px 4px #22222233);\n}\n\n.status-message {\n  margin: 0 0 0.5rem 0;\n  padding: 0.5rem 0.5rem;\n  color: var(--textFancy);\n  background-color: var(--bgPanel);\n  font-size: 1.2rem;\n  line-height: 1.5rem;\n}\n\n.right-side {\n  z-index: 1;\n  display: flex;\n  flex-direction: row;\n  margin: 0 0 auto 0;\n}\n\n.panel-items {\n  display: flex;\n  flex-direction: column;\n  padding: 0.5rem 0.5rem;\n  margin-bottom: 5px;\n  width: 16rem;\n  background-color: var(--bgPanel);\n  border-radius: 3px;\n  overflow: visible;\n  // overflow-x: hidden;\n}\n\nh3 {\n  line-height: 1.7rem;\n  margin-top: 1rem;\n}\n\ninput {\n  border: none;\n  background-color: var(--bgCream2);\n  color: var(--bgDark);\n}\n\n.toggle {\n  margin: 0.25rem 0.5rem 0.25rem 0;\n}\n\n#dropdown-menu-color-selector {\n  background-color: var(--bgBold);\n\n  p {\n    color: #888;\n  }\n}\n\n.panel-item {\n  margin-top: 0rem;\n}\n\n.config-section {\n  flex: 1;\n}\n\n.diff-section {\n  display: flex;\n  flex-direction: row;\n  margin-top: 0.7rem;\n\n  p {\n    margin: auto 0;\n  }\n}\n\n.filter-panel {\n  height: 6rem;\n  background-color: var(--bgPanel);\n  margin: 0rem auto 5px 0px;\n  border-radius: 3px;\n  // width: 100%;\n}\n\n.statistics {\n  flex: 1;\n}\n\n.reliability {\n  flex: 1;\n  margin-bottom: 1rem;\n}\n\n.myplot {\n  margin-top: 0.5rem;\n}\n</style>\n"],"names":["_sfc_main$1","defineComponent","useIt","result","i18n","_sfc_main","TimeSlider","f","DataType","value","colors","column","debounce","Component","viewId","links","colorRampType","dark","projection","scaleWidth","mapIsIndependent","click","paths","viewState","setViewState","useState","globalStore","REACT_VIEW_HANDLES","view","handleClick","event","handleViewState","getTooltip","object","index","coordinateSystem","COORDINATE_SYSTEM","layer","PathOffsetLayer","d","OFFSET_DIRECTION","React","DeckGL","isDragging","isHovering","e","StaticMap","MAPBOX_TOKEN","MyComponent","SelectorPanel","LinkLayer","ToggleButton","VuePlotly","ZoomButtons","BG_COLOR_DASHBOARD","UI_FONT","LegendStore","ColorScheme","HTTPFileSystem","svnProject","a","rampType","_b","_a","i","filename","emptyState","t","text","YAML","err","url","response","r","coord","lonLo","lonHi","latLo","latHi","data","selectedPath","path","lastSelectedPointIndex","p","speed","startTime","avgSpeed","b","lon","lat","server","trips","selectedPaths","chunk","tripIDs","trip","pathUrl","coords","point","speeds","samples","longitude","latitude","numLinks","gap","deckmap","logo","right","message","auth"],"mappings":"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"}