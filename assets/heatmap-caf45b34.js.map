{"version":3,"file":"heatmap-caf45b34.js","sources":["../../src/dash-panels/heatmap.vue"],"sourcesContent":["<template lang=\"pug\">\nVuePlotly.myplot(\n  :data=\"data\"\n  :layout=\"layout\"\n  :options=\"options\"\n  :id=\"id\"\n)\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\nimport type { PropType } from 'vue'\nimport { transpose } from 'mathjs'\n\nimport VuePlotly from '@/components/VuePlotly.vue'\nimport DashboardDataManager, { FilterDefinition } from '@/js/DashboardDataManager'\nimport { DataTable, FileSystemConfig, BG_COLOR_DASHBOARD, UI_FONT, Status } from '@/Globals'\nimport globalStore from '@/store'\nimport { buildCleanTitle } from './_allPanels'\n\nexport default defineComponent({\n  name: 'HeatmapPanel',\n  components: { VuePlotly },\n  props: {\n    fileSystemConfig: { type: Object as PropType<FileSystemConfig>, required: true },\n    subfolder: { type: String, required: true },\n    files: { type: Array, required: true },\n    config: { type: Object as any, required: true },\n    cardTitle: { type: String, required: true },\n    cardId: String,\n    datamanager: { type: Object as PropType<DashboardDataManager>, required: true },\n    zoomed: Boolean,\n  },\n  data: () => {\n    return {\n      globalState: globalStore.state,\n      // dataSet is either x,y or allRows[]\n      dataSet: {} as { x?: any[]; y?: any[]; allRows?: DataTable },\n      id: ('heatmap-' + Math.floor(1e12 * Math.random())) as any,\n      YAMLrequirementsHeatmap: { dataset: '', y: '', columns: [] },\n      layout: {\n        margin: { t: 8, b: 50 },\n        font: {\n          color: '#444444',\n          family: UI_FONT,\n        },\n        barmode: '',\n        bargap: 0.08,\n        xaxis: {\n          autorange: true,\n          title: '',\n        },\n        yaxis: {\n          autorange: true,\n          title: '',\n        },\n        legend: {\n          x: 1,\n          xanchor: 'right',\n          y: 1,\n        },\n      } as any,\n      data: [] as any[],\n      options: {\n        displaylogo: false,\n        responsive: true,\n        modeBarButtonsToRemove: [\n          'pan2d',\n          'zoom2d',\n          'select2d',\n          'lasso2d',\n          'zoomIn2d',\n          'zoomOut2d',\n          'autoScale2d',\n          'hoverClosestCartesian',\n          'hoverCompareCartesian',\n          'resetScale2d',\n          'toggleSpikelines',\n          'resetViewMapbox',\n        ],\n        toImageButtonOptions: {\n          format: 'png', // one of png, svg, jpeg, webp\n          filename: 'heatmap',\n          width: 1200,\n          height: 800,\n          scale: 1.0, // Multiply title/legend/axis/canvas sizes by this factor\n        },\n      },\n    }\n  },\n  async mounted() {\n    this.updateTheme()\n    this.checkWarningsAndErrors()\n    this.dataSet = await this.loadData()\n\n    if (Object.keys(this.dataSet).length) {\n      this.updateChart()\n      this.options.toImageButtonOptions.filename = buildCleanTitle(this.cardTitle, this.subfolder)\n      this.$emit('dimension-resizer', { id: this.cardId, resizer: this.changeDimensions })\n    }\n    this.$emit('isLoaded')\n  },\n  beforeDestroy() {\n    this.datamanager?.removeFilterListener(this.config, this.handleFilterChanged)\n  },\n\n  watch: {\n    zoomed() {\n      this.resizePlot()\n    },\n    'globalState.isDarkMode'() {\n      this.updateTheme()\n    },\n  },\n  methods: {\n    changeDimensions(dimensions: { width: number; height: number }) {\n      this.layout = Object.assign({}, this.layout, dimensions)\n    },\n\n    resizePlot() {\n      var elements = document.getElementsByClassName('spinner-box')\n      if (this.zoomed) {\n        for (let element of elements) {\n          if (element.clientHeight > 0) {\n            this.layout.height = element.clientHeight\n          }\n        }\n      } else {\n        this.layout.height = 300\n      }\n    },\n\n    updateTheme() {\n      const colors = {\n        paper_bgcolor: BG_COLOR_DASHBOARD[this.globalState.colorScheme],\n        plot_bgcolor: BG_COLOR_DASHBOARD[this.globalState.colorScheme],\n        font: { color: this.globalState.isDarkMode ? '#cccccc' : '#444444' },\n      }\n      this.layout = Object.assign({}, this.layout, colors)\n    },\n\n    handleFilterChanged() {\n      if (!this.datamanager) return\n\n      const { filteredRows } = this.datamanager.getFilteredDataset(this.config) as any\n\n      if (!filteredRows || !filteredRows.length) {\n        this.dataSet = { allRows: {} }\n      } else {\n        const allRows = {} as any\n\n        const keys = Object.keys(filteredRows[0])\n        keys.forEach(key => (allRows[key] = { name: key, values: [] as any }))\n\n        filteredRows.forEach((row: any) => {\n          keys.forEach(key => allRows[key].values.push(row[key]))\n        })\n        this.dataSet = { allRows }\n      }\n\n      this.updateChart()\n    },\n\n    async loadData() {\n      try {\n        this.validateYAML()\n        let dataset = await this.datamanager.getDataset(this.config)\n\n        // no filter? we are done\n        if (!this.config.filters) return dataset\n\n        // filter data before returning:\n        this.datamanager.addFilterListener(this.config, this.handleFilterChanged)\n\n        for (const [column, value] of Object.entries(this.config.filters)) {\n          const filter: FilterDefinition = {\n            dataset: this.config.dataset,\n            column: column,\n            value: value,\n            range: Array.isArray(value),\n          }\n          this.datamanager.setFilter(filter)\n        }\n        // empty for now; filtered data will come back later via handleFilterChanged async.\n        return { allRows: {} }\n      } catch (e) {\n        console.error('' + e)\n      }\n      return { allRows: {} }\n    },\n\n    validateYAML() {\n      for (const key in this.YAMLrequirementsHeatmap) {\n        if (key in this.config === false) {\n          this.$emit('error', {\n            type: Status.ERROR,\n            msg: `YAML file missing required key: ${key}`,\n            desc: 'Check this.YAMLrequirementsXY for required keys',\n          })\n        }\n      }\n    },\n\n    updateChart() {\n      this.layout.xaxis.title = this.config.xAxisTitle || this.config.xAxisName || ''\n      this.layout.yaxis.title = this.config.yAxisTitle || this.config.yAxisName || ''\n\n      try {\n        if (this.config.groupBy) this.updateChartWithGroupBy()\n        else this.updateChartSimple()\n      } catch (e) {\n        const msg = '' + e\n        this.$emit('error', {\n          type: Status.ERROR,\n          msg,\n          desc: 'Add a desription...',\n        })\n      }\n    },\n\n    updateChartWithGroupBy() {\n      // tba\n    },\n\n    updateChartSimple() {\n      var xaxis: any[] = []\n      var matrix: any[] = []\n\n      const allRows = this.dataSet.allRows || ({} as any)\n\n      const columns = this.config.columns || this.config.usedCol || []\n      if (!columns.length) return\n\n      // check for valid columns\n      let status = true\n      const check = ['y']\n      for (const col of check) {\n        if (!allRows[this.config[col]]) {\n          this.$store.commit(\n            'error',\n            `${this.cardTitle}: \"${this.config.dataset}\" ${check} column \"${col}\" missing`\n          )\n          status = false\n        }\n      }\n      if (!status) return\n\n      // Reads all the data of the y-axis.\n      let yaxis = allRows[this.config.y].values\n\n      // Reads all the data of the x-axis.\n      for (const key of Object.keys(allRows)) {\n        if (columns.includes(key)) {\n          xaxis.push(key)\n        }\n      }\n\n      // Converts all data to the matrix format of the heatmap\n      let i = 0\n      for (const column of this.config.columns) {\n        matrix[i++] = allRows[column].values\n      }\n\n      if (!this.config.flipAxes) matrix = transpose(matrix)\n\n      // Pushes the data into the chart\n      this.data = [\n        {\n          x: this.config.flipAxes ? yaxis : xaxis,\n          y: this.config.flipAxes ? xaxis : yaxis,\n          z: matrix,\n          colorscale: 'Viridis', // 'YlOrRed', // 'Hot',\n          type: 'heatmap',\n          automargin: true,\n        },\n      ]\n    },\n\n    // Check this plot for warnings and errors\n    checkWarningsAndErrors() {\n      var plotTitle = this.cardTitle\n      // warnings\n      // missing title\n      if (plotTitle.length == 0) {\n        this.$emit('error', {\n          type: Status.WARNING,\n          msg: `The plot title is missing!`,\n          desc: \"Please add a plot title in the .yaml-file (title: 'Example title')\",\n        })\n      }\n      // errors\n    },\n  },\n})\n</script>\n\n<style scoped lang=\"scss\">\n@import '@/styles.scss';\n\n.myplot {\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n}\n</style>\n"],"names":["_sfc_main","defineComponent","VuePlotly","globalStore","UI_FONT","buildCleanTitle","_a","dimensions","elements","element","colors","BG_COLOR_DASHBOARD","filteredRows","allRows","keys","key","row","dataset","column","value","filter","e","Status","msg","xaxis","matrix","columns","status","check","col","yaxis","i","transpose","plotTitle"],"mappings":"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"}