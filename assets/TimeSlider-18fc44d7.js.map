{"version":3,"file":"TimeSlider-18fc44d7.js","sources":["../../src/components/TimeSlider.vue"],"sourcesContent":["<template lang=\"pug\">\n.time-slider-component(v-if=\"hasNonZeroTimeRange\" :id=\"`id-${id}`\")\n  .label-area\n    p.p1 {{ state.labels[0] }}\n    p.p2(v-show=\"state.labels[1] !== undefined\") &nbsp;-&nbsp;{{ state.labels[1] }}\n\n  .slider-area\n    button.button.play-button(size=\"is-small\" type=\"is-link\"\n      @click=\"$emit('toggleAnimation')\"\n      ) {{ isAnimating ? '|&nbsp;|' : '>' }}\n\n    .time-slider-dragger(ref=\"slider\" @mousemove=\"dragging\")\n      .active-region(:style=\"calculateActiveMargins\"\n        @mousedown=\"dragStart\" @mouseup.stop=\"dragEnd\" @mousemove.stop=\"dragging\"\n      )\n\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\nimport type { PropType } from 'vue'\n\nconst GRAB_HANDLE_WIDTH = 6\n\nenum DRAGTYPE {\n  SLIDE,\n  START,\n  END,\n}\n\nexport default defineComponent({\n  name: 'TimeSlider',\n  props: {\n    labels: Array as PropType<string[]>,\n    range: Array as PropType<number[]>,\n    activeTimeExtent: Array as PropType<number[]>,\n    isAnimating: Boolean,\n  },\n  data: () => {\n    return {\n      state: {\n        componentWidth: 0,\n        dragStartX: 0,\n        dragType: DRAGTYPE.SLIDE,\n        isDragging: false,\n        isSetupComplete: false,\n        // always 0.0-1.0 :\n        leftPosition: 0,\n        rightPosition: 1,\n        // the datasetRange is the extent of the time values in the dataset, e.g. 0-86400\n        datasetRange: [0, 86400],\n        labels: ['', ''],\n      },\n      id: 'id-' + Math.floor(1e12 * Math.random()),\n      resizer: null as ResizeObserver | null,\n    }\n  },\n  computed: {\n    fullDatasetTimeSpan(): number {\n      return this.state.datasetRange[1] - this.state.datasetRange[0]\n    },\n\n    extentLeftToRight(): number {\n      return this.state.rightPosition - this.state.leftPosition\n    },\n\n    hasNonZeroTimeRange(): boolean {\n      // return false if the start and finish of the range are identical\n      return !!this.fullDatasetTimeSpan\n    },\n    calculateActiveMargins(): any {\n      const usableWidth = this.state.componentWidth - 2 * GRAB_HANDLE_WIDTH\n      const marginLeft = Math.floor(usableWidth * this.state.leftPosition)\n      const marginRight = Math.floor(usableWidth * (1.0 - this.state.rightPosition))\n\n      // console.log({ usableWidth, marginLeft, marginRight })\n\n      return {\n        marginLeft: `${marginLeft}px`,\n        marginRight: `${marginRight}px`,\n      }\n    },\n  },\n  mounted() {\n    this.getDimensions()\n    this.setupInitialValues()\n    this.setupResizer()\n\n    window.addEventListener('mouseup', this.dragEnd)\n    window.addEventListener('mousemove', this.dragging)\n  },\n\n  beforeDestroy() {\n    window.removeEventListener('mouseup', this.dragEnd)\n    window.removeEventListener('mousemove', this.dragging)\n  },\n  watch: {\n    activeTimeExtent() {\n      this.updateExtent()\n    },\n    labels() {\n      this.updateLabels()\n    },\n    'state.leftPosition'() {\n      this.emitValues()\n    },\n    'state.rightPosition'() {\n      this.emitValues()\n    },\n  },\n\n  methods: {\n    setupResizer() {\n      try {\n        this.resizer = new ResizeObserver(this.getDimensions)\n        const sliderElement = document.getElementById(`id-${this.id}`) as HTMLElement\n        this.resizer.observe(sliderElement)\n      } catch (e) {\n        console.error('' + e)\n      }\n    },\n\n    setupInitialValues() {\n      try {\n        if (this.range) this.state.datasetRange = this.range\n\n        if (this.fullDatasetTimeSpan === 0) {\n          this.state.leftPosition = 0\n          this.state.rightPosition = 1\n        } else {\n          this.updateExtent()\n        }\n      } catch (e) {\n        console.error('' + e)\n        // divide by zero, oh well\n      } finally {\n        this.state.isSetupComplete = true\n      }\n    },\n\n    updateExtent() {\n      if (!this.activeTimeExtent) return\n\n      this.state.leftPosition =\n        (this.activeTimeExtent[0] - this.state.datasetRange[0]) / this.fullDatasetTimeSpan\n      this.state.rightPosition =\n        (this.activeTimeExtent[1] - this.state.datasetRange[0]) / this.fullDatasetTimeSpan\n    },\n\n    updateLabels() {\n      if (this.labels) this.state.labels = this.labels\n    },\n\n    emitValues() {\n      if (!this.state.isSetupComplete) return\n\n      const start = this.state.datasetRange[0] + this.state.leftPosition * this.fullDatasetTimeSpan\n      const end = this.state.datasetRange[0] + this.state.rightPosition * this.fullDatasetTimeSpan\n      this.$emit('timeExtent', [start, end])\n    },\n\n    getDimensions() {\n      //@ts-ignore - ref doesn't know about clientWidth\n      this.state.componentWidth = this.$refs.slider?.clientWidth || 0\n    },\n\n    dragStart(e: MouseEvent) {\n      this.$emit('drag')\n      this.state.isDragging = true\n      this.state.dragStartX = e.clientX\n\n      const usableWidth = this.state.componentWidth - 2 * GRAB_HANDLE_WIDTH\n      const marginLeft = Math.floor(usableWidth * this.state.leftPosition)\n      const marginRight = Math.floor(usableWidth * (1.0 - this.state.rightPosition))\n\n      const durationWidth =\n        this.state.componentWidth - marginRight - marginLeft - 2 * GRAB_HANDLE_WIDTH\n\n      // console.log({ usableWidth, durationWidth, marginLeft, marginRight })\n\n      if (e.offsetX >= 0 && e.offsetX < durationWidth) this.state.dragType = DRAGTYPE.SLIDE\n      else if (e.offsetX < 0) this.state.dragType = DRAGTYPE.START\n      else if (e.offsetX > durationWidth) this.state.dragType = DRAGTYPE.END\n    },\n\n    dragging(e: MouseEvent) {\n      if (!this.state.isDragging) return\n\n      const deltaX = e.clientX - this.state.dragStartX\n      const usableWidth = this.state.componentWidth - 2 * GRAB_HANDLE_WIDTH\n\n      // are we moving the time duration window\n      if (DRAGTYPE.SLIDE == this.state.dragType) {\n        const currentExtent = this.extentLeftToRight\n        let newLeft = (usableWidth * this.state.leftPosition + deltaX) / usableWidth\n        let newRight = newLeft + currentExtent\n\n        // don't scroll past the left edge\n        if (newLeft < 0) {\n          newLeft = 0\n          newRight = currentExtent\n        }\n\n        // don't scroll past the right edge\n        if (newRight > 1) {\n          newRight = 1\n          newLeft = newRight - currentExtent\n        }\n\n        this.state.leftPosition = newLeft\n        this.state.rightPosition = newRight\n\n        this.state.dragStartX = e.clientX\n        return\n      }\n\n      // are we moving the start-time\n      if (DRAGTYPE.START == this.state.dragType) {\n        const newLeft = usableWidth * this.state.leftPosition + deltaX\n        this.state.leftPosition = Math.max(0, newLeft / usableWidth)\n        if (this.state.leftPosition > this.state.rightPosition) {\n          this.state.rightPosition = this.state.leftPosition\n        }\n        this.state.dragStartX = e.clientX\n        return\n      }\n\n      // are we moving the end-time\n      if (DRAGTYPE.END == this.state.dragType) {\n        const newRight = usableWidth * this.state.rightPosition + deltaX\n        this.state.rightPosition = Math.min(1, newRight / usableWidth)\n        if (this.state.leftPosition > this.state.rightPosition) {\n          this.state.leftPosition = this.state.rightPosition\n        }\n        this.state.dragStartX = e.clientX\n        return\n      }\n    },\n\n    dragEnd(e: any) {\n      this.state.isDragging = false\n    },\n  },\n})\n</script>\n\n<style scoped lang=\"scss\">\n@import '@/styles.scss';\n\n.time-slider-component {\n  display: flex;\n  flex-direction: column;\n}\n\n.slider-area {\n  background-color: var(--bgPanel);\n  padding: 1rem 1rem;\n  display: flex;\n  flex-direction: row;\n}\n\n.time-slider-dragger {\n  user-select: none;\n  height: 1.5rem;\n  background-color: #66669933;\n  border-radius: 4px;\n  max-width: 100%;\n  flex: 1;\n  overflow: hidden;\n}\n\n.active-region {\n  cursor: ew-resize;\n  color: white;\n  background-color: var(--sliderThumb);\n  height: 100%;\n  border-radius: 4px;\n  border-left: 6px solid var(--linkHover);\n  border-right: 6px solid var(--linkHover);\n  font-size: 1rem;\n  line-height: 0.6rem;\n}\n\n.label-area {\n  margin: 0 0;\n  font-size: 1.3rem;\n  font-weight: bold;\n  display: flex;\n  flex-direction: row;\n  margin-right: auto;\n}\n\n.p1 {\n  padding: 0 0;\n  padding-left: 1rem;\n  background-color: var(--bgPanel);\n}\n\n.p2 {\n  padding: 0 0;\n  padding-right: 1rem;\n  background-color: var(--bgPanel);\n}\n\n.play-button {\n  width: 2.4rem;\n  height: 1.5rem;\n  margin-right: 1rem;\n  font-weight: bold;\n  font-size: 0.8rem;\n  line-height: 0.8rem;\n  padding: 0 0;\n}\n</style>\n"],"names":["GRAB_HANDLE_WIDTH","_sfc_main","defineComponent","usableWidth","marginLeft","marginRight","sliderElement","start","end","_a","durationWidth","deltaX","currentExtent","newLeft","newRight"],"mappings":"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"}