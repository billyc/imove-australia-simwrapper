{"version":3,"file":"moving-icons-vehicles-layer-f632c5f5.js","sources":["../../src/layers/moving-icons/moving-icons-vehicles-layer.ts"],"sourcesContent":["// BC 2021-04-30: this file forked from https://github.com/visgl/deck.gl\n//\n// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport { Layer, project32, picking, log } from '@deck.gl/core'\nimport GL from '@luma.gl/constants'\nimport { Model, Geometry } from '@luma.gl/core'\n\nimport vertShader from './icon-layer.glsl.vert?raw'\nimport fragShader from './icon-layer.glsl.frag?raw'\n\nimport IconManager from './icon-manager'\n\nconst DEFAULT_COLOR = [0, 0, 0, 255]\n\nconst defaultProps = {\n  iconAtlas: { type: 'image', value: null, async: true },\n  iconMapping: { type: 'object', value: {}, async: true },\n  sizeScale: { type: 'number', value: 1, min: 0 },\n  billboard: false,\n  sizeUnits: 'pixels',\n  sizeMinPixels: { type: 'number', min: 0, value: 0 }, //  min point radius in pixels\n  sizeMaxPixels: { type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER }, // max point radius in pixels\n  alphaCutoff: { type: 'number', value: 0.05, min: 0, max: 1 },\n  iconStill: { type: 'object', value: null },\n\n  getIcon: { type: 'accessor', value: 'vehicle' }, // (x: any) => x.icon },\n  getBOffsets: { type: 'accessor', value: [0, 0] }, // (x: any) => x.icon },\n  getBIconFrames: { type: 'accessor', value: [128, 128, 128, 128] }, // (x: any) => x.icon },\n  getBColorModes: { type: 'accessor', value: 1 }, // (x: any) => x.icon },\n\n  getColor: { type: 'accessor', value: DEFAULT_COLOR },\n  getSize: { type: 'accessor', value: 1 },\n  getAngle: { type: 'accessor', value: 0 },\n  getPixelOffset: { type: 'accessor', value: [0, 0] },\n\n  getPathStart: { type: 'accessor', value: null },\n  getPathEnd: { type: 'accessor', value: null },\n  getTimeStart: { type: 'accessor', value: null },\n  getTimeEnd: { type: 'accessor', value: null },\n  currentTime: { type: 'number', value: 0 },\n\n  pickable: { type: 'boolean', value: true },\n  onIconError: { type: 'function', value: null, compare: false, optional: true },\n}\n\nexport default class IconLayer extends Layer {\n  getShaders() {\n    return super.getShaders({ vs: vertShader, fs: fragShader, modules: [project32, picking] })\n  }\n\n  initializeState() {\n    this.state = {\n      iconManager: new IconManager(this.context.gl, {\n        onUpdate: this._onUpdate.bind(this),\n        onError: this._onError.bind(this) as any,\n      }),\n    }\n\n    const attributeManager = this.getAttributeManager()\n\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instanceTimestamps: {\n        size: 1,\n        accessor: 'getTimeStart',\n      },\n      instanceTimestampsNext: {\n        size: 1,\n        accessor: 'getTimeEnd',\n      },\n      instanceStartPositions: {\n        size: 2,\n        accessor: 'getPathStart',\n      },\n      instanceEndPositions: {\n        size: 2,\n        accessor: 'getPathEnd',\n      },\n      instanceSizes: {\n        size: 1,\n        transition: true,\n        accessor: 'getSize',\n        defaultValue: 1,\n      },\n      instanceOffsets: {\n        size: 2,\n        defaultValue: [0, 0],\n        accessor: 'getBOffsets',\n        // transform: this.getInstanceOffset\n      },\n      instanceIconFrames: {\n        size: 4,\n        defaultValue: [0, 0, 128, 128],\n        accessor: 'getBIconFrames',\n        // transform: this.getInstanceIconFrame\n      },\n      instanceColorModes: {\n        size: 1,\n        type: GL.UNSIGNED_BYTE,\n        defaultValue: 1,\n        accessor: 'getBColorModes',\n        // accessor: 'getIcon',\n        // transform: this.getInstanceColorMode,\n      },\n\n      // instanceOffsets: { size: 2, accessor: 'getIcon', transform: this.getInstanceOffset },\n      // instanceIconFrames: { size: 4, accessor: 'getIcon', transform: this.getInstanceIconFrame },\n      // instanceColorModes: {\n      //   size: 1,\n      //   type: GL.UNSIGNED_BYTE,\n      //   accessor: 'getIcon',\n      //   transform: this.getInstanceColorMode,\n      // },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getColor',\n        defaultValue: DEFAULT_COLOR,\n      },\n      instanceAngles: {\n        size: 1,\n        transition: true,\n        accessor: 'getAngle',\n      },\n      instancePixelOffset: {\n        size: 2,\n        transition: true,\n        accessor: 'getPixelOffset',\n      },\n    })\n    /* eslint-enable max-len */\n  }\n\n  /* eslint-disable max-statements, complexity */\n  updateState({ oldProps, props, changeFlags }: any) {\n    super.updateState({ props, oldProps, changeFlags })\n\n    const attributeManager = this.getAttributeManager()\n    const { iconAtlas, iconMapping, data, getIcon } = props\n    const { iconManager } = this.state\n\n    iconManager.setProps({ loadOptions: props.loadOptions })\n\n    let iconMappingChanged = false\n    const prePacked = iconAtlas || this.internalState.isAsyncPropLoading('iconAtlas')\n\n    // prepacked iconAtlas from user\n    if (prePacked) {\n      if (oldProps.iconAtlas !== props.iconAtlas) {\n        iconManager.setProps({ iconAtlas, autoPacking: false })\n      }\n\n      if (oldProps.iconMapping !== props.iconMapping) {\n        iconManager.setProps({ iconMapping })\n        iconMappingChanged = true\n      }\n    } else {\n      // otherwise, use autoPacking\n      iconManager.setProps({ autoPacking: true })\n    }\n\n    // handle data changed\n    if (\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getIcon))\n    ) {\n      iconManager.setProps({ data, getIcon })\n    }\n\n    if (iconMappingChanged) {\n      attributeManager.invalidate('instanceOffsets')\n      attributeManager.invalidate('instanceIconFrames')\n      attributeManager.invalidate('instanceColorModes')\n    }\n\n    if (changeFlags.extensionsChanged) {\n      const { gl } = this.context\n      this.state.model?.delete()\n      this.state.model = this._getModel(gl)\n      attributeManager.invalidateAll()\n    }\n  }\n  /* eslint-enable max-statements, complexity */\n\n  get isLoaded() {\n    return super.isLoaded && this.state.iconManager.isLoaded\n  }\n\n  finalizeState() {\n    super.finalizeState()\n    // Release resources held by the icon manager\n    this.state.iconManager.finalize()\n  }\n\n  draw({ uniforms }: any) {\n    const {\n      sizeScale,\n      sizeMinPixels,\n      sizeMaxPixels,\n      sizeUnits,\n      billboard,\n      alphaCutoff,\n      currentTime,\n      iconStill,\n      pickable,\n    } = this.props\n\n    const { iconManager } = this.state\n    const { viewport } = this.context\n\n    const iconsTexture = iconManager.getTexture()\n    if (iconsTexture) {\n      this.state.model\n        .setUniforms(uniforms)\n        .setUniforms({\n          iconsTexture,\n          iconsTextureDim: [iconsTexture.width, iconsTexture.height],\n          sizeScale: sizeScale * (sizeUnits === 'pixels' ? viewport.metersPerPixel : 1),\n          sizeMinPixels,\n          sizeMaxPixels,\n          billboard,\n          alphaCutoff,\n          currentTime,\n          pickable,\n          iconStillOffsets: this.getInstanceOffset(iconStill),\n          iconStillFrames: this.getInstanceIconFrame(iconStill),\n        })\n        .draw()\n    }\n  }\n\n  _getModel(gl: any) {\n    // The icon-layer vertex shader uses 2d positions\n    // specifed via: attribute vec2 positions;\n    const positions = [-1, -1, -1, 1, 1, 1, 1, -1]\n\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLE_FAN,\n        attributes: {\n          // The size must be explicitly passed here otherwise luma.gl\n          // will default to assuming that positions are 3D (x,y,z)\n          positions: {\n            size: 2,\n            value: new Float32Array(positions),\n          },\n        },\n      }),\n      isInstanced: true,\n    })\n  }\n\n  _onUpdate() {\n    this.setNeedsRedraw()\n  }\n\n  _onError(evt: any) {\n    const { onIconError } = this.getCurrentLayer().props\n    if (onIconError) {\n      onIconError(evt)\n    } else {\n      log.error(evt.error)()\n    }\n  }\n\n  getInstanceOffset(icon: any) {\n    const rect = this.state.iconManager.getIconMapping(icon)\n    return [rect.width / 2 - rect.anchorX || 0, rect.height / 2 - rect.anchorY || 0]\n  }\n\n  getInstanceColorMode(icon: any) {\n    const mapping = this.state.iconManager.getIconMapping(icon)\n    return mapping.mask ? 1 : 0\n  }\n\n  getInstanceIconFrame(icon: any) {\n    const rect = this.state.iconManager.getIconMapping(icon)\n    return [rect.x || 0, rect.y || 0, rect.width || 0, rect.height || 0]\n  }\n}\n\nIconLayer.layerName = 'FlatIconLayer'\nIconLayer.defaultProps = defaultProps\n"],"names":["DEFAULT_COLOR","defaultProps","IconLayer","Layer","vertShader","fragShader","project32","picking","IconManager","GL","oldProps","props","changeFlags","attributeManager","iconAtlas","iconMapping","data","getIcon","iconManager","iconMappingChanged","gl","_a","uniforms","sizeScale","sizeMinPixels","sizeMaxPixels","sizeUnits","billboard","alphaCutoff","currentTime","iconStill","pickable","viewport","iconsTexture","positions","Model","Geometry","evt","onIconError","log","icon","rect"],"mappings":"iQA+BA,MAAMA,EAAgB,CAAC,EAAG,EAAG,EAAG,GAAG,EAE7BC,EAAe,CACnB,UAAW,CAAE,KAAM,QAAS,MAAO,KAAM,MAAO,EAAK,EACrD,YAAa,CAAE,KAAM,SAAU,MAAO,CAAC,EAAG,MAAO,EAAK,EACtD,UAAW,CAAE,KAAM,SAAU,MAAO,EAAG,IAAK,CAAE,EAC9C,UAAW,GACX,UAAW,SACX,cAAe,CAAE,KAAM,SAAU,IAAK,EAAG,MAAO,CAAE,EAClD,cAAe,CAAE,KAAM,SAAU,IAAK,EAAG,MAAO,OAAO,gBAAiB,EACxE,YAAa,CAAE,KAAM,SAAU,MAAO,IAAM,IAAK,EAAG,IAAK,CAAE,EAC3D,UAAW,CAAE,KAAM,SAAU,MAAO,IAAK,EAEzC,QAAS,CAAE,KAAM,WAAY,MAAO,SAAU,EAC9C,YAAa,CAAE,KAAM,WAAY,MAAO,CAAC,EAAG,CAAC,CAAE,EAC/C,eAAgB,CAAE,KAAM,WAAY,MAAO,CAAC,IAAK,IAAK,IAAK,GAAG,CAAE,EAChE,eAAgB,CAAE,KAAM,WAAY,MAAO,CAAE,EAE7C,SAAU,CAAE,KAAM,WAAY,MAAOD,CAAc,EACnD,QAAS,CAAE,KAAM,WAAY,MAAO,CAAE,EACtC,SAAU,CAAE,KAAM,WAAY,MAAO,CAAE,EACvC,eAAgB,CAAE,KAAM,WAAY,MAAO,CAAC,EAAG,CAAC,CAAE,EAElD,aAAc,CAAE,KAAM,WAAY,MAAO,IAAK,EAC9C,WAAY,CAAE,KAAM,WAAY,MAAO,IAAK,EAC5C,aAAc,CAAE,KAAM,WAAY,MAAO,IAAK,EAC9C,WAAY,CAAE,KAAM,WAAY,MAAO,IAAK,EAC5C,YAAa,CAAE,KAAM,SAAU,MAAO,CAAE,EAExC,SAAU,CAAE,KAAM,UAAW,MAAO,EAAK,EACzC,YAAa,CAAE,KAAM,WAAY,MAAO,KAAM,QAAS,GAAO,SAAU,EAAK,CAC/E,EAEA,MAAqBE,UAAkBC,CAAM,CAC3C,YAAa,CACX,OAAO,MAAM,WAAW,CAAE,GAAIC,EAAY,GAAIC,EAAY,QAAS,CAACC,EAAWC,CAAO,CAAG,CAAA,CAC3F,CAEA,iBAAkB,CAChB,KAAK,MAAQ,CACX,YAAa,IAAIC,EAAY,KAAK,QAAQ,GAAI,CAC5C,SAAU,KAAK,UAAU,KAAK,IAAI,EAClC,QAAS,KAAK,SAAS,KAAK,IAAI,CAAA,CACjC,CAAA,EAGsB,KAAK,sBAGb,aAAa,CAC5B,mBAAoB,CAClB,KAAM,EACN,SAAU,cACZ,EACA,uBAAwB,CACtB,KAAM,EACN,SAAU,YACZ,EACA,uBAAwB,CACtB,KAAM,EACN,SAAU,cACZ,EACA,qBAAsB,CACpB,KAAM,EACN,SAAU,YACZ,EACA,cAAe,CACb,KAAM,EACN,WAAY,GACZ,SAAU,UACV,aAAc,CAChB,EACA,gBAAiB,CACf,KAAM,EACN,aAAc,CAAC,EAAG,CAAC,EACnB,SAAU,aAEZ,EACA,mBAAoB,CAClB,KAAM,EACN,aAAc,CAAC,EAAG,EAAG,IAAK,GAAG,EAC7B,SAAU,gBAEZ,EACA,mBAAoB,CAClB,KAAM,EACN,KAAMC,EAAG,cACT,aAAc,EACd,SAAU,gBAGZ,EAUA,eAAgB,CACd,KAAM,KAAK,MAAM,YAAY,OAC7B,KAAMA,EAAG,cACT,WAAY,GACZ,WAAY,GACZ,SAAU,WACV,aAAcT,CAChB,EACA,eAAgB,CACd,KAAM,EACN,WAAY,GACZ,SAAU,UACZ,EACA,oBAAqB,CACnB,KAAM,EACN,WAAY,GACZ,SAAU,gBACZ,CAAA,CACD,CAEH,CAGA,YAAY,CAAE,SAAAU,EAAU,MAAAC,EAAO,YAAAC,GAAoB,OACjD,MAAM,YAAY,CAAE,MAAAD,EAAO,SAAAD,EAAU,YAAAE,CAAa,CAAA,EAE5C,MAAAC,EAAmB,KAAK,sBACxB,CAAE,UAAAC,EAAW,YAAAC,EAAa,KAAAC,EAAM,QAAAC,GAAYN,EAC5C,CAAE,YAAAO,CAAY,EAAI,KAAK,MAE7BA,EAAY,SAAS,CAAE,YAAaP,EAAM,WAAa,CAAA,EAEvD,IAAIQ,EAAqB,GAiCzB,GAhCkBL,GAAa,KAAK,cAAc,mBAAmB,WAAW,GAI1EJ,EAAS,YAAcC,EAAM,WAC/BO,EAAY,SAAS,CAAE,UAAAJ,EAAW,YAAa,EAAO,CAAA,EAGpDJ,EAAS,cAAgBC,EAAM,cACrBO,EAAA,SAAS,CAAE,YAAAH,CAAA,CAAa,EACfI,EAAA,KAIvBD,EAAY,SAAS,CAAE,YAAa,EAAM,CAAA,GAK1CN,EAAY,aACXA,EAAY,wBACVA,EAAY,sBAAsB,KAAOA,EAAY,sBAAsB,WAE9EM,EAAY,SAAS,CAAE,KAAAF,EAAM,QAAAC,CAAS,CAAA,EAGpCE,IACFN,EAAiB,WAAW,iBAAiB,EAC7CA,EAAiB,WAAW,oBAAoB,EAChDA,EAAiB,WAAW,oBAAoB,GAG9CD,EAAY,kBAAmB,CAC3B,KAAA,CAAE,GAAAQ,CAAG,EAAI,KAAK,SACfC,EAAA,KAAA,MAAM,QAAN,MAAAA,EAAa,SAClB,KAAK,MAAM,MAAQ,KAAK,UAAUD,CAAE,EACpCP,EAAiB,cAAc,CACjC,CACF,CAGA,IAAI,UAAW,CACb,OAAO,MAAM,UAAY,KAAK,MAAM,YAAY,QAClD,CAEA,eAAgB,CACd,MAAM,cAAc,EAEf,KAAA,MAAM,YAAY,UACzB,CAEA,KAAK,CAAE,SAAAS,GAAiB,CAChB,KAAA,CACJ,UAAAC,EACA,cAAAC,EACA,cAAAC,EACA,UAAAC,EACA,UAAAC,EACA,YAAAC,EACA,YAAAC,EACA,UAAAC,EACA,SAAAC,CAAA,EACE,KAAK,MAEH,CAAE,YAAAb,CAAY,EAAI,KAAK,MACvB,CAAE,SAAAc,CAAS,EAAI,KAAK,QAEpBC,EAAef,EAAY,aAC7Be,GACF,KAAK,MAAM,MACR,YAAYX,CAAQ,EACpB,YAAY,CACX,aAAAW,EACA,gBAAiB,CAACA,EAAa,MAAOA,EAAa,MAAM,EACzD,UAAWV,GAAaG,IAAc,SAAWM,EAAS,eAAiB,GAC3E,cAAAR,EACA,cAAAC,EACA,UAAAE,EACA,YAAAC,EACA,YAAAC,EACA,SAAAE,EACA,iBAAkB,KAAK,kBAAkBD,CAAS,EAClD,gBAAiB,KAAK,qBAAqBA,CAAS,CAAA,CACrD,EACA,KAAK,CAEZ,CAEA,UAAUV,EAAS,CAGX,MAAAc,EAAY,CAAC,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAE,EAEtC,OAAA,IAAIC,EAAMf,EAAI,CACnB,GAAG,KAAK,WAAW,EACnB,GAAI,KAAK,MAAM,GACf,SAAU,IAAIgB,EAAS,CACrB,SAAU3B,EAAG,aACb,WAAY,CAGV,UAAW,CACT,KAAM,EACN,MAAO,IAAI,aAAayB,CAAS,CACnC,CACF,CAAA,CACD,EACD,YAAa,EAAA,CACd,CACH,CAEA,WAAY,CACV,KAAK,eAAe,CACtB,CAEA,SAASG,EAAU,CACjB,KAAM,CAAE,YAAAC,CAAgB,EAAA,KAAK,kBAAkB,MAC3CA,EACFA,EAAYD,CAAG,EAEXE,EAAA,MAAMF,EAAI,KAAK,EAAE,CAEzB,CAEA,kBAAkBG,EAAW,CAC3B,MAAMC,EAAO,KAAK,MAAM,YAAY,eAAeD,CAAI,EACvD,MAAO,CAACC,EAAK,MAAQ,EAAIA,EAAK,SAAW,EAAGA,EAAK,OAAS,EAAIA,EAAK,SAAW,CAAC,CACjF,CAEA,qBAAqBD,EAAW,CAEvB,OADS,KAAK,MAAM,YAAY,eAAeA,CAAI,EAC3C,KAAO,EAAI,CAC5B,CAEA,qBAAqBA,EAAW,CAC9B,MAAMC,EAAO,KAAK,MAAM,YAAY,eAAeD,CAAI,EACvD,MAAO,CAACC,EAAK,GAAK,EAAGA,EAAK,GAAK,EAAGA,EAAK,OAAS,EAAGA,EAAK,QAAU,CAAC,CACrE,CACF,CAEAvC,EAAU,UAAY,gBACtBA,EAAU,aAAeD"}