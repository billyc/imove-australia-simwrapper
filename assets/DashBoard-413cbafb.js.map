{"version":3,"mappings":"iNAMO,MAAMA,EAAiD,CAC5D,UAAWC,EAAqB,IAAMC,EAAA,WAAO,4BAAoB,EAAC,8mBAClE,KAAMD,EAAqB,UAAM,OAAO,oBAAY,EAAC,2QACrD,IAAKA,EAAqB,UAAM,OAAO,mBAAW,EAAC,yQACnD,OAAQA,EAAqB,UAAM,OAAO,sBAAc,EAAC,+QACzD,IAAKA,EAAqB,UAAM,OAAO,qBAAa,EAAC,0JACrD,QAASA,EAAqB,UAAM,OAAO,uBAAe,EAAC,u8BAC3D,QAASA,EAAqB,UAAM,OAAO,uBAAe,EAAC,8VAC3D,SAAUA,EAAqB,UAAM,OAAO,wBAAgB,EAAC,sxBAC7D,KAAMA,EAAqB,UAAM,OAAO,oBAAY,EAAC,2QACrD,IAAKA,EAAqB,UAAM,OAAO,mBAAW,EAAC,yQACnD,OAAQA,EAAqB,UAAM,OAAO,sBAAc,EAAC,2jBACzD,OAAQA,EAAqB,UAAM,OAAO,sBAAc,EAAC,4iBACzD,QAASA,EAAqB,UAAM,OAAO,uBAAe,EAAC,iRAC3D,UAAWA,EAAqB,UAAM,OAAO,yBAAiB,EAAC,iNAC/D,KAAMA,EAAqB,UAAM,OAAO,oBAAY,EAAC,+KACrD,KAAMA,EAAqB,UAAM,OAAO,oBAAY,EAAC,qQACrD,QAASA,EAAqB,UAAM,OAAO,uBAAe,EAAC,kvBAC3D,KAAMA,EAAqB,UAAM,OAAO,oBAAY,EAAC,idACrD,SAAUA,EAAqB,UAAM,OAAO,wBAAgB,EAAC,y1BAC7D,MAAOA,EAAqB,UAAM,OAAO,qBAAa,EAAC,sJACvD,IAAKA,EAAqB,UAAM,OAAO,mBAAW,EAAC,sRAGnD,SAAUA,EAAqB,UAAM,OAAO,wBAAgB,EAAC,6vBAC7D,QAASA,EAAqB,UAAM,OAAO,uBAAe,EAAC,0mCAC3D,MAAOA,EAAqB,UAAM,OAAO,qBAAa,EAAC,sxCACvD,IAAKA,EAAqB,IAAMC,EAAA,WAAO,wBAAgB,EAAC,s7CACxD,OAAQD,EAAqB,UAAM,OAAO,sBAAc,EAAC,i9BACzD,MAAOA,EAAqB,UAAM,OAAO,qBAAa,EAAC,01CACvD,YAAaA,EAAqB,IAAMC,EAAA,WAAO,yBAAiB,irCAAC,CACnE,EAmCgB,SAAAC,EAAgBC,EAAmBC,EAA2B,CAC5E,IAAIC,EAAQF,EAEZ,OAAIC,IACMC,EAAAD,EAAU,UAAU,EAAIA,EAAU,YAAY,GAAG,CAAC,EAAI,MAAQC,GAGhEA,IAAM,WAAW,IAAK,GAAG,EAC1BA,CACT,CCkBA,MAAAC,EAAA,GACAC,EAAA,YAAAR,CAAA,EAGAQ,EAAA,QAAAC,GAAA,CACAF,EAAA,QAAAE,CAAA,IAAAT,EAAAS,CAAA,CAGA,GAEA,MAAAC,EAAAC,EAAA,CACA,iBACA,mCAAAC,CAAA,EAAAL,CAAA,EACA,OACA,+BACA,qCACA,yCACA,sCACA,YACA,cACA,cACA,EACA,UACA,CACA,SACA,eACA,mDACA,QACA,QACA,YACA,oBACA,oBACA,YACA,cACA,yBACA,cACA,WACA,yBACA,iBACA,qBAEA,WACA,YACA,yBACA,cACA,oBAIA,UACA,sBACA,uEACA,4CAEA,EACA,EACA,QACA,oCACA,EACA,UACA,WAAAM,EAAA,sBACA,CACA,EAEA,OACA,mCACA,uBACA,qBACA,EACA,wBACA,2BACA,CACA,EAEA,SAKA,cAAAC,EAAAC,EAAA,CACAD,EAAA,MAAAC,EACAD,EAAA,cACA,EAEA,aAAAA,EAAAC,EAAA,CAEA,IAAAA,EAAA,CACAD,EAAA,UACA,MACA,CAEA,OAAAC,GAAA,UAAAA,EAEAD,EAAA,YAAAC,CAAA,EACAA,EAAA,KAAAA,EAAA,OAAAC,EAAA,OAEAF,EAAA,YAAAC,EAAA,IAEA,EAEA,iBACA,mBACA,UAAAE,KAAA,UACA,UAAAH,KAAAG,EAAA,MACA,sBAAAH,EAAA,IAGA,kBACA,EAEA,sBAAAA,EAAA,CACA,gBAAAA,EAAA,qBAAAA,EAAA,GACA,EAEA,iBAKA,OAJA,kDAGA,aAAAI,GAAA,CAAAA,EAAA,uBAEA,EAEA,iBAAAJ,EAAA,CAEA,GAAAA,EAAA,gBAAAA,EAAA,mCAGA,GAAAd,EAAAc,EAAA,MACA,OAAAd,EAAAc,EAAA,MAIA,GAAAN,EAAA,QAAAM,EAAA,uBAAAA,EAAA,IAIA,EAEA,oBAAAK,EAAA,CACA,cAAAA,EAAA,IAAAA,EAAA,QACA,sBAAAA,EAAA,GACA,EAEA,iBAAAL,EAAA,CACA,sBACA,yBAEA,sBAAAA,EAAA,GAEA,yCAEA,uBAEA,sBAAAA,EAAA,GACA,EAEA,iBAAAM,EAAA,CACA,MAAAC,EAAA,wBAAAD,CAAA,EAEA,GAAAC,EAAA,CACA,MAAAC,EAAA,OAAAD,EAAA,mBAAAA,EAAA,cACA,cAAAD,CAAA,iBAAAA,CAAA,EAAAE,CAAA,CACA,CACA,iBAAAC,EAAA,gBACA,EAEA,aAAAT,EAAA,CAKA,MAAAU,EAAAV,EAAA,yBAIAW,EAAAX,EAAA,OAAAA,EAAA,UAAAU,EAIA,IAAAE,EAAA,MAFAZ,EAAA,UAIA,OAAAA,EAAA,iBAAAA,EAAA,cACAY,EAAA,gBAAAZ,EAAA,iBAAAA,EAAA,YAGAW,GAAA,8BACAC,EAAA,aAAAD,CAAA,MAGA,wBACA,wBAAAX,EAAA,GACAY,EAAA,eAEAA,EAAA,CACA,oBACA,MACA,SACA,OACA,QACA,mBAKAA,CACA,EAEA,cAAAC,EAAA,CACA,MAAAC,EAAA,qCACAC,KAAA,OAAAF,CAAA,EAEA,GAAAC,EAAA,0CACA,OAAAA,EAAA,EACA,EAEA,YAAAE,EAAA,CACA,IAAAxB,EAAA,OAAAwB,EAAA,IACAC,EAAA,aAAAD,CAAA,EAEA,uCACAxB,EAAAyB,EAAA,WAAAA,EAAA,QAAAA,EAAA,UAEAzB,EAAAyB,EAAA,WAAAA,EAAA,QAAAA,EAAA,UAEAzB,CACA,EAEA,gBAAAwB,EAAA,CACAA,IAAA,iBAGA,8BACA,mBAEA,uBAEA,eAAAA,EACA,aACA,uBAGA,gBACA,2BAAAA,EACA,aAAAE,EAAA,GAAAC,CAAA,oBACAH,EACA,sBACA,uBAAAG,EAAA,WAAAH,EAAA,MACA,EAEA,iCAEA,wBACA,KACA,EAEA,uBAEA,eACA,8BACA,UACA,wBACA,CACA,MAAAI,EAAA,oEACA,UAAAC,EAAA,MAAAD,CAAA,CACA,CAWA,GARA,4BAGA,uCAEA,qBAGA,yBACA,IACA,MAAAE,EAAA,wCACA,eAAAA,GAAA,OACA,CAEA,gBACA,MAEA,iBAGA,0CACA,sBACA,EAEA,eAaA,gBACA,MAAAC,EAAA,uCAEA,0BAEA,UAAAC,KAAAD,EACA,yBAAAC,EAAA,wBAAAA,CAAA,QAEA,CAEA,UAAAP,KAAA,kBACA,mBACA,0BAAAA,EAAA,SACA,OAAAA,EAAA,SAAAQ,IACAF,EAAA,OAAAE,CAAA,EACA,iBAAAA,CAAA,EACA,EACA,EAGA,UAAAC,KAAAH,EACA,yBAAAG,EAAA,wBAAAA,CAAA,GAEA,CACA,EAEA,kBAGA,2CACA,MAAAR,EAAA,oCACA,eAAAA,CAAA,OACA,iBACA,iCAEA,mBACA,QACA,kEAGA,EAEA,UAAAS,EAAA,CACA,IAAAC,EAAA,EAEA,UAAAC,KAAA,YAAAF,CAAA,GACA,IAAAG,EAAAH,EAAAE,CAAA,EAGAC,EAAA,UAAAA,EAAA,CAAAA,CAAA,GAEA,IAAAC,EAAA,EAEAD,EAAA,QAAA9B,GAAA,CACAA,EAAA,cAAA4B,CAAA,GACA5B,EAAA,YACAA,EAAA,OAAA4B,EAGA,IACA,4BAAA5B,EAAA,SACA+B,EAAA,SAAAA,EAAA/B,EAAA,eAEAgC,EAAA,CACA,iBAAAA,CAAA,EACA,yDACAD,EAAA,CACA,CAIA/B,EAAA,QAAAA,EAAA,uBAAAA,CAAA,GAEAA,EAAA,kBAAAA,EAAA,aAAAA,EAAA,QAGAiC,EAAA,iBAAAjC,EAAA,OACAiC,EAAA,oBAAAjC,EAAA,OACAiC,EAAA,IAAAjC,EAAA,aAGA,CAAAA,EAAA,QAAAA,EAAA,YAAAA,EAAA,cACAA,EAAA,cAEA4B,GAAA,CACA,EAEA,mBAAAC,EAAA,MAAAC,EAAA,EACA,yBAAAC,CAAA,CACA,CACA,4BACA,EAEA,uBACA,2CACA,uDAEA,wBACA,qDAEA,EAEA,eAAAG,EAAAC,EAAA,CACA,IAAAC,EAAAD,EAEA,uCACAC,EAAAF,EAAA,GAAAC,CAAA,QAAAD,EAAA,GAAAC,CAAA,KAAAD,EAAA,GAAAC,CAAA,WAEAC,EAAAF,EAAA,GAAAC,CAAA,QAAAD,EAAA,GAAAC,CAAA,KAAAD,EAAA,GAAAC,CAAA,WAGAC,CACA,EAEA,kBAAA7B,EAAA,CACA,MAAA8B,EAAA,iBACA,IAAAC,EAAA,MAEA,uCACAA,EAAAD,EAAA,GAAA9B,CAAA,QAAA8B,EAAA,GAAA9B,CAAA,KAAA8B,EAAA,GAAA9B,CAAA,WAEA+B,EAAAD,EAAA,GAAA9B,CAAA,QAAA8B,EAAA,GAAA9B,CAAA,KAAA8B,EAAA,GAAA9B,CAAA,WAGA+B,CACA,EAEA,yBAAAtC,EAAA,CACAA,EAAA,YACA,aAAAA,EAAA,MACA,yBACA,EAEA,2BACA,MAAAuC,EAAA,qCACA,+DACA,iCAAAA,CAAA,CACA,EAEA,eACA,MAAAA,EAAA,qCACAA,IAAA,mBAAAA,EAAA,iBACA,qBACA,4BACA,EAEA,gBACA,mBAEA,8BAGA,2BACA,6BACA,6BACA,6BACA,2BAEA,EAEA,YAAApC,EAAA,CACA,MAAAqC,EAAA,CACA,qCACA,sDAEA,OAAAA,EAAA,OAAArC,EAAA,SACAqC,CACA,CACA,EACA,gBAoBA,GAnBA,sDACA,gCAEA,UACA,uBACA,YACA,YACA,0BACA,kCAGA,oDAGA,oCAEA,4BAGA,mDACA,MAAAxC,EAAA,sBACA,gBAAAA,CAAA,CACA,CAEA,qBACA,EACA,gBACA,iBACA,wDACA,CACA","names":["panelLookup","defineAsyncComponent","__vitePreload","buildCleanTitle","plotTitle","subfolder","title","namedCharts","chartTypes","key","_sfc_main","defineComponent","TopSheet","HTTPFileSystem","card","event","Status","row","f","options","cardId","element","dimensions","globalStore","defaultHeight","height","style","name","svnProject","a","index","tab","subtab","queryWithoutSubtab","yaml","YAML","userSupplied","allRowKeys","rowKey","rowName","leftoverKey","layout","numCard","rowId","cards","flexWeight","e","Vue","o","prefix","label","header","tag","dashboard","rowClass"],"sources":["../../src/dash-panels/_allPanels.ts","../../src/layout-manager/DashBoard.vue"],"sourcesContent":["import { AsyncComponent, defineAsyncComponent } from 'vue'\n\n// add every chart type here.\n// the name of the import will be the chart \"type\" in YAML.\n\n// resizable charts:\nexport const panelLookup: { [key: string]: AsyncComponent } = {\n  aggregate: defineAsyncComponent(() => import('./aggregate-od.vue')),\n  area: defineAsyncComponent(() => import('./area.vue')),\n  bar: defineAsyncComponent(() => import('./bar.vue')),\n  bubble: defineAsyncComponent(() => import('./bubble.vue')),\n  csv: defineAsyncComponent(() => import('./table.vue')),\n  gridmap: defineAsyncComponent(() => import('./gridmap.vue')),\n  heatmap: defineAsyncComponent(() => import('./heatmap.vue')),\n  hexagons: defineAsyncComponent(() => import('./hexagons.vue')),\n  line: defineAsyncComponent(() => import('./line.vue')),\n  pie: defineAsyncComponent(() => import('./pie.vue')),\n  plotly: defineAsyncComponent(() => import('./plotly.vue')),\n  sankey: defineAsyncComponent(() => import('./sankey.vue')),\n  scatter: defineAsyncComponent(() => import('./scatter.vue')),\n  slideshow: defineAsyncComponent(() => import('./slideshow.vue')),\n  text: defineAsyncComponent(() => import('./text.vue')),\n  tile: defineAsyncComponent(() => import('./tile.vue')),\n  transit: defineAsyncComponent(() => import('./transit.vue')),\n  vega: defineAsyncComponent(() => import('./vega.vue')),\n  vehicles: defineAsyncComponent(() => import('./vehicles.vue')),\n  video: defineAsyncComponent(() => import('./video.vue')),\n  xml: defineAsyncComponent(() => import('./xml.vue')),\n\n  // full-screen map visualizations:\n  carriers: defineAsyncComponent(() => import('./carriers.vue')),\n  flowmap: defineAsyncComponent(() => import('./flowmap.vue')),\n  links: defineAsyncComponent(() => import('./links.vue')),\n  map: defineAsyncComponent(() => import('./area-map.vue')),\n  xytime: defineAsyncComponent(() => import('./xytime.vue')),\n  imove: defineAsyncComponent(() => import('./imove.vue')),\n  'imove-p2p': defineAsyncComponent(() => import('./imove-p2p.vue')),\n}\n\n// ----- EXPORT CHARTS HERE ---------------------------------------------------\n// export all resizable charts here\nexport const plotlyCharts = {\n  // aggregate,\n  // area,\n  // bar,\n  // bubble,\n  // csv,\n  // heatmap,\n  // hexagons,\n  // image: slideshow, // both 'image' and 'slideshow' types work for images\n  // line,\n  // markdown: text,\n  // pie,\n  // plotly,\n  // sankey,\n  // slideshow,\n  // text,\n  // tile,\n  // transit,\n  // scatter,\n  // vega,\n  // video,\n  // xml,\n  // xytime,\n}\n\n// export all remaining charts/maps here:\n// export default Object.assign({}, /*{ carriers, flowmap, links, map },*/ plotlyCharts)\n// export default { panelLookup }\n\n// ----- HELPER FUNCTIONS -----------------------------------------------------\n\nexport function buildCleanTitle(plotTitle: string, subfolder: string): string {\n  let title = plotTitle\n\n  if (subfolder) {\n    title = subfolder.substring(1 + subfolder.lastIndexOf('/')) + ' - ' + title\n  }\n\n  title = title.replaceAll('/', '-')\n  return title\n}\n","<template lang=\"pug\">\n.dashboard(:class=\"{wiide, 'is-panel-narrow': isPanelNarrow, 'is-fullscreen-dashboard': isFullScreenDashboard }\" :id=\"viewId\")\n  .dashboard-content(:class=\"{wiide, 'is-fullscreen-dashboard': isFullScreenDashboard}\" :style=\"dashWidthCalculator\")\n\n    .dashboard-header(v-if=\"!fullScreenCardId && (title + description)\"\n      :class=\"{wiide, 'is-panel-narrow': isPanelNarrow}\")\n      h2 {{ title }}\n      p {{ description }}\n\n    .tabs.is-centered(v-if=\"subtabs.length\")\n      ul.tab-row\n        li.tab-entry(v-for=\"subtab,index of subtabs\" :key=\"index\"\n          :class=\"{'is-active': index===activeTab, 'is-not-active': index!==activeTab}\"\n          :style=\"{opacity: index===activeTab ? 1.0 : 0.55}\"\n        )\n          b: a(@click=\"switchTab(index)\") {{ subtab.title }}\n\n    //- start row here\n    .dash-row(v-for=\"row,i in rows\" :key=\"i\"\n      :class=\"getRowClass(row)\"\n      :style=\"{'flex': rowFlexWeights[i] || 1}\"\n    )\n\n      //- each card here\n      .dash-card-frame(v-for=\"card,j in row.cards\" :key=\"`${i}/${j}`\"\n        :style=\"getCardStyle(card)\"\n        :class=\"{wiide, 'is-panel-narrow': isPanelNarrow}\"\n      )\n\n        //- card header/title\n        .dash-card-headers(v-if=\"card.title + card.description\" :class=\"{'fullscreen': !!fullScreenCardId}\")\n          .header-labels\n            h3 {{ card.title }}\n            p(v-if=\"card.description\") {{ card.description }}\n\n          //- zoom button\n          .header-buttons\n            button.button.is-small.is-white(\n              v-if=\"card.info\"\n              @click=\"handleToggleInfoClick(card)\"\n              :title=\"infoToggle[card.id] ? 'Hide Info':'Show Info'\"\n            )\n              i.fa.fa-info-circle\n\n            button.button.is-small.is-white(\n              @click=\"toggleZoom(card)\"\n              :title=\"fullScreenCardId ? 'Restore':'Enlarge'\"\n            )\n              i.fa.fa-expand\n\n        //- info contents\n        .info(v-show=\"infoToggle[card.id]\")\n          p\n          p {{ card.info }}\n\n        //- card contents\n        .spinner-box(v-if=\"getCardComponent(card)\"\n          :id=\"card.id\"\n          :class=\"{'is-loaded': card.isLoaded}\"\n        )\n          component.dash-card(\n            :is=\"getCardComponent(card)\"\n            :fileSystemConfig=\"fileSystemConfig\"\n            :subfolder=\"xsubfolder\"\n            :files=\"fileList\"\n            :yaml=\"card.props.configFile\"\n            :config=\"card.props\"\n            :datamanager=\"datamanager\"\n            :style=\"{opacity: opacity[card.id]}\"\n            :cardId=\"card.id\"\n            :cardTitle=\"card.title\"\n            :allConfigFiles=\"allConfigFiles\"\n            @isLoaded=\"handleCardIsLoaded(card)\"\n            @dimension-resizer=\"setDimensionResizer\"\n            @titles=\"setCardTitles(card, $event)\"\n            @error=\"setCardError(card, $event)\"\n          )\n          .dash-card-errors(v-if=\"card.errors.length\")\n            p(v-for=\"err,i in card.errors\" :key=\"i\") {{ err }}\n\n</template>\n\n<script lang=\"ts\">\nimport Vue, { defineComponent } from 'vue'\nimport type { PropType } from 'vue'\n\nimport YAML from 'yaml'\n\nimport globalStore from '@/store'\nimport { FileSystemConfig, Status, YamlConfigs } from '@/Globals'\nimport HTTPFileSystem from '@/js/HTTPFileSystem'\n\nimport TopSheet from '@/components/TopSheet/TopSheet.vue'\n// import charts, { plotlyCharts } from '@/dash-panels/_allPanels'\n\nimport { panelLookup } from '@/dash-panels/_allPanels'\nimport DashboardDataManager from '@/js/DashboardDataManager'\n\n// append a prefix so the html template is legal\nconst namedCharts = {} as any\nconst chartTypes = Object.keys(panelLookup)\n// const plotlyChartTypes = {} as any\n\nchartTypes.forEach((key: any) => {\n  namedCharts[`card-${key}`] = panelLookup[key] // key // charts[key] as any\n  // //@ts-ignore\n  // if (plotlyCharts[key]) plotlyChartTypes[key] = true\n})\n\nexport default defineComponent({\n  name: 'Dashboard',\n  components: Object.assign({ TopSheet }, namedCharts),\n  props: {\n    root: { type: String, required: true },\n    xsubfolder: { type: String, required: true },\n    allConfigFiles: { type: Object as PropType<YamlConfigs>, required: true },\n    datamanager: { type: Object as PropType<DashboardDataManager>, required: true },\n    gist: Object as any,\n    config: Object as any,\n    zoomed: Boolean,\n  },\n  data: () => {\n    return {\n      title: '',\n      description: '',\n      viewId: 'dashboard-' + Math.floor(1e12 * Math.random()),\n      yaml: {} as any,\n      rows: [] as { id: string; cards: any[] }[],\n      fileList: [] as string[],\n      fileSystemConfig: {} as FileSystemConfig,\n      fullScreenCardId: '',\n      resizers: {} as { [id: string]: any },\n      infoToggle: {} as { [id: string]: boolean },\n      isFullScreenDashboard: false,\n      isResizing: false,\n      opacity: {} as any,\n      narrowPanelObserver: null as ResizeObserver | null,\n      isPanelNarrow: false,\n      numberOfShownCards: 1,\n      // subtab state:\n      subtabs: [] as any[],\n      activeTab: 0,\n      dashboardTabWithDelay: -1,\n      showFooter: false,\n      rowFlexWeights: [] as number[],\n    }\n  },\n\n  computed: {\n    dashWidthCalculator(): any {\n      if (this.$store.state.dashboardWidth && this.$store.state.isFullWidth) {\n        return { maxWidth: this.$store.state.dashboardWidth }\n      }\n      return {}\n    },\n    wiide(): boolean {\n      return this.$store.state.isFullWidth\n    },\n    fileApi(): HTTPFileSystem {\n      return new HTTPFileSystem(this.fileSystemConfig)\n    },\n  },\n\n  watch: {\n    async '$store.state.resizeEvents'() {\n      await this.$nextTick()\n      this.resizeAllCards()\n    },\n    '$store.state.locale'() {\n      this.updateThemeAndLabels()\n    },\n  },\n\n  methods: {\n    /**\n     * This only gets triggered when a topsheet has some titles.\n     * Remove the dashboard titles and use the ones from the topsheet.\n     */\n    setCardTitles(card: any, event: any) {\n      card.title = event\n      card.description = ''\n    },\n\n    setCardError(card: any, event: any) {\n      // blank event: clear all errors for this card\n      if (!event) {\n        card.errors = []\n        return\n      }\n\n      if (typeof event === 'string' && event) {\n        // simple string error message\n        card.errors.push(event)\n      } else if (event.msg && event.type === Status.ERROR) {\n        // status object: ignore warnings for now\n        card.errors.push(event.msg)\n      }\n    },\n\n    resizeAllCards() {\n      this.isResizing = true\n      for (const row of this.rows) {\n        for (const card of row.cards) {\n          this.updateDimensions(card.id)\n        }\n      }\n      this.isResizing = false\n    },\n\n    handleToggleInfoClick(card: any) {\n      this.infoToggle[card.id] = !this.infoToggle[card.id]\n    },\n\n    async getFiles() {\n      const folderContents = await this.fileApi.getDirectory(this.xsubfolder)\n\n      // hide dot folders\n      const files = folderContents.files.filter(f => !f.startsWith('.')).sort()\n      return files\n    },\n\n    getCardComponent(card: { type: string }) {\n      // console.log(1, card)\n      if (card.type === 'table' || card.type === 'topsheet') return 'TopSheet'\n\n      // load the plugin\n      if (panelLookup[card.type]) {\n        return panelLookup[card.type]\n      }\n\n      // might be a chart\n      if (chartTypes.indexOf(card.type) > -1) return 'card-' + card.type\n\n      // or might be a vue component?\n      return undefined // card.type\n    },\n\n    setDimensionResizer(options: { id: string; resizer: any }) {\n      this.resizers[options.id] = options.resizer\n      this.updateDimensions(options.id)\n    },\n\n    async toggleZoom(card: any) {\n      if (this.fullScreenCardId) {\n        this.fullScreenCardId = ''\n      } else {\n        this.fullScreenCardId = card.id\n      }\n      this.$emit('zoom', this.fullScreenCardId)\n      // allow vue to resize everything\n      await this.$nextTick()\n      // tell plotly to resize everything\n      this.updateDimensions(card.id)\n    },\n\n    updateDimensions(cardId: string) {\n      const element = document.getElementById(cardId)\n\n      if (element) {\n        const dimensions = { width: element.clientWidth, height: element.clientHeight }\n        if (this.resizers[cardId]) this.resizers[cardId](dimensions)\n      }\n      if (!this.isResizing) globalStore.commit('resize')\n    },\n\n    getCardStyle(card: any) {\n      // figure out height. If card has registered a resizer with changeDimensions(),\n      // then it needs a default height (300)\n\n      // markdown does not want a default height\n      const defaultHeight = card.type === 'text' ? undefined : 300\n\n      // old version:  plotlyChartTypes[card.type] ? 300 : undefined\n\n      const height = card.height ? card.height * 60 : defaultHeight\n\n      const flex = card.width || 1\n\n      let style: any = { flex: flex }\n\n      if (card.backgroundColor || card.background) {\n        style.backgroundColor = card.backgroundColor || card.background\n      }\n\n      if (height && !this.isFullScreenDashboard) {\n        style.minHeight = `${height}px`\n      }\n\n      if (this.fullScreenCardId) {\n        if (this.fullScreenCardId !== card.id) {\n          style.display = 'none'\n        } else {\n          style = {\n            position: 'absolute',\n            top: 0,\n            bottom: 0,\n            left: 0,\n            right: 0,\n            margin: '6px 0px', // '18px 1rem 0.5rem 1rem',\n          }\n        }\n      }\n\n      return style\n    },\n\n    getFileSystem(name: string): FileSystemConfig {\n      const svnProject: FileSystemConfig[] = this.$store.state.svnProjects.filter(\n        (a: FileSystemConfig) => a.slug === name\n      )\n      if (svnProject.length === 0) throw Error('no such project')\n      return svnProject[0]\n    },\n\n    getTabTitle(index: number) {\n      let title = `Tab ${index + 1}`\n      let tab = this.subtabs[index]\n\n      if (this.$store.state.locale === 'de') {\n        title = tab.subtab_de || tab.subtab || tab.subtab_en\n      } else {\n        title = tab.subtab_en || tab.subtab || tab.subtab_de\n      }\n      return title\n    },\n\n    async switchTab(index: number) {\n      if (index === this.activeTab) return\n\n      // Force teardown the dashboard to ensure we start with a clean slate\n      this.dashboardTabWithDelay = -1\n      this.showFooter = false\n\n      await this.$nextTick()\n\n      this.activeTab = index\n      this.rows = []\n      this.rowFlexWeights = []\n\n      // to give browser time to teardown: 0.2 seconds delay\n      setTimeout(() => {\n        this.dashboardTabWithDelay = index\n        const { subtab, ...queryWithoutSubtab } = this.$route.query\n        if (index) {\n          this.$router.replace({\n            query: Object.assign({}, queryWithoutSubtab, { subtab: `${index + 1}` }),\n          })\n        } else {\n          this.$router.replace({ query: {} })\n        }\n        this.selectTabLayout()\n      }, 200)\n    },\n\n    async setupDashboard() {\n      // Do we have config already or do we need to fetch it from the yaml file?\n      if (this.config) {\n        this.yaml = this.config\n      } else if (this.gist) {\n        this.yaml = this.gist\n      } else {\n        const yaml = await this.fileApi.getFileText(`${this.xsubfolder}/dashboard.yaml`)\n        this.yaml = YAML.parse(yaml)\n      }\n\n      // set header\n      this.updateThemeAndLabels()\n\n      // if there are subtabs, prepare them\n      if (this.yaml.subtabs) this.setupSubtabs()\n\n      this.setFullScreen()\n\n      // // Start on correct subtab\n      if (this.$route.query.subtab) {\n        try {\n          const userSupplied = parseInt('' + this.$route.query.subtab) - 1\n          this.activeTab = userSupplied || 0\n        } catch (e) {\n          // user spam; just use first tab\n          this.activeTab = 0\n        }\n      } else {\n        this.activeTab = 0\n      }\n\n      this.dashboardTabWithDelay = this.activeTab\n      this.selectTabLayout()\n    },\n\n    setupSubtabs() {\n      // YAML definition of subtabs can be:\n      // 1) false/missing: no subtabs.\n      // 2) true: convert each row property of the layout to a subtab\n      // 3) array[] of row IDs that comprise each subtab, e.g.\n      //    subtabs:\n      //    - title: 'Tab1'\n      //      rows: ['modeshare','statistics']\n      //\n      // In cases 2 and 3, this.subtabs will hold an array with the\n      // title and layout object for each subtab.\n\n      let i = 1\n      this.subtabs = []\n      const allRowKeys = new Set(Object.keys(this.yaml.layout))\n\n      if (this.yaml.subtabs === true) {\n        // One subtab per layout object.\n        for (const rowKey of allRowKeys) {\n          this.subtabs.push({ title: rowKey, layout: this.yaml.layout[rowKey] })\n        }\n      } else {\n        // subtabs array explicitly assigns rows to subtabs\n        for (const tab of this.yaml.subtabs) {\n          this.subtabs.push({\n            title: this.getObjectLabel(tab, 'title'),\n            layout: tab.rows.map((rowName: string) => {\n              allRowKeys.delete(rowName)\n              return this.yaml.layout[rowName]\n            }),\n          })\n        }\n        // if user missed any rows, add them at the end\n        for (const leftoverKey of allRowKeys) {\n          this.subtabs.push({ title: leftoverKey, layout: this.yaml.layout[leftoverKey] })\n        }\n      }\n    },\n\n    selectTabLayout() {\n      // Choose subtab or full layout\n\n      if (this.subtabs.length && this.activeTab > -1) {\n        const subtab = this.subtabs[this.activeTab].layout\n        this.setupRows(subtab)\n      } else if (this.yaml.layout) {\n        this.setupRows(this.yaml.layout)\n      } else {\n        this.$store.commit(\n          'error',\n          `Dashboard YAML: could not find current subtab ${this.activeTab}`\n        )\n      }\n    },\n\n    setupRows(layout: any) {\n      let numCard = 1\n\n      for (const rowId of Object.keys(layout)) {\n        let cards: any[] = layout[rowId]\n\n        // row must be an array - if it isn't, assume it is an array of length one\n        if (!cards.forEach) cards = [cards]\n\n        let flexWeight = 1\n\n        cards.forEach(card => {\n          card.id = `card-id-${numCard}`\n          card.isLoaded = false\n          card.number = numCard\n\n          // hoist flex weight if card has \"height\" and we are full-screen\n          try {\n            if (this.isFullScreenDashboard && card.height) {\n              flexWeight = Math.max(flexWeight, card.height)\n            }\n          } catch (e) {\n            console.error('' + e)\n            this.$emit('error', 'Dashboard YAML: non-numeric height')\n            flexWeight = 1\n          }\n\n          // make YAML easier to write: merge \"props\" property with other properties\n          // so user doesn't need to specify \"props: {...}\"\n          if (!card.props) card.props = Object.assign({}, card)\n          // markdown plugin really wants to know the height\n          if (card.height !== undefined) card.props.height = card.height\n\n          // Vue 2 is weird about new properties: use Vue.set() instead\n          Vue.set(this.opacity, card.id, 0.5)\n          Vue.set(this.infoToggle, card.id, false)\n          Vue.set(card, 'errors', [] as string[])\n\n          // Card header could be hidden\n          if (!card.title && !card.description) card.showHeader = false\n          else card.showHeader = true\n\n          numCard++\n        })\n\n        this.rows.push({ id: rowId, cards })\n        this.rowFlexWeights.push(flexWeight)\n      }\n      this.$emit('layoutComplete')\n    },\n\n    updateThemeAndLabels() {\n      this.title = this.getDashboardLabel('title')\n      this.description = this.getDashboardLabel('description')\n\n      if (this.yaml.header.theme) {\n        this.$store.commit('setTheme', this.yaml.header.theme)\n      }\n    },\n\n    getObjectLabel(o: any, prefix: string) {\n      let label = prefix\n\n      if (this.$store.state.locale === 'de') {\n        label = o[`${prefix}_de`] || o[`${prefix}`] || o[`${prefix}_en`] || ''\n      } else {\n        label = o[`${prefix}_en`] || o[`${prefix}`] || o[`${prefix}_de`] || ''\n      }\n\n      return label\n    },\n\n    getDashboardLabel(element: 'title' | 'description') {\n      const header = this.yaml.header\n      let tag = '...'\n\n      if (this.$store.state.locale === 'de') {\n        tag = header[`${element}_de`] || header[`${element}`] || header[`${element}_en`] || ''\n      } else {\n        tag = header[`${element}_en`] || header[`${element}`] || header[`${element}_de`] || ''\n      }\n\n      return tag\n    },\n\n    async handleCardIsLoaded(card: any) {\n      card.isLoaded = true\n      this.opacity[card.id] = 1.0\n      this.numberOfShownCards++\n    },\n\n    setupNarrowPanelObserver() {\n      const dashboard = document.getElementById(this.viewId) as HTMLElement\n      this.narrowPanelObserver = new ResizeObserver(this.handleResize)\n      this.narrowPanelObserver.observe(dashboard)\n    },\n\n    handleResize() {\n      const dashboard = document.getElementById(this.viewId) as HTMLElement\n      if (dashboard) this.isPanelNarrow = dashboard.clientWidth < 800\n      this.setFullScreen()\n      this.$store.commit('resize')\n    },\n\n    setFullScreen() {\n      if (this.isPanelNarrow) {\n        // Narrow panels are never fullscreen\n        this.isFullScreenDashboard = false\n      } else {\n        // help user with capitalization\n        this.isFullScreenDashboard =\n          this.yaml.header.fullScreen ||\n          this.yaml.header.fillScreen ||\n          this.yaml.header.fullscreen ||\n          this.yaml.header.fillscreen\n      }\n    },\n\n    getRowClass(row: any) {\n      const rowClass = {\n        'is-panel-narrow': this.isPanelNarrow,\n        'is-fullscreen-dashboard': this.isFullScreenDashboard,\n      } as any\n      rowClass[`row-${row.id}`] = true\n      return rowClass\n    },\n  },\n  async mounted() {\n    window.addEventListener('resize', this.resizeAllCards)\n    this.setupNarrowPanelObserver()\n\n    if (this.gist) {\n      this.fileSystemConfig = {\n        name: 'gist',\n        slug: 'gist',\n        description: 'From GitHub',\n        baseURL: this.gist.config.baseUrl,\n      }\n    } else {\n      this.fileSystemConfig = this.getFileSystem(this.root)\n    }\n\n    this.fileList = await this.getFiles()\n\n    await this.setupDashboard()\n\n    // only one card? just zoom it\n    if (this.rows.length == 1 && this.rows[0].cards.length == 1) {\n      const card = this.rows[0].cards[0]\n      this.toggleZoom(card)\n    }\n\n    this.resizeAllCards()\n  },\n  beforeDestroy() {\n    this.resizers = {}\n    window.removeEventListener('resize', this.resizeAllCards)\n  },\n})\n</script>\n\n<style scoped lang=\"scss\">\n@import '@/styles.scss';\n\n.dashboard {\n  margin: 0 0;\n  padding: 0 0;\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n\n  .dashboard-content {\n    max-width: $dashboardWidth;\n    margin: 0 auto 0 auto;\n  }\n\n  .dashboard-content.wiide {\n    max-width: unset;\n  }\n}\n\n// .dashboard.wiide {\n//   // padding-left: 1rem;\n// }\n\n.dashboard-header {\n  margin: 1rem 3rem 1rem 0rem;\n\n  h2 {\n    line-height: 2.1rem;\n    padding-bottom: 0.5rem;\n  }\n\n  p {\n    line-height: 1.4rem;\n  }\n}\n\n// .dashboard-header.wiide {\n//   // margin-right: 3rem;\n// }\n\n.dash-row {\n  display: flex;\n  flex-direction: row;\n}\n\n// FULL-SCREEN-DASHBOARD\n\n.dashboard.is-fullscreen-dashboard {\n  display: flex;\n  flex-direction: column;\n}\n\n.dashboard .dashboard-content.is-fullscreen-dashboard {\n  flex: 1;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n}\n\n.dash-row.is-fullscreen-dashboard {\n  flex: 1;\n}\n\n// --end--\n\n.dash-card-frame {\n  display: grid;\n  grid-auto-columns: 1fr;\n  grid-auto-rows: auto auto 1fr;\n  margin: 0 $cardSpacing $cardSpacing 0;\n  background-color: var(--bgCardFrame);\n  padding: 2px 5px;\n  border-radius: 4px;\n  overflow-x: auto;\n\n  .dash-card-headers {\n    display: flex;\n    flex-direction: row;\n  }\n\n  .dash-card-headers.fullscreen {\n    padding-top: 0;\n  }\n\n  .header-buttons {\n    display: flex;\n    flex-direction: row;\n    margin-left: auto;\n\n    button {\n      background-color: #00000000;\n      color: var(--link);\n      opacity: 0.5;\n    }\n    button:hover {\n      background-color: #ffffff20;\n      opacity: 1;\n    }\n  }\n\n  h3 {\n    grid-row: 1 / 2;\n    font-size: 1.1rem;\n    line-height: 1.5rem;\n    margin-bottom: 0.5rem;\n    color: var(--link);\n  }\n\n  // if there is a description, fix the margins\n  p {\n    grid-row: 2 / 3;\n    margin-top: -0.5rem;\n    margin-bottom: 0.5rem;\n  }\n\n  .spinner-box {\n    grid-row: 3 / 4;\n    position: relative;\n    background: url('../assets/simwrapper-logo/SW_logo_icon_anim.gif');\n    background-size: 8rem;\n    background-repeat: no-repeat;\n    background-position: center center;\n  }\n\n  .spinner-box.is-loaded {\n    background: none;\n  }\n}\n\n// .dash-card-frame.wiide {\n//   // margin-right: 2rem;\n// }\n\n.dash-card {\n  transition: opacity 0.5s;\n  overflow-x: hidden;\n  overflow-y: hidden;\n}\n\n// Observe for narrowness instead of a media-query\n// since the panel might be narrow even if the window is wide.\n// .dashboard.is-panel-narrow {\n//   // padding: 0rem 0rem;\n// }\n\n.dashboard-header.is-panel-narrow {\n  margin: 1rem 1rem 1rem 0rem;\n}\n\n.dash-row.is-panel-narrow {\n  flex-direction: column;\n}\n\n.dash-card-frame.is-panel-narrow {\n  margin: 0rem 0.5rem 1rem 0;\n}\n\nul.tab-row {\n  padding: 0 0;\n  margin: 0 0;\n  border-bottom: none;\n}\n\nli.tab-entry b a {\n  color: var(--link);\n  padding-bottom: 2px;\n}\n\nli.is-active b a {\n  border-bottom: 2px solid var(--link);\n}\n\nli.is-not-active b a {\n  color: var(--text);\n}\n\n.dash-card-errors {\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  background-color: var(--bgError);\n  color: var(--textBold);\n  border: 1px solid var(--bgCream4);\n  margin-bottom: 2px;\n  padding: 1rem 0.5rem;\n  z-index: 20000;\n  font-size: 0.95rem;\n  max-height: 50%;\n  overflow-y: auto;\n  p {\n    line-height: 1.2rem;\n    margin: 0 0;\n  }\n}\n</style>\n"],"file":"assets/DashBoard-413cbafb.js"}